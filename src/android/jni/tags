!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.8	//
A	ui/AntTweakBar/src/TwMgr.h	/^    int                  A;$/;"	m	struct:CColorExt
ANT_CALL	ui/AntTweakBar/src/TwMgr.h	18;"	d
ANT_GL_CORE_DECL	ui/AntTweakBar/src/LoadOGLCore.h	24;"	d
ANT_GL_CORE_DECL	ui/AntTweakBar/src/LoadOGLCore.h	32;"	d
ANT_GL_CORE_DECL_NO_FORWARD	ui/AntTweakBar/src/LoadOGLCore.h	18;"	d
ANT_GL_CORE_IMPL	ui/AntTweakBar/src/LoadOGLCore.h	26;"	d
ANT_GL_CORE_IMPL	ui/AntTweakBar/src/LoadOGLCore.h	35;"	d
ANT_LOAD_OGL_CORE_INCLUDED	ui/AntTweakBar/src/LoadOGLCore.h	15;"	d
ANT_NB_OGL_CORE_FUNC_MAX	ui/AntTweakBar/src/LoadOGLCore.cpp	16;"	d	file:
ANT_OGL_HEADER_INCLUDED	ui/AntTweakBar/src/TwOpenGLCore.cpp	19;"	d	file:
ANT_OGL_HEADER_INCLUDED	ui/AntTweakBar/src/TwPrecomp.h	90;"	d
ANT_OSX	ui/AntTweakBar/src/TwPrecomp.h	61;"	d
ANT_OSX	ui/AntTweakBar/src/TwPrecomp.h	63;"	d
ANT_PERF_TIMER_INCLUDED	ui/AntTweakBar/src/AntPerfTimer.h	14;"	d
ANT_SET_CURSOR	ui/AntTweakBar/src/TwBar.cpp	34;"	d	file:
ANT_SET_ROTO_CURSOR	ui/AntTweakBar/src/TwBar.cpp	35;"	d	file:
ANT_TWEAK_BAR_DLL	ui/AntTweakBar/src/TwBar.h	20;"	d
ANT_TW_BAR_INCLUDED	ui/AntTweakBar/src/TwBar.h	15;"	d
ANT_TW_COLORS_INCLUDED	ui/AntTweakBar/src/TwColors.h	15;"	d
ANT_TW_FONTS_INCLUDED	ui/AntTweakBar/src/TwFonts.h	15;"	d
ANT_TW_GRAPH_INCLUDED	ui/AntTweakBar/src/TwGraph.h	15;"	d
ANT_TW_MGR_INCLUDED	ui/AntTweakBar/src/TwMgr.h	15;"	d
ANT_TW_OPENGL_CORE_INCLUDED	ui/AntTweakBar/src/TwOpenGLCore.h	15;"	d
ANT_TW_PRECOMP_INCLUDED	ui/AntTweakBar/src/TwPrecomp.h	15;"	d
ANT_UNIX	ui/AntTweakBar/src/TwPrecomp.h	48;"	d
ANT_UNIX	ui/AntTweakBar/src/TwPrecomp.h	74;"	d
ANT_WINDOWS	ui/AntTweakBar/src/TwPrecomp.h	60;"	d
ANT_WINDOWS	ui/AntTweakBar/src/TwPrecomp.h	73;"	d
ANT_WINDOWS	ui/AntTweakBar/src/TwPrecomp.h	76;"	d
APIENTRY	ui/AntTweakBar/examples/TwGLCoreSDL.c	63;"	d	file:
APIENTRY	ui/AntTweakBar/src/LoadOGLCore.h	30;"	d
AR	ui/AntTweakBar/src/Makefile	/^AR       	= ar cqs$/;"	m
ARROW_CONE	ui/AntTweakBar/src/TwMgr.h	/^    enum EArrowParts     { ARROW_CONE, ARROW_CONE_CAP, ARROW_CYL, ARROW_CYL_CAP };$/;"	e	enum:CQuaternionExt::EArrowParts
ARROW_CONE_CAP	ui/AntTweakBar/src/TwMgr.h	/^    enum EArrowParts     { ARROW_CONE, ARROW_CONE_CAP, ARROW_CYL, ARROW_CYL_CAP };$/;"	e	enum:CQuaternionExt::EArrowParts
ARROW_CYL	ui/AntTweakBar/src/TwMgr.h	/^    enum EArrowParts     { ARROW_CONE, ARROW_CONE_CAP, ARROW_CYL, ARROW_CYL_CAP };$/;"	e	enum:CQuaternionExt::EArrowParts
ARROW_CYL_CAP	ui/AntTweakBar/src/TwMgr.h	/^    enum EArrowParts     { ARROW_CONE, ARROW_CONE_CAP, ARROW_CYL, ARROW_CYL_CAP };$/;"	e	enum:CQuaternionExt::EArrowParts
AR_EXT	ui/AntTweakBar/src/Makefile	/^AR_EXT		= .a$/;"	m
AddVar	ui/AntTweakBar/src/TwMgr.cpp	/^static int AddVar(TwBar *_Bar, const char *_Name, ETwType _Type, void *_VarPtr, bool _ReadOnly, TwSetVarCallback _SetCallback, TwGetVarCallback _GetCallback, TwButtonCallback _ButtonCallback, void *_ClientData, const char *_Def)$/;"	f	file:
Aloss	ui/AntTweakBar/src/MiniSDL12.h	/^    Uint8  Aloss;$/;"	m	struct:SDL_PixelFormat
Aloss	ui/AntTweakBar/src/MiniSDL13.h	/^    Uint8  Aloss;$/;"	m	struct:SDL_PixelFormat
Amask	ui/AntTweakBar/src/MiniSDL12.h	/^    Uint32 Amask;$/;"	m	struct:SDL_PixelFormat
Amask	ui/AntTweakBar/src/MiniSDL13.h	/^    Uint32 Amask;$/;"	m	struct:SDL_PixelFormat
Angle	ui/AntTweakBar/src/TwMgr.h	/^    double               Vx, Vy, Vz, Angle; \/\/ Not used$/;"	m	struct:CQuaternionExt
AngularVelocity	cpp/opengl/opengl.cpp	/^AngularVelocity::AngularVelocity(){$/;"	f	class:AngularVelocity
AngularVelocity	opengl/opengl.h	/^struct AngularVelocity{$/;"	s
AppendHelp	ui/AntTweakBar/src/TwMgr.cpp	/^static int AppendHelp(CTwVarGroup *_Grp, const CTwVarGroup *_ToAppend, int _Level, int _Width)$/;"	f	file:
AppendHelpString	ui/AntTweakBar/src/TwMgr.cpp	/^static int AppendHelpString(CTwVarGroup *_Grp, const char *_String, int _Level, int _Width, ETwType _Type)$/;"	f	file:
ApplyQuat	ui/AntTweakBar/src/TwMgr.cpp	/^void CQuaternionExt::ApplyQuat(float *outX, float *outY, float *outZ, float x, float y, float z, float qx, float qy, float qz, float qs)$/;"	f	class:CQuaternionExt
Ashift	ui/AntTweakBar/src/MiniSDL12.h	/^    Uint8  Ashift;$/;"	m	struct:SDL_PixelFormat
Ashift	ui/AntTweakBar/src/MiniSDL13.h	/^    Uint8  Ashift;$/;"	m	struct:SDL_PixelFormat
B	ui/AntTweakBar/src/TwMgr.h	/^    int                  R, G, B;$/;"	m	struct:CColorExt
BAR_ALPHA	ui/AntTweakBar/src/TwBar.cpp	/^    BAR_ALPHA,$/;"	e	enum:EBarAttribs	file:
BAR_ALWAYS_BOTTOM	ui/AntTweakBar/src/TwBar.cpp	/^    BAR_ALWAYS_BOTTOM,$/;"	e	enum:EBarAttribs	file:
BAR_ALWAYS_TOP	ui/AntTweakBar/src/TwBar.cpp	/^    BAR_ALWAYS_TOP,$/;"	e	enum:EBarAttribs	file:
BAR_BUTTON_ALIGN	ui/AntTweakBar/src/TwBar.cpp	/^    BAR_BUTTON_ALIGN$/;"	e	enum:EBarAttribs	file:
BAR_COLOR	ui/AntTweakBar/src/TwBar.cpp	/^    BAR_COLOR,$/;"	e	enum:EBarAttribs	file:
BAR_COLOR_SCHEME	ui/AntTweakBar/src/TwBar.cpp	/^    BAR_COLOR_SCHEME,$/;"	e	enum:EBarAttribs	file:
BAR_CONTAINED	ui/AntTweakBar/src/TwBar.cpp	/^    BAR_CONTAINED,$/;"	e	enum:EBarAttribs	file:
BAR_FONT_RESIZABLE	ui/AntTweakBar/src/TwBar.cpp	/^    BAR_FONT_RESIZABLE,$/;"	e	enum:EBarAttribs	file:
BAR_FONT_SIZE	ui/AntTweakBar/src/TwBar.cpp	/^    BAR_FONT_SIZE,$/;"	e	enum:EBarAttribs	file:
BAR_FONT_STYLE	ui/AntTweakBar/src/TwBar.cpp	/^    BAR_FONT_STYLE,$/;"	e	enum:EBarAttribs	file:
BAR_HELP	ui/AntTweakBar/src/TwBar.cpp	/^    BAR_HELP,$/;"	e	enum:EBarAttribs	file:
BAR_HIDE	ui/AntTweakBar/src/TwBar.cpp	/^    BAR_HIDE,    \/\/ deprecated, used BAR_VISIBLE instead$/;"	e	enum:EBarAttribs	file:
BAR_ICONIFIABLE	ui/AntTweakBar/src/TwBar.cpp	/^    BAR_ICONIFIABLE,$/;"	e	enum:EBarAttribs	file:
BAR_ICONIFIED	ui/AntTweakBar/src/TwBar.cpp	/^    BAR_ICONIFIED,$/;"	e	enum:EBarAttribs	file:
BAR_ICONIFY	ui/AntTweakBar/src/TwBar.cpp	/^    BAR_ICONIFY, \/\/ deprecated, used BAR_ICONIFIED instead$/;"	e	enum:EBarAttribs	file:
BAR_ICON_ALIGN	ui/AntTweakBar/src/TwBar.cpp	/^    BAR_ICON_ALIGN,$/;"	e	enum:EBarAttribs	file:
BAR_ICON_MARGIN	ui/AntTweakBar/src/TwBar.cpp	/^    BAR_ICON_MARGIN,$/;"	e	enum:EBarAttribs	file:
BAR_ICON_POS	ui/AntTweakBar/src/TwBar.cpp	/^    BAR_ICON_POS,$/;"	e	enum:EBarAttribs	file:
BAR_LABEL	ui/AntTweakBar/src/TwBar.cpp	/^    BAR_LABEL = 1,$/;"	e	enum:EBarAttribs	file:
BAR_MOVABLE	ui/AntTweakBar/src/TwBar.cpp	/^    BAR_MOVABLE,$/;"	e	enum:EBarAttribs	file:
BAR_POSITION	ui/AntTweakBar/src/TwBar.cpp	/^    BAR_POSITION,$/;"	e	enum:EBarAttribs	file:
BAR_REFRESH	ui/AntTweakBar/src/TwBar.cpp	/^    BAR_REFRESH,$/;"	e	enum:EBarAttribs	file:
BAR_RESIZABLE	ui/AntTweakBar/src/TwBar.cpp	/^    BAR_RESIZABLE,$/;"	e	enum:EBarAttribs	file:
BAR_SHOW	ui/AntTweakBar/src/TwBar.cpp	/^    BAR_SHOW,    \/\/ deprecated, used BAR_VISIBLE instead$/;"	e	enum:EBarAttribs	file:
BAR_SIZE	ui/AntTweakBar/src/TwBar.cpp	/^    BAR_SIZE,$/;"	e	enum:EBarAttribs	file:
BAR_TEXT	ui/AntTweakBar/src/TwBar.cpp	/^    BAR_TEXT,$/;"	e	enum:EBarAttribs	file:
BAR_VALUES_WIDTH	ui/AntTweakBar/src/TwBar.cpp	/^    BAR_VALUES_WIDTH,$/;"	e	enum:EBarAttribs	file:
BAR_VISIBLE	ui/AntTweakBar/src/TwBar.cpp	/^    BAR_VISIBLE,$/;"	e	enum:EBarAttribs	file:
BRYANFLAGS	Makefile	/^BRYANFLAGS = -DBRYAN_$/;"	m
BRYANFLAGS	Makefile	/^BRYANFLAGS =$/;"	m
BUTTON_ALIGN_CENTER	ui/AntTweakBar/src/TwMgr.h	/^    BUTTON_ALIGN_CENTER, $/;"	e	enum:EButtonAlign
BUTTON_ALIGN_LEFT	ui/AntTweakBar/src/TwMgr.h	/^    BUTTON_ALIGN_LEFT, $/;"	e	enum:EButtonAlign
BUTTON_ALIGN_RIGHT	ui/AntTweakBar/src/TwMgr.h	/^    BUTTON_ALIGN_RIGHT $/;"	e	enum:EButtonAlign
BarVarGetAttrib	ui/AntTweakBar/src/TwMgr.cpp	/^ERetType BarVarGetAttrib(CTwBar *_Bar, CTwVar *_Var, CTwVarGroup *_VarParent, int _VarIndex, int _AttribID, std::vector<double>& outDoubles, std::ostringstream& outString)$/;"	f
BarVarHasAttrib	ui/AntTweakBar/src/TwMgr.cpp	/^int BarVarHasAttrib(CTwBar *_Bar, CTwVar *_Var, const char *_Attrib, bool *_HasValue)$/;"	f
BarVarSetAttrib	ui/AntTweakBar/src/TwMgr.cpp	/^int BarVarSetAttrib(CTwBar *_Bar, CTwVar *_Var, CTwVarGroup *_VarParent, int _VarIndex, int _AttribID, const char *_Value)$/;"	f
BeginDraw	ui/AntTweakBar/src/TwOpenGLCore.cpp	/^void CTwGraphOpenGLCore::BeginDraw(int _WndWidth, int _WndHeight)$/;"	f	class:CTwGraphOpenGLCore
BindFont	ui/AntTweakBar/src/TwOpenGLCore.cpp	/^static GLuint BindFont(const CTexFont *_Font)$/;"	f	file:
BitsPerPixel	ui/AntTweakBar/src/MiniSDL12.h	/^    Uint8  BitsPerPixel;$/;"	m	struct:SDL_PixelFormat
BitsPerPixel	ui/AntTweakBar/src/MiniSDL13.h	/^    Uint8  BitsPerPixel;$/;"	m	struct:SDL_PixelFormat
Bloss	ui/AntTweakBar/src/MiniSDL12.h	/^    Uint8  Bloss;$/;"	m	struct:SDL_PixelFormat
Bloss	ui/AntTweakBar/src/MiniSDL13.h	/^    Uint8  Bloss;$/;"	m	struct:SDL_PixelFormat
Bmask	ui/AntTweakBar/src/MiniSDL12.h	/^    Uint32 Bmask;$/;"	m	struct:SDL_PixelFormat
Bmask	ui/AntTweakBar/src/MiniSDL13.h	/^    Uint32 Bmask;$/;"	m	struct:SDL_PixelFormat
BrowseHierarchy	ui/AntTweakBar/src/TwBar.cpp	/^void CTwBar::BrowseHierarchy(int *_CurrLine, int _CurrLevel, const CTwVar *_Var, int _First, int _Last)$/;"	f	class:CTwBar
Bshift	ui/AntTweakBar/src/MiniSDL12.h	/^    Uint8  Bshift;$/;"	m	struct:SDL_PixelFormat
Bshift	ui/AntTweakBar/src/MiniSDL13.h	/^    Uint8  Bshift;$/;"	m	struct:SDL_PixelFormat
BuildText	ui/AntTweakBar/src/TwOpenGLCore.cpp	/^void CTwGraphOpenGLCore::BuildText(void *_TextObj, const std::string *_TextLines, color32 *_LineColors, color32 *_LineBgColors, int _NbLines, const CTexFont *_Font, int _Sep, int _BgWidth)$/;"	f	class:CTwGraphOpenGLCore
BytesPerPixel	ui/AntTweakBar/src/MiniSDL12.h	/^    Uint8  BytesPerPixel;$/;"	m	struct:SDL_PixelFormat
BytesPerPixel	ui/AntTweakBar/src/MiniSDL13.h	/^    Uint8  BytesPerPixel;$/;"	m	struct:SDL_PixelFormat
CBoolVal	ui/AntTweakBar/src/TwBar.h	/^        struct CBoolVal$/;"	s	union:CTwVarAtom::UVal
CButtonVal	ui/AntTweakBar/src/TwBar.h	/^        struct CButtonVal$/;"	s	union:CTwVarAtom::UVal
CCDStdString	ui/AntTweakBar/src/TwMgr.h	/^    struct CCDStdString$/;"	s	struct:CTwMgr
CCDStdStringRecord	ui/AntTweakBar/src/TwMgr.h	/^    struct CCDStdStringRecord $/;"	s	struct:CTwMgr
CClientStdString	ui/AntTweakBar/src/TwMgr.cpp	/^CTwMgr::CClientStdString::CClientStdString()$/;"	f	class:CTwMgr::CClientStdString
CClientStdString	ui/AntTweakBar/src/TwMgr.h	/^    struct CClientStdString  \/\/ Convertion between VC++ Debug\/Release std::string$/;"	s	struct:CTwMgr
CColorExt	ui/AntTweakBar/src/TwMgr.h	/^struct CColorExt$/;"	s
CCursor	ui/AntTweakBar/src/TwMgr.h	/^        typedef Cursor  CCursor;$/;"	t	struct:CTwMgr
CCursor	ui/AntTweakBar/src/TwMgr.h	/^        typedef HCURSOR CCursor;$/;"	t	struct:CTwMgr
CCursor	ui/AntTweakBar/src/TwMgr.h	/^        typedef NSCursor * CCursor;$/;"	t	struct:CTwMgr
CCustom	ui/AntTweakBar/src/TwMgr.h	/^    struct CCustom      \/\/ custom var type$/;"	s	struct:CTwMgr
CCustomRecord	ui/AntTweakBar/src/TwBar.h	/^    struct CCustomRecord$/;"	s	struct:CTwBar
CCustomVal	ui/AntTweakBar/src/TwBar.h	/^        struct CCustomVal$/;"	s	union:CTwVarAtom::UVal
CEditInPlace	ui/AntTweakBar/src/TwBar.cpp	/^CTwBar::CEditInPlace::CEditInPlace()$/;"	f	class:CTwBar::CEditInPlace
CEditInPlace	ui/AntTweakBar/src/TwBar.h	/^    struct CEditInPlace$/;"	s	struct:CTwBar
CEntries	ui/AntTweakBar/src/TwMgr.h	/^        typedef std::map<unsigned int, std::string> CEntries;$/;"	t	struct:CTwMgr::CEnum
CEnum	ui/AntTweakBar/src/TwMgr.h	/^    struct CEnum$/;"	s	struct:CTwMgr
CEnumVal	ui/AntTweakBar/src/TwBar.h	/^        struct CEnumVal     \/\/ empty -> enum entries are deduced from m_Type$/;"	s	union:CTwVarAtom::UVal
CHECK_GL_ERROR	ui/AntTweakBar/src/TwOpenGLCore.cpp	48;"	d	file:
CHECK_GL_ERROR	ui/AntTweakBar/src/TwOpenGLCore.cpp	50;"	d	file:
CHECK_GL_ERROR	ui/AntTweakBar/src/TwOpenGLCore.cpp	53;"	d	file:
CHelpStruct	ui/AntTweakBar/src/TwBar.h	/^        struct CHelpStruct$/;"	s	union:CTwVarAtom::UVal
CHierTag	ui/AntTweakBar/src/TwBar.h	/^    struct CHierTag$/;"	s	struct:CTwBar
CIRCLE	shapes.h	/^    CIRCLE,$/;"	e	enum:shape::EnumShape
CLibStdString	ui/AntTweakBar/src/TwMgr.cpp	/^CTwMgr::CLibStdString::CLibStdString()$/;"	f	class:CTwMgr::CLibStdString
CLibStdString	ui/AntTweakBar/src/TwMgr.h	/^    struct CLibStdString   \/\/ Convertion between VC++ Debug\/Release std::string$/;"	s	struct:CTwMgr
CMemberProxy	ui/AntTweakBar/src/TwMgr.cpp	/^CTwMgr::CMemberProxy::CMemberProxy() $/;"	f	class:CTwMgr::CMemberProxy
CMemberProxy	ui/AntTweakBar/src/TwMgr.h	/^    struct CMemberProxy$/;"	s	struct:CTwMgr
COGLCoreFuncRec	ui/AntTweakBar/src/LoadOGLCore.cpp	/^    COGLCoreFuncRec() : m_Name(NULL), m_FuncPtr(NULL) {}$/;"	f	struct:COGLCoreFuncRec
COGLCoreFuncRec	ui/AntTweakBar/src/LoadOGLCore.cpp	/^struct COGLCoreFuncRec$/;"	s	file:
COLOR32_BLACK	ui/AntTweakBar/src/TwColors.h	/^const color32 COLOR32_BLACK     = 0xff000000;   \/\/ Black $/;"	v
COLOR32_BLUE	ui/AntTweakBar/src/TwColors.h	/^const color32 COLOR32_BLUE      = 0xff0000ff;   \/\/ Blue $/;"	v
COLOR32_GREEN	ui/AntTweakBar/src/TwColors.h	/^const color32 COLOR32_GREEN     = 0xff00ff00;   \/\/ Green $/;"	v
COLOR32_RED	ui/AntTweakBar/src/TwColors.h	/^const color32 COLOR32_RED       = 0xffff0000;   \/\/ Red $/;"	v
COLOR32_WHITE	ui/AntTweakBar/src/TwColors.h	/^const color32 COLOR32_WHITE     = 0xffffffff;   \/\/ White $/;"	v
COLOR32_ZERO	ui/AntTweakBar/src/TwColors.h	/^const color32 COLOR32_ZERO      = 0x00000000;   \/\/ Zero $/;"	v
COPY	ui/AntTweakBar/src/Makefile	/^COPY     	= cp -f$/;"	m
COPY_DIR	ui/AntTweakBar/src/Makefile	/^COPY_DIR 	= $(COPY) -pR$/;"	m
COPY_FILE	ui/AntTweakBar/src/Makefile	/^COPY_FILE	= $(COPY) -p$/;"	m
CPoint	ui/AntTweakBar/src/TwBar.h	/^                            CPoint() {}$/;"	f	struct:CTwBar::CPoint
CPoint	ui/AntTweakBar/src/TwBar.h	/^                            CPoint(int _X, int _Y):x(_X), y(_Y) {}$/;"	f	struct:CTwBar::CPoint
CPoint	ui/AntTweakBar/src/TwBar.h	/^    struct  CPoint $/;"	s	struct:CTwBar
CQuaternionExt	ui/AntTweakBar/src/TwMgr.h	/^struct CQuaternionExt$/;"	s
CRect	ui/AntTweakBar/src/TwMgr.h	/^    CRect() : X(0), Y(0), W(0), H(0) {}$/;"	f	struct:CRect
CRect	ui/AntTweakBar/src/TwMgr.h	/^    CRect(int _X, int _Y, int _W, int _H) : X(_X), Y(_Y), W(_W), H(_H) {}$/;"	f	struct:CRect
CRect	ui/AntTweakBar/src/TwMgr.h	/^struct CRect $/;"	s
CRotoSlider	ui/AntTweakBar/src/TwBar.cpp	/^CTwBar::CRotoSlider::CRotoSlider()$/;"	f	class:CTwBar::CRotoSlider
CRotoSlider	ui/AntTweakBar/src/TwBar.h	/^    struct CRotoSlider$/;"	s	struct:CTwBar
CShortcutVal	ui/AntTweakBar/src/TwBar.h	/^        struct CShortcutVal$/;"	s	union:CTwVarAtom::UVal
CStruct	ui/AntTweakBar/src/TwMgr.h	/^        CStruct() : m_IsExt(false), m_StructExtInitCallback(NULL), m_CopyVarFromExtCallback(NULL), m_CopyVarToExtCallback(NULL), m_ExtClientData(NULL) {}$/;"	f	struct:CTwMgr::CStruct
CStruct	ui/AntTweakBar/src/TwMgr.h	/^    struct CStruct$/;"	s	struct:CTwMgr
CStructMember	ui/AntTweakBar/src/TwMgr.h	/^    struct CStructMember$/;"	s	struct:CTwMgr
CStructProxy	ui/AntTweakBar/src/TwMgr.cpp	/^CTwMgr::CStructProxy::CStructProxy()$/;"	f	class:CTwMgr::CStructProxy
CStructProxy	ui/AntTweakBar/src/TwMgr.h	/^    struct CStructProxy$/;"	s	struct:CTwMgr
CTexFont	ui/AntTweakBar/src/TwFonts.cpp	/^CTexFont::CTexFont()$/;"	f	class:CTexFont
CTexFont	ui/AntTweakBar/src/TwFonts.h	/^struct CTexFont$/;"	s
CTextObj	ui/AntTweakBar/src/TwOpenGLCore.h	/^    struct CTextObj$/;"	s	class:CTwGraphOpenGLCore
CTwBar	ui/AntTweakBar/src/TwBar.cpp	/^CTwBar::CTwBar(const char *_Name)$/;"	f	class:CTwBar
CTwBar	ui/AntTweakBar/src/TwBar.h	/^struct CTwBar$/;"	s
CTwEnumVal	ui/AntTweakBar/include/AntTweakBar.h	/^typedef struct CTwEnumVal$/;"	s
CTwFPU	ui/AntTweakBar/src/TwMgr.h	/^    CTwFPU()    $/;"	f	struct:CTwFPU
CTwFPU	ui/AntTweakBar/src/TwMgr.h	/^struct CTwFPU$/;"	s
CTwGraphOpenGLCore	ui/AntTweakBar/src/TwOpenGLCore.h	/^class CTwGraphOpenGLCore : public ITwGraph$/;"	c
CTwMgr	ui/AntTweakBar/src/TwMgr.cpp	/^CTwMgr::CTwMgr(ETwGraphAPI _GraphAPI, void *_Device, int _WndID)$/;"	f	class:CTwMgr
CTwMgr	ui/AntTweakBar/src/TwMgr.h	/^struct CTwMgr$/;"	s
CTwStructMember	ui/AntTweakBar/include/AntTweakBar.h	/^typedef struct CTwStructMember$/;"	s
CTwVar	ui/AntTweakBar/src/TwBar.cpp	/^CTwVar::CTwVar()$/;"	f	class:CTwVar
CTwVar	ui/AntTweakBar/src/TwBar.h	/^struct CTwVar$/;"	s
CTwVarAtom	ui/AntTweakBar/src/TwBar.cpp	/^CTwVarAtom::CTwVarAtom()$/;"	f	class:CTwVarAtom
CTwVarAtom	ui/AntTweakBar/src/TwBar.h	/^struct CTwVarAtom : CTwVar$/;"	s
CTwVarGroup	ui/AntTweakBar/src/TwBar.h	/^                            CTwVarGroup()   { m_Open=false; m_StructType=TW_TYPE_UNDEF; m_SummaryCallback=NULL; m_SummaryClientData=NULL; m_StructValuePtr=NULL; }$/;"	f	struct:CTwVarGroup
CTwVarGroup	ui/AntTweakBar/src/TwBar.h	/^struct CTwVarGroup : CTwVar$/;"	s
CTwVerif	ui/AntTweakBar/src/TwMgr.cpp	/^static struct CTwVerif$/;"	s	file:
CTwWndMap	ui/AntTweakBar/src/TwMgr.cpp	/^typedef map<int, CTwMgr *> CTwWndMap;$/;"	t	file:
CUBEMESH_HPP_	CubeMesh.hpp	3;"	d
CUBE_HPP_	Cube.hpp	3;"	d
CULL_CCW	ui/AntTweakBar/src/TwGraph.h	/^    enum Cull           { CULL_NONE, CULL_CW, CULL_CCW };$/;"	e	enum:ITwGraph::Cull
CULL_CW	ui/AntTweakBar/src/TwGraph.h	/^    enum Cull           { CULL_NONE, CULL_CW, CULL_CCW };$/;"	e	enum:ITwGraph::Cull
CULL_NONE	ui/AntTweakBar/src/TwGraph.h	/^    enum Cull           { CULL_NONE, CULL_CW, CULL_CCW };$/;"	e	enum:ITwGraph::Cull
CXX	ui/AntTweakBar/examples/Makefile	/^CXX      	= g++$/;"	m
CXX	ui/AntTweakBar/src/Makefile	/^CXX      	= gcc$/;"	m
CXXCFG	ui/AntTweakBar/examples/Makefile	/^CXXCFG   	= -O3$/;"	m
CXXCFG	ui/AntTweakBar/src/Makefile	/^CXXCFG   	= -O3$/;"	m
CXXFLAGS	ui/AntTweakBar/examples/Makefile	/^CXXFLAGS 	= $(CXXCFG) -Wall -fno-strict-aliasing$/;"	m
CXXFLAGS	ui/AntTweakBar/src/Makefile	/^CXXFLAGS 	= $(CXXCFG) -Wall -fPIC -fno-strict-aliasing -D_UNIX -D__PLACEMENT_NEW_INLINE$/;"	m
ChangeViewport	ui/AntTweakBar/src/TwOpenGLCore.cpp	/^void CTwGraphOpenGLCore::ChangeViewport(int _X0, int _Y0, int _Width, int _Height, int _OffsetX, int _OffsetY)$/;"	f	class:CTwGraphOpenGLCore
CheckGLCoreError	ui/AntTweakBar/src/TwOpenGLCore.cpp	/^    static void CheckGLCoreError(const char *file, int line, const char *func)$/;"	f	file:
CheckLastError	ui/AntTweakBar/src/TwMgr.cpp	/^const char *CTwMgr::CheckLastError() const$/;"	f	class:CTwMgr
ClampText	ui/AntTweakBar/src/TwBar.cpp	/^static int ClampText(string& _Text, const CTexFont *_Font, int _WidthMax)$/;"	f	file:
Color32FromARGBf	ui/AntTweakBar/src/TwColors.h	/^inline color32 Color32FromARGBf(float _A, float _R, float _G, float _B)$/;"	f
Color32FromARGBi	ui/AntTweakBar/src/TwColors.h	/^inline color32 Color32FromARGBi(int _A, int _R, int _G, int _B)$/;"	f
Color32ToARGBf	ui/AntTweakBar/src/TwColors.h	/^inline void Color32ToARGBf(color32 _Color, float *_A, float *_R, float *_G, float *_B)$/;"	f
Color32ToARGBi	ui/AntTweakBar/src/TwColors.h	/^inline void Color32ToARGBi(color32 _Color, int *_A, int *_R, int *_G, int *_B)$/;"	f
ColorBlend	ui/AntTweakBar/src/TwColors.cpp	/^color32 ColorBlend(color32 _Color1, color32 _Color2, float _S)$/;"	f
ColorHLSToRGBf	ui/AntTweakBar/src/TwColors.cpp	/^void ColorHLSToRGBf(float _Hue, float _Light, float _Saturation, float *_R, float *_G, float *_B)$/;"	f
ColorHLSToRGBi	ui/AntTweakBar/src/TwColors.cpp	/^void ColorHLSToRGBi(int _Hue, int _Light, int _Saturation, int *_R, int *_G, int *_B)$/;"	f
ColorRGB	cpp/opengl/opengl.cpp	/^ColorRGB::ColorRGB(float r,float g,float b){$/;"	f	class:ColorRGB
ColorRGB	opengl/opengl.h	/^struct ColorRGB{$/;"	s
ColorRGBToHLSf	ui/AntTweakBar/src/TwColors.cpp	/^void ColorRGBToHLSf(float _R, float _G, float _B, float *_Hue, float *_Light, float *_Saturation)$/;"	f
ColorRGBToHLSi	ui/AntTweakBar/src/TwColors.cpp	/^void ColorRGBToHLSi(int _R, int _G, int _B, int *_Hue, int *_Light, int *_Saturation)$/;"	f
CompileShader	ui/AntTweakBar/src/TwOpenGLCore.cpp	/^static GLuint CompileShader(GLuint shader)$/;"	f	file:
ComputeLabelsWidth	ui/AntTweakBar/src/TwBar.cpp	/^int CTwBar::ComputeLabelsWidth(const CTexFont *_Font)$/;"	f	class:CTwBar
ComputeValuesWidth	ui/AntTweakBar/src/TwBar.cpp	/^int CTwBar::ComputeValuesWidth(const CTexFont *_Font)$/;"	f	class:CTwBar
ConvertFromAxisAngle	ui/AntTweakBar/src/TwMgr.cpp	/^void CQuaternionExt::ConvertFromAxisAngle()$/;"	f	class:CQuaternionExt
ConvertToAxisAngle	ui/AntTweakBar/src/TwMgr.cpp	/^void CQuaternionExt::ConvertToAxisAngle()$/;"	f	class:CQuaternionExt
CopyHierarchy	ui/AntTweakBar/src/TwMgr.cpp	/^static void CopyHierarchy(CTwVarGroup *dst, const CTwVarGroup *src)$/;"	f	file:
CopyToVar	ui/AntTweakBar/src/TwMgr.cpp	/^void CQuaternionExt::CopyToVar()$/;"	f	class:CQuaternionExt
CopyVarFromExtCB	ui/AntTweakBar/src/TwMgr.cpp	/^void ANT_CALL CColorExt::CopyVarFromExtCB(void *_VarValue, const void *_ExtValue, unsigned int _ExtMemberIndex, void *_ClientData)$/;"	f	class:CColorExt
CopyVarFromExtCB	ui/AntTweakBar/src/TwMgr.cpp	/^void ANT_CALL CQuaternionExt::CopyVarFromExtCB(void *_VarValue, const void *_ExtValue, unsigned int _ExtMemberIndex, void *_ClientData)$/;"	f	class:CQuaternionExt
CopyVarToExtCB	ui/AntTweakBar/src/TwMgr.cpp	/^void ANT_CALL CColorExt::CopyVarToExtCB(const void *_VarValue, void *_ExtValue, unsigned int _ExtMemberIndex, void *_ClientData)$/;"	f	class:CColorExt
CopyVarToExtCB	ui/AntTweakBar/src/TwMgr.cpp	/^void ANT_CALL CQuaternionExt::CopyVarToExtCB(const void *_VarValue, void *_ExtValue, unsigned int _ExtMemberIndex, void *_ClientData)$/;"	f	class:CQuaternionExt
CreateArrow	ui/AntTweakBar/src/TwMgr.cpp	/^void CQuaternionExt::CreateArrow()$/;"	f	class:CQuaternionExt
CreateCursors	ui/AntTweakBar/src/TwMgr.cpp	/^void CTwMgr::CreateCursors()$/;"	f	class:CTwMgr
CreateSphere	ui/AntTweakBar/src/TwMgr.cpp	/^void CQuaternionExt::CreateSphere()$/;"	f	class:CQuaternionExt
CreateTweakBar	ui/AntTweakBar/examples/TwGLCoreSDL.c	/^TwBar *CreateTweakBar()$/;"	f
CreateTypes	ui/AntTweakBar/src/TwMgr.cpp	/^void CColorExt::CreateTypes()$/;"	f	class:CColorExt
CreateTypes	ui/AntTweakBar/src/TwMgr.cpp	/^void CQuaternionExt::CreateTypes()$/;"	f	class:CQuaternionExt
Cube	Cube.hpp	/^    class Cube$/;"	c	namespace:game
CubeMesh	CubeMesh.hpp	/^    class CubeMesh$/;"	c	namespace:game
Cull	ui/AntTweakBar/src/TwGraph.h	/^    enum Cull           { CULL_NONE, CULL_CW, CULL_CCW };$/;"	g	class:ITwGraph
CustomMap	ui/AntTweakBar/src/TwBar.h	/^    typedef std::map<CTwMgr::CStructProxy*, CCustomRecord> CustomMap;$/;"	t	struct:CTwBar
DEGRAD	bak/GameScreen.cpp	/^constexpr float DEGRAD = M_PI \/ 180.;$/;"	v
DEGRAD	cpp/screens/GameScreen.cpp	/^constexpr float DEGRAD = M_PI \/ 180.;$/;"	v
DEGTORAD	cpp/Player.cpp	11;"	d	file:
DEL_DIR	ui/AntTweakBar/examples/Makefile	/^DEL_DIR  	= rmdir$/;"	m
DEL_DIR	ui/AntTweakBar/src/Makefile	/^DEL_DIR  	= rmdir$/;"	m
DEL_FILE	ui/AntTweakBar/examples/Makefile	/^DEL_FILE 	= rm -f$/;"	m
DEL_FILE	ui/AntTweakBar/src/Makefile	/^DEL_FILE 	= rm -f$/;"	m
DEPS	Makefile	/^DEPS = $(SRCS:.cpp=.d)$/;"	m
DOUBLE_EPS	ui/AntTweakBar/src/TwBar.cpp	/^const double DOUBLE_EPS = 1.0e-307;$/;"	v
DOUBLE_EPS	ui/AntTweakBar/src/TwMgr.cpp	/^const double DOUBLE_EPS    = 1.0e-14;$/;"	v
DOUBLE_EPS_SQ	ui/AntTweakBar/src/TwMgr.cpp	/^const double DOUBLE_EPS_SQ = 1.0e-28;$/;"	v
DOUBLE_MAX	ui/AntTweakBar/src/TwBar.cpp	/^const double DOUBLE_MAX = 1.0e+308;$/;"	v
DOUBLE_PI	ui/AntTweakBar/src/TwMgr.cpp	/^const double DOUBLE_PI     = 3.14159265358979323846;$/;"	v
DRAW_ALL	ui/AntTweakBar/src/TwBar.h	/^    enum EDrawPart          { DRAW_BG=(1<<0), DRAW_CONTENT=(1<<1), DRAW_ALL=DRAW_BG|DRAW_CONTENT };$/;"	e	enum:CTwBar::EDrawPart
DRAW_BG	ui/AntTweakBar/src/TwBar.h	/^    enum EDrawPart          { DRAW_BG=(1<<0), DRAW_CONTENT=(1<<1), DRAW_ALL=DRAW_BG|DRAW_CONTENT };$/;"	e	enum:CTwBar::EDrawPart
DRAW_CONTENT	ui/AntTweakBar/src/TwBar.h	/^    enum EDrawPart          { DRAW_BG=(1<<0), DRAW_CONTENT=(1<<1), DRAW_ALL=DRAW_BG|DRAW_CONTENT };$/;"	e	enum:CTwBar::EDrawPart
DefString	ui/AntTweakBar/include/AntTweakBar.h	/^    const char *  DefString;$/;"	m	struct:CTwStructMember
DefaultSummary	ui/AntTweakBar/src/TwMgr.cpp	/^void ANT_CALL CTwMgr::CStruct::DefaultSummary(char *_SummaryString, size_t _SummaryMaxLength, const void *_Value, void *_ClientData)$/;"	f	class:CTwMgr::CStruct
DegToRad	ui/AntTweakBar/src/TwMgr.cpp	/^inline double DegToRad(double degree) { return degree * (DOUBLE_PI\/180.0); }$/;"	f
DeleteTextObj	ui/AntTweakBar/src/TwOpenGLCore.cpp	/^void CTwGraphOpenGLCore::DeleteTextObj(void *_TextObj)$/;"	f	class:CTwGraphOpenGLCore
Draw	ui/AntTweakBar/src/TwBar.cpp	/^void CTwBar::Draw(int _DrawPart)$/;"	f	class:CTwBar
DrawArc	ui/AntTweakBar/src/TwBar.cpp	/^void DrawArc(int _X, int _Y, int _Radius, float _StartAngleDeg, float _EndAngleDeg, color32 _Color) \/\/ angles in degree$/;"	f
DrawCB	ui/AntTweakBar/src/TwMgr.cpp	/^void CQuaternionExt::DrawCB(int w, int h, void *_ExtValue, void *_ClientData, TwBar *_Bar, CTwVarGroup *varGrp)$/;"	f	class:CQuaternionExt
DrawCache	opengl/opengl.h	/^struct DrawCache{$/;"	s
DrawHierHandle	ui/AntTweakBar/src/TwBar.cpp	/^void CTwBar::DrawHierHandle()$/;"	f	class:CTwBar
DrawLine	ui/AntTweakBar/src/TwOpenGLCore.cpp	/^void CTwGraphOpenGLCore::DrawLine(int _X0, int _Y0, int _X1, int _Y1, color32 _Color0, color32 _Color1, bool _AntiAliased)$/;"	f	class:CTwGraphOpenGLCore
DrawLine	ui/AntTweakBar/src/TwOpenGLCore.h	/^    virtual void        DrawLine(int _X0, int _Y0, int _X1, int _Y1, color32 _Color, bool _AntiAliased=false) { DrawLine(_X0, _Y0, _X1, _Y1, _Color, _Color, _AntiAliased); }$/;"	f	class:CTwGraphOpenGLCore
DrawRect	ui/AntTweakBar/src/TwOpenGLCore.cpp	/^void CTwGraphOpenGLCore::DrawRect(int _X0, int _Y0, int _X1, int _Y1, color32 _Color00, color32 _Color10, color32 _Color01, color32 _Color11)$/;"	f	class:CTwGraphOpenGLCore
DrawRect	ui/AntTweakBar/src/TwOpenGLCore.h	/^    virtual void        DrawRect(int _X0, int _Y0, int _X1, int _Y1, color32 _Color) { DrawRect(_X0, _Y0, _X1, _Y1, _Color, _Color, _Color, _Color); }$/;"	f	class:CTwGraphOpenGLCore
DrawText	ui/AntTweakBar/src/TwGraph.h	24;"	d
DrawText	ui/AntTweakBar/src/TwOpenGLCore.cpp	/^void CTwGraphOpenGLCore::DrawText(void *_TextObj, int _X, int _Y, color32 _Color, color32 _BgColor)$/;"	f	class:CTwGraphOpenGLCore
DrawTriangles	ui/AntTweakBar/src/TwOpenGLCore.cpp	/^void CTwGraphOpenGLCore::DrawTriangles(int _NumTriangles, int *_Vertices, color32 *_Colors, Cull _CullMode)$/;"	f	class:CTwGraphOpenGLCore
DummyLighten	opengl/programs.h	/^  struct DummyLighten{$/;"	s	namespace:program
DummyTextured	opengl/programs.h	/^  struct DummyTextured{$/;"	s	namespace:program
Dx	ui/AntTweakBar/src/TwMgr.h	/^    double               Dx, Dy, Dz;        \/\/ Dir value set when used as a direction$/;"	m	struct:CQuaternionExt
Dy	ui/AntTweakBar/src/TwMgr.h	/^    double               Dx, Dy, Dz;        \/\/ Dir value set when used as a direction$/;"	m	struct:CQuaternionExt
Dz	ui/AntTweakBar/src/TwMgr.h	/^    double               Dx, Dy, Dz;        \/\/ Dir value set when used as a direction$/;"	m	struct:CQuaternionExt
EArrowParts	ui/AntTweakBar/src/TwMgr.h	/^    enum EArrowParts     { ARROW_CONE, ARROW_CONE_CAP, ARROW_CYL, ARROW_CYL_CAP };$/;"	g	struct:CQuaternionExt
EBarAttribs	ui/AntTweakBar/src/TwBar.cpp	/^enum EBarAttribs$/;"	g	file:
EButtonAlign	ui/AntTweakBar/src/TwMgr.h	/^enum EButtonAlign   $/;"	g
EDrawPart	ui/AntTweakBar/src/TwBar.h	/^    enum EDrawPart          { DRAW_BG=(1<<0), DRAW_CONTENT=(1<<1), DRAW_ALL=DRAW_BG|DRAW_CONTENT };$/;"	g	struct:CTwBar
EKeySpecial	ui/AntTweakBar/include/AntTweakBar.h	/^typedef enum EKeySpecial$/;"	g
EMgrAttribs	ui/AntTweakBar/src/TwMgr.h	/^enum EMgrAttribs$/;"	g
ERetType	ui/AntTweakBar/src/TwMgr.h	/^enum ERetType $/;"	g
ETwGraphAPI	ui/AntTweakBar/include/AntTweakBar.h	/^typedef enum ETwGraphAPI$/;"	g
ETwKeyModifier	ui/AntTweakBar/include/AntTweakBar.h	/^typedef enum ETwKeyModifier$/;"	g
ETwMouseAction	ui/AntTweakBar/include/AntTweakBar.h	/^typedef enum ETwMouseAction$/;"	g
ETwMouseButtonID	ui/AntTweakBar/include/AntTweakBar.h	/^typedef enum ETwMouseButtonID$/;"	g
ETwParamValueType	ui/AntTweakBar/include/AntTweakBar.h	/^typedef enum ETwParamValueType$/;"	g
ETwState	ui/AntTweakBar/src/TwMgr.h	/^typedef enum ETwState$/;"	g
ETwType	ui/AntTweakBar/include/AntTweakBar.h	/^typedef enum ETwType$/;"	g
EValuesWidthFit	ui/AntTweakBar/src/TwBar.h	/^    enum EValuesWidthFit    { VALUES_WIDTH_FIT = -5555 };$/;"	g	struct:CTwBar
EVarAtomAttribs	ui/AntTweakBar/src/TwBar.cpp	/^enum EVarAtomAttribs$/;"	g	file:
EVarAttribs	ui/AntTweakBar/src/TwBar.cpp	/^enum EVarAttribs$/;"	g	file:
EVarGroupAttribs	ui/AntTweakBar/src/TwBar.cpp	/^enum EVarGroupAttribs$/;"	g	file:
EXP_PATH	ui/AntTweakBar/examples/Makefile	/^EXP_PATH	= 'export LD_LIBRARY_PATH=`dirname $$0`\/..\/..\/lib ; $$0.out'$/;"	m
EXP_SH	ui/AntTweakBar/examples/Makefile	/^EXP_SH      = '\\#!\/bin\/sh'$/;"	m
EditInPlaceAcceptVar	ui/AntTweakBar/src/TwBar.cpp	/^bool CTwBar::EditInPlaceAcceptVar(const CTwVarAtom* _Var)$/;"	f	class:CTwBar
EditInPlaceDraw	ui/AntTweakBar/src/TwBar.cpp	/^void CTwBar::EditInPlaceDraw()$/;"	f	class:CTwBar
EditInPlaceEnd	ui/AntTweakBar/src/TwBar.cpp	/^void CTwBar::EditInPlaceEnd(bool _Commit)$/;"	f	class:CTwBar
EditInPlaceEraseSelect	ui/AntTweakBar/src/TwBar.cpp	/^bool CTwBar::EditInPlaceEraseSelect()$/;"	f	class:CTwBar
EditInPlaceGetClipboard	ui/AntTweakBar/src/TwBar.cpp	/^bool CTwBar::EditInPlaceGetClipboard(std::string *_OutString)$/;"	f	class:CTwBar
EditInPlaceIsReadOnly	ui/AntTweakBar/src/TwBar.cpp	/^bool CTwBar::EditInPlaceIsReadOnly()$/;"	f	class:CTwBar
EditInPlaceKeyPressed	ui/AntTweakBar/src/TwBar.cpp	/^bool CTwBar::EditInPlaceKeyPressed(int _Key, int _Modifiers)$/;"	f	class:CTwBar
EditInPlaceMouseMove	ui/AntTweakBar/src/TwBar.cpp	/^bool CTwBar::EditInPlaceMouseMove(int _X, int _Y, bool _Select)$/;"	f	class:CTwBar
EditInPlaceSetClipboard	ui/AntTweakBar/src/TwBar.cpp	/^bool CTwBar::EditInPlaceSetClipboard(const std::string& _String)$/;"	f	class:CTwBar
EditInPlaceStart	ui/AntTweakBar/src/TwBar.cpp	/^void CTwBar::EditInPlaceStart(CTwVarAtom* _Var, int _X, int _Y, int _Width)$/;"	f	class:CTwBar
Empty	ui/AntTweakBar/src/TwMgr.h	/^    bool Empty(int _Margin=0) const { return (W<=_Margin || H<=_Margin); }$/;"	f	struct:CRect
End	ui/AntTweakBar/src/AntPerfTimer.h	/^        LARGE_INTEGER Start, End, Freq;$/;"	m	struct:PerfTimer
End	ui/AntTweakBar/src/AntPerfTimer.h	/^        struct timeval Start, End;$/;"	m	struct:PerfTimer	typeref:struct:PerfTimer::
EndDraw	ui/AntTweakBar/src/TwOpenGLCore.cpp	/^void CTwGraphOpenGLCore::EndDraw()$/;"	f	class:CTwGraphOpenGLCore
EnumProgramIndices	opengl/programs.h	/^  enum EnumProgramIndices {$/;"	g	namespace:program
EnumShape	shapes.h	/^  enum EnumShape {$/;"	g	namespace:shape
ErrorPosition	ui/AntTweakBar/src/TwMgr.cpp	/^static inline std::string ErrorPosition(bool _MultiLine, int _Line, int _Column)$/;"	f	file:
FIXED_COLOR	opengl/programs.h	/^    FIXED_COLOR,$/;"	e	enum:program::EnumProgramIndices
FLOAT_EPS	ui/AntTweakBar/src/TwMgr.cpp	/^const float  FLOAT_EPS     = 1.0e-7f;$/;"	v
FLOAT_EPS_SQ	ui/AntTweakBar/src/TwMgr.cpp	/^const float  FLOAT_EPS_SQ  = 1.0e-14f;$/;"	v
FLOAT_MAX	ui/AntTweakBar/src/TwBar.cpp	/^const float  FLOAT_MAX  = 3.0e+38f;$/;"	v
FLOAT_PI	ui/AntTweakBar/examples/TwGLCoreSDL.c	/^float FLOAT_PI = 3.14159265f;$/;"	v
FLOAT_PI	ui/AntTweakBar/src/TwMgr.cpp	/^const float  FLOAT_PI      = 3.14159265358979323846f;$/;"	v
FLOOR_HPP_	Floor.hpp	3;"	d
FONT0_BM_H	ui/AntTweakBar/src/TwFonts.cpp	/^const int FONT0_BM_H = 84;$/;"	v
FONT0_BM_W	ui/AntTweakBar/src/TwFonts.cpp	/^const int FONT0_BM_W = 211;$/;"	v
FONT1AA_BM_H	ui/AntTweakBar/src/TwFonts.cpp	/^const int FONT1AA_BM_H = 106;$/;"	v
FONT1AA_BM_W	ui/AntTweakBar/src/TwFonts.cpp	/^const int FONT1AA_BM_W = 264;$/;"	v
FONT1_BM_H	ui/AntTweakBar/src/TwFonts.cpp	/^const int FONT1_BM_H = 106;$/;"	v
FONT1_BM_W	ui/AntTweakBar/src/TwFonts.cpp	/^const int FONT1_BM_W = 253;$/;"	v
FONT2AA_BM_H	ui/AntTweakBar/src/TwFonts.cpp	/^const int FONT2AA_BM_H = 120;$/;"	v
FONT2AA_BM_W	ui/AntTweakBar/src/TwFonts.cpp	/^const int FONT2AA_BM_W = 276;$/;"	v
FONTFIXED1_BM_H	ui/AntTweakBar/src/TwFonts.cpp	/^const int FONTFIXED1_BM_H = 112;$/;"	v
FONTFIXED1_BM_W	ui/AntTweakBar/src/TwFonts.cpp	/^const int FONTFIXED1_BM_W = 257;$/;"	v
Find	ui/AntTweakBar/src/TwBar.cpp	/^CTwVar *CTwBar::Find(const char *_Name, CTwVarGroup **_Parent, int *_Index)$/;"	f	class:CTwBar
Find	ui/AntTweakBar/src/TwBar.cpp	/^const CTwVar *CTwBar::Find(const char *_Name, CTwVarGroup **_Parent, int *_Index) const$/;"	f	class:CTwBar
Find	ui/AntTweakBar/src/TwBar.cpp	/^const CTwVar *CTwVarAtom::Find(const char *_Name, CTwVarGroup **_Parent, int *_Index) const$/;"	f	class:CTwVarAtom
Find	ui/AntTweakBar/src/TwBar.cpp	/^const CTwVar *CTwVarGroup::Find(const char *_Name, CTwVarGroup **_Parent, int *_Index) const$/;"	f	class:CTwVarGroup
FindBar	ui/AntTweakBar/src/TwMgr.cpp	/^int CTwMgr::FindBar(const char *_Name) const$/;"	f	class:CTwMgr
FindShortcut	ui/AntTweakBar/src/TwBar.cpp	/^CTwVarAtom *CTwVarGroup::FindShortcut(int _Key, int _Modifiers, bool *_DoIncr)$/;"	f	class:CTwVarGroup
FixVS2010StdStringClientToLib	ui/AntTweakBar/src/TwMgr.cpp	/^static void FixVS2010StdStringClientToLib(void *strPtr)$/;"	f	file:
FixVS2010StdStringLibToClient	ui/AntTweakBar/src/TwMgr.cpp	/^static void FixVS2010StdStringLibToClient(void *strPtr)$/;"	f	file:
FixedColor	bak/programs.cpp	/^  FixedColor::FixedColor(){$/;"	f	class:program::FixedColor
FixedColor	cpp/opengl/programs.cpp	/^  FixedColor::FixedColor(){$/;"	f	class:program::FixedColor
FixedColor	opengl/programs.h	/^  struct FixedColor : public Program {$/;"	s	namespace:program
Floor	Floor.hpp	/^    class Floor$/;"	c	namespace:game
FreeCursors	ui/AntTweakBar/src/TwMgr.cpp	/^void CTwMgr::FreeCursors()$/;"	f	class:CTwMgr
Freq	ui/AntTweakBar/src/AntPerfTimer.h	/^        LARGE_INTEGER Start, End, Freq;$/;"	m	struct:PerfTimer
FromClient	ui/AntTweakBar/src/TwMgr.cpp	/^void CTwMgr::CLibStdString::FromClient(const std::string& clientStr)$/;"	f	class:CTwMgr::CLibStdString
FromLib	ui/AntTweakBar/src/TwMgr.cpp	/^void CTwMgr::CClientStdString::FromLib(const char *libStr)$/;"	f	class:CTwMgr::CClientStdString
G	ui/AntTweakBar/src/TwMgr.h	/^    int                  R, G, B;$/;"	m	struct:CColorExt
GAME_GLCOMMON_H_	opengl/glcommon.h	2;"	d
GLCore	ui/AntTweakBar/src/LoadOGLCore.cpp	/^    namespace GLCore$/;"	n	file:
GLCore	ui/AntTweakBar/src/LoadOGLCore.cpp	/^namespace GLCore { PFNGLGetProcAddress _glGetProcAddress = NULL; }$/;"	n	file:
GLCore	ui/AntTweakBar/src/LoadOGLCore.h	/^namespace GLCore$/;"	n
GLUTkeyboardfun	ui/AntTweakBar/include/AntTweakBar.h	/^typedef void (TW_GLUT_CALL *GLUTkeyboardfun)(unsigned char glutKey, int mouseX, int mouseY);$/;"	t
GLUTmousebuttonfun	ui/AntTweakBar/include/AntTweakBar.h	/^typedef void (TW_GLUT_CALL *GLUTmousebuttonfun)(int glutButton, int glutState, int mouseX, int mouseY);$/;"	t
GLUTmousemotionfun	ui/AntTweakBar/include/AntTweakBar.h	/^typedef void (TW_GLUT_CALL *GLUTmousemotionfun)(int mouseX, int mouseY);$/;"	t
GLUTspecialfun	ui/AntTweakBar/include/AntTweakBar.h	/^typedef void (TW_GLUT_CALL *GLUTspecialfun)(int glutKey, int mouseX, int mouseY);$/;"	t
GLX_GLXEXT_LEGACY	ui/AntTweakBar/examples/TwGLCoreSDL.c	58;"	d	file:
GLX_GLXEXT_LEGACY	ui/AntTweakBar/src/TwPrecomp.h	50;"	d
GL_ACTIVE_TEXTURE	ui/AntTweakBar/src/LoadOGLCore.h	393;"	d
GL_ARRAY_BUFFER	ui/AntTweakBar/examples/TwGLCoreSDL.c	110;"	d	file:
GL_ARRAY_BUFFER	ui/AntTweakBar/src/LoadOGLCore.h	375;"	d
GL_BGRA	ui/AntTweakBar/src/LoadOGLCore.h	399;"	d
GL_CLAMP_TO_EDGE	ui/AntTweakBar/src/LoadOGLCore.h	363;"	d
GL_COMPILE_STATUS	ui/AntTweakBar/src/LoadOGLCore.h	366;"	d
GL_CURRENT_PROGRAM	ui/AntTweakBar/src/LoadOGLCore.h	390;"	d
GL_DYNAMIC_DRAW	ui/AntTweakBar/src/LoadOGLCore.h	378;"	d
GL_FRAGMENT_SHADER	ui/AntTweakBar/examples/TwGLCoreSDL.c	119;"	d	file:
GL_FRAGMENT_SHADER	ui/AntTweakBar/src/LoadOGLCore.h	384;"	d
GL_INFO_LOG_LENGTH	ui/AntTweakBar/src/LoadOGLCore.h	369;"	d
GL_LINK_STATUS	ui/AntTweakBar/src/LoadOGLCore.h	372;"	d
GL_STATIC_DRAW	ui/AntTweakBar/examples/TwGLCoreSDL.c	113;"	d	file:
GL_TEXTURE0	ui/AntTweakBar/src/LoadOGLCore.h	396;"	d
GL_VERTEX_ARRAY_BINDING	ui/AntTweakBar/src/LoadOGLCore.h	387;"	d
GL_VERTEX_SHADER	ui/AntTweakBar/examples/TwGLCoreSDL.c	116;"	d	file:
GL_VERTEX_SHADER	ui/AntTweakBar/src/LoadOGLCore.h	381;"	d
GLchar	ui/AntTweakBar/src/LoadOGLCore.h	/^typedef char GLchar;$/;"	t
GLintptr	ui/AntTweakBar/src/LoadOGLCore.h	/^    typedef ptrdiff_t GLintptr;$/;"	t
GLsizeiptr	ui/AntTweakBar/src/LoadOGLCore.h	/^    typedef ptrdiff_t GLsizeiptr;$/;"	t
GZIP	ui/AntTweakBar/src/Makefile	/^GZIP     	= gzip -9f$/;"	m
GameScreen	bak/GameScreen.cpp	/^GameScreen::GameScreen(){$/;"	f	class:GameScreen
GameScreen	cpp/screens/GameScreen.cpp	/^GameScreen::GameScreen(){$/;"	f	class:GameScreen
GameScreen	screens/GameScreen.h	/^struct GameScreen : public Screen {$/;"	s
GameScreen	tmo/GameScreen.cpp	/^GameScreen::GameScreen(){$/;"	f	class:GameScreen
GetAttrib	ui/AntTweakBar/src/TwBar.cpp	/^ERetType CTwBar::GetAttrib(int _AttribID, std::vector<double>& outDoubles, std::ostringstream& outString) const$/;"	f	class:CTwBar
GetAttrib	ui/AntTweakBar/src/TwBar.cpp	/^ERetType CTwVar::GetAttrib(int _AttribID, TwBar * \/*_Bar*\/, CTwVarGroup * _VarParent, int \/*_VarIndex*\/, std::vector<double>& outDoubles, std::ostringstream& outString) const$/;"	f	class:CTwVar
GetAttrib	ui/AntTweakBar/src/TwBar.cpp	/^ERetType CTwVarAtom::GetAttrib(int _AttribID, TwBar *_Bar, CTwVarGroup *_VarParent, int _VarIndex, std::vector<double>& outDoubles, std::ostringstream& outString) const$/;"	f	class:CTwVarAtom
GetAttrib	ui/AntTweakBar/src/TwBar.cpp	/^ERetType CTwVarGroup::GetAttrib(int _AttribID, TwBar *_Bar, struct CTwVarGroup *_VarParent, int _VarIndex, std::vector<double>& outDoubles, std::ostringstream& outString) const$/;"	f	class:CTwVarGroup
GetAttrib	ui/AntTweakBar/src/TwMgr.cpp	/^ERetType CTwMgr::GetAttrib(int _AttribID, std::vector<double>& outDoubles, std::ostringstream& outString) const$/;"	f	class:CTwMgr
GetBarVarFromString	ui/AntTweakBar/src/TwMgr.cpp	/^int GetBarVarFromString(CTwBar **_Bar, CTwVar **_Var, CTwVarGroup **_VarParent, int *_VarIndex, const char *_Str)$/;"	f
GetCB	ui/AntTweakBar/src/TwMgr.cpp	/^void ANT_CALL CTwMgr::CCDStdString::GetCB(void *_Value, void *_ClientData)$/;"	f	class:CTwMgr::CCDStdString
GetCB	ui/AntTweakBar/src/TwMgr.cpp	/^void ANT_CALL CTwMgr::CMemberProxy::GetCB(void *_Value, void *_ClientData)$/;"	f	class:CTwMgr::CMemberProxy
GetDataSize	ui/AntTweakBar/src/TwBar.cpp	/^size_t CTwVar::GetDataSize(TwType _Type)$/;"	f	class:CTwVar
GetLastError	ui/AntTweakBar/src/TwMgr.cpp	/^const char *CTwMgr::GetLastError()$/;"	f	class:CTwMgr
GetTime	ui/AntTweakBar/src/AntPerfTimer.h	/^        inline double GetTime()     { gettimeofday(&End,&TZ); $/;"	f	struct:PerfTimer
GetTime	ui/AntTweakBar/src/AntPerfTimer.h	/^        inline double GetTime()     { if( QueryPerformanceCounter(&End) ) return ((double)End.QuadPart - (double)Start.QuadPart)\/((double)Freq.QuadPart); else return 0; }$/;"	f	struct:PerfTimer
Gloss	ui/AntTweakBar/src/MiniSDL12.h	/^    Uint8  Gloss;$/;"	m	struct:SDL_PixelFormat
Gloss	ui/AntTweakBar/src/MiniSDL13.h	/^    Uint8  Gloss;$/;"	m	struct:SDL_PixelFormat
Gmask	ui/AntTweakBar/src/MiniSDL12.h	/^    Uint32 Gmask;$/;"	m	struct:SDL_PixelFormat
Gmask	ui/AntTweakBar/src/MiniSDL13.h	/^    Uint32 Gmask;$/;"	m	struct:SDL_PixelFormat
GravityAccel	cpp/Player.cpp	/^constexpr float GravityAccel = -9.0;$/;"	v
Gshift	ui/AntTweakBar/src/MiniSDL12.h	/^    Uint8  Gshift;$/;"	m	struct:SDL_PixelFormat
Gshift	ui/AntTweakBar/src/MiniSDL13.h	/^    Uint8  Gshift;$/;"	m	struct:SDL_PixelFormat
H	ui/AntTweakBar/src/TwMgr.h	/^    int                  H, L, S;$/;"	m	struct:CColorExt
H	ui/AntTweakBar/src/TwMgr.h	/^    int X, Y, W, H;$/;"	m	struct:CRect
HLS2RGB	ui/AntTweakBar/src/TwMgr.cpp	/^void CColorExt::HLS2RGB()$/;"	f	class:CColorExt
HasAttrib	ui/AntTweakBar/src/TwBar.cpp	/^int CTwBar::HasAttrib(const char *_Attrib, bool *_HasValue) const$/;"	f	class:CTwBar
HasAttrib	ui/AntTweakBar/src/TwBar.cpp	/^int CTwVar::HasAttrib(const char *_Attrib, bool *_HasValue) const$/;"	f	class:CTwVar
HasAttrib	ui/AntTweakBar/src/TwBar.cpp	/^int CTwVarAtom::HasAttrib(const char *_Attrib, bool *_HasValue) const$/;"	f	class:CTwVarAtom
HasAttrib	ui/AntTweakBar/src/TwBar.cpp	/^int CTwVarGroup::HasAttrib(const char *_Attrib, bool *_HasValue) const$/;"	f	class:CTwVarGroup
HasAttrib	ui/AntTweakBar/src/TwMgr.cpp	/^int CTwMgr::HasAttrib(const char *_Attrib, bool *_HasValue) const$/;"	f	class:CTwMgr
HaveFocus	ui/AntTweakBar/src/TwBar.h	/^    void                    HaveFocus(bool _Focus) { m_DrawHandles = _Focus; }           \/\/ used by PopupCallback$/;"	f	struct:CTwBar
Hide	ui/AntTweakBar/src/TwMgr.cpp	/^void CTwMgr::Hide(TwBar *_Bar)$/;"	f	class:CTwMgr
IDC_CURSOR1	ui/AntTweakBar/src/resource.h	5;"	d
IDC_CURSOR10	ui/AntTweakBar/src/resource.h	14;"	d
IDC_CURSOR11	ui/AntTweakBar/src/resource.h	15;"	d
IDC_CURSOR12	ui/AntTweakBar/src/resource.h	16;"	d
IDC_CURSOR13	ui/AntTweakBar/src/resource.h	17;"	d
IDC_CURSOR14	ui/AntTweakBar/src/resource.h	18;"	d
IDC_CURSOR2	ui/AntTweakBar/src/resource.h	6;"	d
IDC_CURSOR3	ui/AntTweakBar/src/resource.h	7;"	d
IDC_CURSOR4	ui/AntTweakBar/src/resource.h	8;"	d
IDC_CURSOR5	ui/AntTweakBar/src/resource.h	9;"	d
IDC_CURSOR6	ui/AntTweakBar/src/resource.h	10;"	d
IDC_CURSOR7	ui/AntTweakBar/src/resource.h	11;"	d
IDC_CURSOR8	ui/AntTweakBar/src/resource.h	12;"	d
IDC_CURSOR9	ui/AntTweakBar/src/resource.h	13;"	d
INCPATH	ui/AntTweakBar/examples/Makefile	/^INCPATH  	= -I..\/include $(shell pkg-config --libs sdl2)$/;"	m
INCPATH	ui/AntTweakBar/src/Makefile	/^INCPATH  	= -I..\/include$/;"	m
INDXBUF	cpp/Cube.cpp	/^    INDXBUF$/;"	e	enum:__anon2	file:
ITwGraph	ui/AntTweakBar/src/TwGraph.h	/^class ITwGraph$/;"	c
IgnoreXErrors	ui/AntTweakBar/src/TwMgr.cpp	/^static void IgnoreXErrors()$/;"	f	file:
InactiveErrorHandler	ui/AntTweakBar/src/TwMgr.cpp	/^static int InactiveErrorHandler(Display *display, XErrorEvent *err)$/;"	f	file:
IncrBtnWidth	ui/AntTweakBar/src/TwBar.cpp	/^static inline int IncrBtnWidth(int _CharHeight) $/;"	f	file:
Increment	ui/AntTweakBar/src/TwBar.cpp	/^void CTwVarAtom::Increment(int _Step)$/;"	f	class:CTwVarAtom
Init	ui/AntTweakBar/src/TwOpenGLCore.cpp	/^int CTwGraphOpenGLCore::Init()$/;"	f	class:CTwGraphOpenGLCore
InitColor32CB	ui/AntTweakBar/src/TwMgr.cpp	/^void ANT_CALL CColorExt::InitColor32CB(void *_ExtValue, void *_ClientData)$/;"	f	class:CColorExt
InitColor3FCB	ui/AntTweakBar/src/TwMgr.cpp	/^void ANT_CALL CColorExt::InitColor3FCB(void *_ExtValue, void *_ClientData)$/;"	f	class:CColorExt
InitColor4FCB	ui/AntTweakBar/src/TwMgr.cpp	/^void ANT_CALL CColorExt::InitColor4FCB(void *_ExtValue, void *_ClientData)$/;"	f	class:CColorExt
InitDir3DCB	ui/AntTweakBar/src/TwMgr.cpp	/^void ANT_CALL CQuaternionExt::InitDir3DCB(void *_ExtValue, void *_ClientData)$/;"	f	class:CQuaternionExt
InitDir3FCB	ui/AntTweakBar/src/TwMgr.cpp	/^void ANT_CALL CQuaternionExt::InitDir3FCB(void *_ExtValue, void *_ClientData)$/;"	f	class:CQuaternionExt
InitQuat4DCB	ui/AntTweakBar/src/TwMgr.cpp	/^void ANT_CALL CQuaternionExt::InitQuat4DCB(void *_ExtValue, void *_ClientData)$/;"	f	class:CQuaternionExt
InitQuat4FCB	ui/AntTweakBar/src/TwMgr.cpp	/^void ANT_CALL CQuaternionExt::InitQuat4FCB(void *_ExtValue, void *_ClientData)$/;"	f	class:CQuaternionExt
InitRender	ui/AntTweakBar/examples/TwGLCoreSDL.c	/^void InitRender()$/;"	f
InsertUsedStructs	ui/AntTweakBar/src/TwMgr.cpp	/^static void InsertUsedStructs(StructSet& _Set, const CTwVarGroup *_Grp)$/;"	f	file:
IsCSStringType	ui/AntTweakBar/src/TwBar.cpp	/^bool IsCSStringType(int _Type)$/;"	f
IsCustom	ui/AntTweakBar/src/TwBar.h	/^    virtual bool            IsCustom() const { return IsCustomType(m_Type); }$/;"	f	struct:CTwVarAtom
IsCustom	ui/AntTweakBar/src/TwBar.h	/^    virtual bool            IsCustom() const { return false; }$/;"	f	struct:CTwVar
IsCustomType	ui/AntTweakBar/src/TwBar.cpp	/^bool IsCustomType(int _Type)$/;"	f
IsDragging	ui/AntTweakBar/src/TwBar.h	/^    bool                    IsDragging() const  { return m_MouseDrag; }$/;"	f	struct:CTwBar
IsDrawing	ui/AntTweakBar/src/TwOpenGLCore.cpp	/^bool CTwGraphOpenGLCore::IsDrawing()$/;"	f	class:CTwGraphOpenGLCore
IsEnumType	ui/AntTweakBar/src/TwBar.cpp	/^bool IsEnumType(int _Type)$/;"	f
IsGroup	ui/AntTweakBar/src/TwBar.h	/^    virtual bool            IsGroup() const { return false; }$/;"	f	struct:CTwVarAtom
IsGroup	ui/AntTweakBar/src/TwBar.h	/^    virtual bool            IsGroup() const { return true; }$/;"	f	struct:CTwVarGroup
IsMinimized	ui/AntTweakBar/src/TwBar.h	/^    bool                    IsMinimized() const { return m_IsMinimized; }$/;"	f	struct:CTwBar
IsReadOnly	ui/AntTweakBar/src/TwBar.h	/^    virtual bool            IsReadOnly() const { for(size_t i=0; i<m_Vars.size(); ++i) if(m_Vars[i] && !m_Vars[i]->IsReadOnly()) return false; return true; }$/;"	f	struct:CTwVarGroup
IsReadOnly	ui/AntTweakBar/src/TwBar.h	/^    virtual bool            IsReadOnly() const { if( m_Type!=TW_TYPE_BUTTON && m_SetCallback==NULL && m_Ptr==NULL ) return true; else return m_ReadOnly; }$/;"	f	struct:CTwVarAtom
JumpSpeed	cpp/Player.cpp	/^constexpr float JumpSpeed = 5.0;$/;"	v
KMOD_ALT	ui/AntTweakBar/src/MiniSDL12.h	93;"	d
KMOD_ALT	ui/AntTweakBar/src/MiniSDL13.h	124;"	d
KMOD_CAPS	ui/AntTweakBar/src/MiniSDL12.h	/^    KMOD_CAPS       = 0x2000,$/;"	e	enum:__anon9
KMOD_CAPS	ui/AntTweakBar/src/MiniSDL13.h	/^    KMOD_CAPS       = 0x2000,$/;"	e	enum:__anon6
KMOD_CTRL	ui/AntTweakBar/src/MiniSDL12.h	91;"	d
KMOD_CTRL	ui/AntTweakBar/src/MiniSDL13.h	122;"	d
KMOD_GUI	ui/AntTweakBar/src/MiniSDL13.h	125;"	d
KMOD_LALT	ui/AntTweakBar/src/MiniSDL12.h	/^    KMOD_LALT       = 0x0100,$/;"	e	enum:__anon9
KMOD_LALT	ui/AntTweakBar/src/MiniSDL13.h	/^    KMOD_LALT       = 0x0100,$/;"	e	enum:__anon6
KMOD_LCTRL	ui/AntTweakBar/src/MiniSDL12.h	/^    KMOD_LCTRL      = 0x0040,$/;"	e	enum:__anon9
KMOD_LCTRL	ui/AntTweakBar/src/MiniSDL13.h	/^    KMOD_LCTRL      = 0x0040,$/;"	e	enum:__anon6
KMOD_LGUI	ui/AntTweakBar/src/MiniSDL13.h	/^    KMOD_LGUI       = 0x0400,$/;"	e	enum:__anon6
KMOD_LMETA	ui/AntTweakBar/src/MiniSDL12.h	/^    KMOD_LMETA      = 0x0400,$/;"	e	enum:__anon9
KMOD_LSHIFT	ui/AntTweakBar/src/MiniSDL12.h	/^    KMOD_LSHIFT     = 0x0001,$/;"	e	enum:__anon9
KMOD_LSHIFT	ui/AntTweakBar/src/MiniSDL13.h	/^    KMOD_LSHIFT     = 0x0001,$/;"	e	enum:__anon6
KMOD_META	ui/AntTweakBar/src/MiniSDL12.h	94;"	d
KMOD_MODE	ui/AntTweakBar/src/MiniSDL12.h	/^    KMOD_MODE       = 0x4000,$/;"	e	enum:__anon9
KMOD_MODE	ui/AntTweakBar/src/MiniSDL13.h	/^    KMOD_MODE       = 0x4000,$/;"	e	enum:__anon6
KMOD_NONE	ui/AntTweakBar/src/MiniSDL12.h	/^    KMOD_NONE       = 0x0000,$/;"	e	enum:__anon9
KMOD_NONE	ui/AntTweakBar/src/MiniSDL13.h	/^    KMOD_NONE       = 0x0000,$/;"	e	enum:__anon6
KMOD_NUM	ui/AntTweakBar/src/MiniSDL12.h	/^    KMOD_NUM        = 0x1000,$/;"	e	enum:__anon9
KMOD_NUM	ui/AntTweakBar/src/MiniSDL13.h	/^    KMOD_NUM        = 0x1000,$/;"	e	enum:__anon6
KMOD_RALT	ui/AntTweakBar/src/MiniSDL12.h	/^    KMOD_RALT       = 0x0200,$/;"	e	enum:__anon9
KMOD_RALT	ui/AntTweakBar/src/MiniSDL13.h	/^    KMOD_RALT       = 0x0200,$/;"	e	enum:__anon6
KMOD_RCTRL	ui/AntTweakBar/src/MiniSDL12.h	/^    KMOD_RCTRL      = 0x0080,$/;"	e	enum:__anon9
KMOD_RCTRL	ui/AntTweakBar/src/MiniSDL13.h	/^    KMOD_RCTRL      = 0x0080,$/;"	e	enum:__anon6
KMOD_RESERVED	ui/AntTweakBar/src/MiniSDL12.h	/^    KMOD_RESERVED   = 0x8000$/;"	e	enum:__anon9
KMOD_RESERVED	ui/AntTweakBar/src/MiniSDL13.h	/^    KMOD_RESERVED   = 0x8000$/;"	e	enum:__anon6
KMOD_RGUI	ui/AntTweakBar/src/MiniSDL13.h	/^    KMOD_RGUI       = 0x0800,$/;"	e	enum:__anon6
KMOD_RMETA	ui/AntTweakBar/src/MiniSDL12.h	/^    KMOD_RMETA      = 0x0800,$/;"	e	enum:__anon9
KMOD_RSHIFT	ui/AntTweakBar/src/MiniSDL12.h	/^    KMOD_RSHIFT     = 0x0002,$/;"	e	enum:__anon9
KMOD_RSHIFT	ui/AntTweakBar/src/MiniSDL13.h	/^    KMOD_RSHIFT     = 0x0002,$/;"	e	enum:__anon6
KMOD_SHIFT	ui/AntTweakBar/src/MiniSDL12.h	92;"	d
KMOD_SHIFT	ui/AntTweakBar/src/MiniSDL13.h	123;"	d
KeyPressed	ui/AntTweakBar/src/TwBar.cpp	/^bool CTwBar::KeyPressed(int _Key, int _Modifiers)$/;"	f	class:CTwBar
KeyPressed	ui/AntTweakBar/src/TwMgr.cpp	/^static int KeyPressed(int _Key, int _Modifiers, bool _TestOnly)$/;"	f	file:
KeyTest	ui/AntTweakBar/src/TwBar.cpp	/^bool CTwBar::KeyTest(int _Key, int _Modifiers)$/;"	f	class:CTwBar
L	ui/AntTweakBar/src/TwMgr.h	/^    int                  H, L, S;$/;"	m	struct:CColorExt
LBB	cpp/Cube.cpp	/^	LBB, LTB,$/;"	e	enum:__anon3	file:
LBF	cpp/Cube.cpp	/^	LBF, LTF$/;"	e	enum:__anon3	file:
LFLAGS	ui/AntTweakBar/examples/Makefile	/^LFLAGS		= -L..\/lib$/;"	m
LFLAGS	ui/AntTweakBar/src/Makefile	/^LFLAGS		= $/;"	m
LIBS	Makefile	/^LIBS =$/;"	m
LIBS	ui/AntTweakBar/examples/Makefile	/^LIBS     	= ..\/lib\/libAntTweakBar.a $(shell pkg-config --cflags sdl2) -lGL -lX11$/;"	m
LIBS	ui/AntTweakBar/src/Makefile	/^LIBS 		=$/;"	m
LIGHTEN_TEXTURED_FIXED_COLOR	opengl/programs.h	/^    LIGHTEN_TEXTURED_FIXED_COLOR$/;"	e	enum:program::EnumProgramIndices
LINK	ui/AntTweakBar/src/Makefile	/^LINK     	= gcc$/;"	m
LOCAL_C_INCLUDES	Android.mk	/^LOCAL_C_INCLUDES := $(LOCAL_PATH)\/$(SDL_PATH)\/include $(LOCAL_PATH)\/..\/SDL2_image$/;"	m
LOCAL_LDLIBS	Android.mk	/^LOCAL_LDLIBS := -lGLESv1_CM -lGLESv2 -llog$/;"	m
LOCAL_MODULE	Android.mk	/^LOCAL_MODULE := main$/;"	m
LOCAL_MODULE	Android_static.mk	/^LOCAL_MODULE := main$/;"	m
LOCAL_PATH	Android.mk	/^LOCAL_PATH := $(call my-dir)$/;"	m
LOCAL_PATH	Android_static.mk	/^LOCAL_PATH := $(call my-dir)$/;"	m
LOCAL_SHARED_LIBRARIES	Android.mk	/^LOCAL_SHARED_LIBRARIES := SDL2 SDL2_image$/;"	m
LOCAL_SRC_FILES	Android.mk	/^LOCAL_SRC_FILES := $(SDL_PATH)\/src\/main\/android\/SDL_android_main.c \\$/;"	m
LOCAL_SRC_FILES	Android_static.mk	/^LOCAL_SRC_FILES := YourSourceHere.c$/;"	m
LOCAL_STATIC_LIBRARIES	Android_static.mk	/^LOCAL_STATIC_LIBRARIES := SDL2_static$/;"	m
LTB	cpp/Cube.cpp	/^	LBB, LTB,$/;"	e	enum:__anon3	file:
LTF	cpp/Cube.cpp	/^	LBF, LTF$/;"	e	enum:__anon3	file:
Label	ui/AntTweakBar/include/AntTweakBar.h	/^    const char *  Label;$/;"	m	struct:CTwEnumVal
LightenTexturedFixedColor	bak/programs.cpp	/^  LightenTexturedFixedColor::LightenTexturedFixedColor(){$/;"	f	class:program::LightenTexturedFixedColor
LightenTexturedFixedColor	cpp/opengl/programs.cpp	/^  LightenTexturedFixedColor::LightenTexturedFixedColor(){$/;"	f	class:program::LightenTexturedFixedColor
LightenTexturedFixedColor	opengl/programs.h	/^  struct LightenTexturedFixedColor : public DummyLighten , public TexturedFixedColor {$/;"	s	namespace:program
LightenTexturedShape	shapes.h	/^struct LightenTexturedShape : TexturedShape {$/;"	s
LineInHier	ui/AntTweakBar/src/TwBar.cpp	/^int CTwBar::LineInHier(CTwVarGroup *_Root, CTwVar *_Var)$/;"	f	class:CTwBar
LinkProgram	ui/AntTweakBar/src/TwOpenGLCore.cpp	/^static GLuint LinkProgram(GLuint program)$/;"	f	file:
ListLabels	ui/AntTweakBar/src/TwBar.cpp	/^void CTwBar::ListLabels(vector<string>& _Labels, vector<color32>& _Colors, vector<color32>& _BgColors, bool *_HasBgColors, const CTexFont *_Font, int _AtomWidthMax, int _GroupWidthMax)$/;"	f	class:CTwBar
ListValues	ui/AntTweakBar/src/TwBar.cpp	/^void CTwBar::ListValues(vector<string>& _Values, vector<color32>& _Colors, vector<color32>& _BgColors, const CTexFont *_Font, int _WidthMax)$/;"	f	class:CTwBar
LoadGLCoreFunctions	ui/AntTweakBar/examples/TwGLCoreSDL.c	/^int LoadGLCoreFunctions()$/;"	f
LoadOpenGLCore	ui/AntTweakBar/src/LoadOGLCore.cpp	/^    int LoadOpenGLCore()$/;"	f
MGR_BUTTON_ALIGN	ui/AntTweakBar/src/TwMgr.h	/^    MGR_BUTTON_ALIGN,$/;"	e	enum:EMgrAttribs
MGR_COLOR_SCHEME	ui/AntTweakBar/src/TwMgr.h	/^    MGR_COLOR_SCHEME,$/;"	e	enum:EMgrAttribs
MGR_CONTAINED	ui/AntTweakBar/src/TwMgr.h	/^    MGR_CONTAINED,$/;"	e	enum:EMgrAttribs
MGR_FONT_RESIZABLE	ui/AntTweakBar/src/TwMgr.h	/^    MGR_FONT_RESIZABLE,$/;"	e	enum:EMgrAttribs
MGR_FONT_SIZE	ui/AntTweakBar/src/TwMgr.h	/^    MGR_FONT_SIZE,$/;"	e	enum:EMgrAttribs
MGR_FONT_STYLE	ui/AntTweakBar/src/TwMgr.h	/^    MGR_FONT_STYLE,$/;"	e	enum:EMgrAttribs
MGR_HELP	ui/AntTweakBar/src/TwMgr.h	/^    MGR_HELP = 1,$/;"	e	enum:EMgrAttribs
MGR_ICON_ALIGN	ui/AntTweakBar/src/TwMgr.h	/^    MGR_ICON_ALIGN,$/;"	e	enum:EMgrAttribs
MGR_ICON_MARGIN	ui/AntTweakBar/src/TwMgr.h	/^    MGR_ICON_MARGIN,$/;"	e	enum:EMgrAttribs
MGR_ICON_POS	ui/AntTweakBar/src/TwMgr.h	/^    MGR_ICON_POS,$/;"	e	enum:EMgrAttribs
MGR_OVERLAP	ui/AntTweakBar/src/TwMgr.h	/^    MGR_OVERLAP$/;"	e	enum:EMgrAttribs
MINI_SDL12_INCLUDED	ui/AntTweakBar/src/MiniSDL12.h	19;"	d
MINI_SDL_INCLUDED	ui/AntTweakBar/src/MiniSDL13.h	19;"	d
MOVE	ui/AntTweakBar/src/Makefile	/^MOVE     	= mv$/;"	m
M_PI	ui/AntTweakBar/src/TwBar.cpp	43;"	d	file:
Maximize	ui/AntTweakBar/src/TwMgr.cpp	/^void CTwMgr::Maximize(TwBar *_Bar)$/;"	f	class:CTwMgr
MinMaxStepToDouble	ui/AntTweakBar/src/TwBar.cpp	/^void CTwVarAtom::MinMaxStepToDouble(double *_Min, double *_Max, double *_Step) const$/;"	f	class:CTwVarAtom
Minimize	ui/AntTweakBar/src/TwMgr.cpp	/^void CTwMgr::Minimize(TwBar *_Bar)$/;"	f	class:CTwMgr
MouseButton	ui/AntTweakBar/src/TwBar.cpp	/^bool CTwBar::MouseButton(ETwMouseButtonID _Button, bool _Pressed, int _X, int _Y)$/;"	f	class:CTwBar
MouseButtonCB	ui/AntTweakBar/src/TwMgr.cpp	/^bool CQuaternionExt::MouseButtonCB(TwMouseButtonID button, bool pressed, int mouseX, int mouseY, int w, int h, void *structExtValue, void *clientData, TwBar *bar, CTwVarGroup *varGrp)$/;"	f	class:CQuaternionExt
MouseLeaveCB	ui/AntTweakBar/src/TwMgr.cpp	/^void CQuaternionExt::MouseLeaveCB(void *structExtValue, void *clientData, TwBar *bar)$/;"	f	class:CQuaternionExt
MouseMotion	ui/AntTweakBar/src/TwBar.cpp	/^bool CTwBar::MouseMotion(int _X, int _Y)$/;"	f	class:CTwBar
MouseMotionCB	ui/AntTweakBar/src/TwMgr.cpp	/^bool CQuaternionExt::MouseMotionCB(int mouseX, int mouseY, int w, int h, void *structExtValue, void *clientData, TwBar *bar, CTwVarGroup *varGrp)$/;"	f	class:CQuaternionExt
MouseWheel	ui/AntTweakBar/src/TwBar.cpp	/^bool CTwBar::MouseWheel(int _Pos, int _PrevPos, int _MouseX, int _MouseY)$/;"	f	class:CTwBar
NB_ROTO_CURSORS	ui/AntTweakBar/src/TwMgr.h	/^const int NB_ROTO_CURSORS = 12;$/;"	v
NO_STDERR	ui/AntTweakBar/examples/Makefile	/^NO_STDERR	= 2> \/dev\/null$/;"	m
NO_STDERR	ui/AntTweakBar/src/Makefile	/^NO_STDERR	= 2> \/dev\/null$/;"	m
Name	ui/AntTweakBar/include/AntTweakBar.h	/^    const char *  Name;$/;"	m	struct:CTwStructMember
NewTextObj	ui/AntTweakBar/src/TwOpenGLCore.cpp	/^void *CTwGraphOpenGLCore::NewTextObj()$/;"	f	class:CTwGraphOpenGLCore
NextPow2	ui/AntTweakBar/src/TwFonts.cpp	/^static int NextPow2(int _n)$/;"	f	file:
NotUpToDate	ui/AntTweakBar/src/TwBar.cpp	/^void CTwBar::NotUpToDate()$/;"	f	class:CTwBar
OBJS	Makefile	/^OBJS = $(SRCS:.cpp=.o)$/;"	m
OBJS	ui/AntTweakBar/src/Makefile	/^OBJS 		= $(OBJS_1:.cpp=.o)$/;"	m
OBJS_1	ui/AntTweakBar/src/Makefile	/^OBJS_1 		= $(SRC_FILES:.c=.o)$/;"	m
OUTLINE_CIRCLE	shapes.h	/^    OUTLINE_CIRCLE$/;"	e	enum:shape::EnumShape
OUT_DIR	ui/AntTweakBar/examples/Makefile	/^OUT_DIR		= bin64$/;"	m
OUT_DIR	ui/AntTweakBar/src/Makefile	/^OUT_DIR		= ..\/lib$/;"	m
Offset	ui/AntTweakBar/include/AntTweakBar.h	/^    size_t        Offset;$/;"	m	struct:CTwStructMember
OpenHier	ui/AntTweakBar/src/TwBar.cpp	/^bool CTwBar::OpenHier(CTwVarGroup *_Root, CTwVar *_Var)$/;"	f	class:CTwBar
PERF	ui/AntTweakBar/src/TwBar.cpp	28;"	d	file:
PERF	ui/AntTweakBar/src/TwBar.cpp	29;"	d	file:
PERF	ui/AntTweakBar/src/TwMgr.h	29;"	d
PERF	ui/AntTweakBar/src/TwMgr.h	31;"	d
PFNGLAttachShader	ui/AntTweakBar/examples/TwGLCoreSDL.c	/^typedef void (APIENTRY *PFNGLAttachShader)(GLuint program, GLuint shader);$/;"	t	file:
PFNGLBindBuffer	ui/AntTweakBar/examples/TwGLCoreSDL.c	/^typedef void (APIENTRY *PFNGLBindBuffer)(GLenum target, GLuint buffer);$/;"	t	file:
PFNGLBindVertexArray	ui/AntTweakBar/examples/TwGLCoreSDL.c	/^typedef void (APIENTRY *PFNGLBindVertexArray)(GLuint array);$/;"	t	file:
PFNGLBufferData	ui/AntTweakBar/examples/TwGLCoreSDL.c	/^typedef void (APIENTRY *PFNGLBufferData)(GLenum target, ptrdiff_t size, const GLvoid *data, GLenum usage);$/;"	t	file:
PFNGLCompileShader	ui/AntTweakBar/examples/TwGLCoreSDL.c	/^typedef void (APIENTRY *PFNGLCompileShader)(GLuint shader);$/;"	t	file:
PFNGLCreateProgram	ui/AntTweakBar/examples/TwGLCoreSDL.c	/^typedef GLuint (APIENTRY *PFNGLCreateProgram)(void);$/;"	t	file:
PFNGLCreateShader	ui/AntTweakBar/examples/TwGLCoreSDL.c	/^typedef GLuint (APIENTRY *PFNGLCreateShader)(GLenum type);$/;"	t	file:
PFNGLDeleteBuffers	ui/AntTweakBar/examples/TwGLCoreSDL.c	/^typedef void (APIENTRY *PFNGLDeleteBuffers)(GLsizei n, const GLuint *buffers);$/;"	t	file:
PFNGLDeleteProgram	ui/AntTweakBar/examples/TwGLCoreSDL.c	/^typedef void (APIENTRY *PFNGLDeleteProgram)(GLuint program);$/;"	t	file:
PFNGLDeleteShader	ui/AntTweakBar/examples/TwGLCoreSDL.c	/^typedef void (APIENTRY *PFNGLDeleteShader)(GLuint shader);$/;"	t	file:
PFNGLDeleteVertexArrays	ui/AntTweakBar/examples/TwGLCoreSDL.c	/^typedef void (APIENTRY *PFNGLDeleteVertexArrays)(GLsizei n, const GLuint *arrays);$/;"	t	file:
PFNGLEnableVertexAttribArray	ui/AntTweakBar/examples/TwGLCoreSDL.c	/^typedef void (APIENTRY *PFNGLEnableVertexAttribArray)(GLuint index);$/;"	t	file:
PFNGLGenBuffers	ui/AntTweakBar/examples/TwGLCoreSDL.c	/^typedef void (APIENTRY *PFNGLGenBuffers)(GLsizei n, GLuint *buffers);$/;"	t	file:
PFNGLGenVertexArrays	ui/AntTweakBar/examples/TwGLCoreSDL.c	/^typedef void (APIENTRY *PFNGLGenVertexArrays)(GLsizei n, GLuint *arrays);$/;"	t	file:
PFNGLGetAttribLocation	ui/AntTweakBar/examples/TwGLCoreSDL.c	/^typedef GLint (APIENTRY *PFNGLGetAttribLocation)(GLuint program, const char *name);$/;"	t	file:
PFNGLGetProcAddress	ui/AntTweakBar/src/LoadOGLCore.h	/^    extern "C" { typedef PFNOpenGL (APIENTRY *PFNGLGetProcAddress)(const char *); }$/;"	t
PFNGLGetUniformLocation	ui/AntTweakBar/examples/TwGLCoreSDL.c	/^typedef GLint (APIENTRY *PFNGLGetUniformLocation)(GLuint program, const char *name);$/;"	t	file:
PFNGLLinkProgram	ui/AntTweakBar/examples/TwGLCoreSDL.c	/^typedef void (APIENTRY *PFNGLLinkProgram)(GLuint program);$/;"	t	file:
PFNGLShaderSource	ui/AntTweakBar/examples/TwGLCoreSDL.c	/^typedef void (APIENTRY *PFNGLShaderSource)(GLuint shader, GLsizei count, const char* *str, const GLint *length);$/;"	t	file:
PFNGLUniform1f	ui/AntTweakBar/examples/TwGLCoreSDL.c	/^typedef void (APIENTRY *PFNGLUniform1f)(GLint location, GLfloat v0);$/;"	t	file:
PFNGLUniform3f	ui/AntTweakBar/examples/TwGLCoreSDL.c	/^typedef void (APIENTRY *PFNGLUniform3f)(GLint location, GLfloat v0, GLfloat v1, GLfloat v2);$/;"	t	file:
PFNGLUseProgram	ui/AntTweakBar/examples/TwGLCoreSDL.c	/^typedef void (APIENTRY *PFNGLUseProgram)(GLuint program);$/;"	t	file:
PFNGLVertexAttribPointer	ui/AntTweakBar/examples/TwGLCoreSDL.c	/^typedef void (APIENTRY *PFNGLVertexAttribPointer)(GLuint index, GLint size, GLenum type, GLboolean normalized, GLsizei stride, const GLvoid *pointer);$/;"	t	file:
PFNOpenGL	ui/AntTweakBar/src/LoadOGLCore.h	/^    extern "C" { typedef void (APIENTRY* PFNOpenGL)(); }$/;"	t
PI_2	cpp/bak/SoftBody.cpp	/^const float PI_2 = M_PI*2;$/;"	v
PLAYER_HPP_	Player.hpp	2;"	d
ParseToken	ui/AntTweakBar/src/TwMgr.cpp	/^int ParseToken(string& _Token, const char *_Def, int& Line, int& Column, bool _KeepQuotes, bool _EndCR, char _Sep1='\\0', char _Sep2='\\0')$/;"	f
PerfTimer	ui/AntTweakBar/src/AntPerfTimer.h	/^        inline        PerfTimer()   { Reset(); }$/;"	f	struct:PerfTimer
PerfTimer	ui/AntTweakBar/src/AntPerfTimer.h	/^        inline        PerfTimer()   { if( !QueryPerformanceFrequency(&Freq) ) MessageBox(NULL, _T("Precision timer not supported"), _T("Problem"), MB_ICONEXCLAMATION); Reset(); }$/;"	f	struct:PerfTimer
PerfTimer	ui/AntTweakBar/src/AntPerfTimer.h	/^    struct PerfTimer$/;"	s
Permute	ui/AntTweakBar/src/TwMgr.cpp	/^void CQuaternionExt::Permute(double *outX, double *outY, double *outZ, double x, double y, double z)$/;"	f	class:CQuaternionExt
Permute	ui/AntTweakBar/src/TwMgr.cpp	/^void CQuaternionExt::Permute(float *outX, float *outY, float *outZ, float x, float y, float z)$/;"	f	class:CQuaternionExt
PermuteInv	ui/AntTweakBar/src/TwMgr.cpp	/^void CQuaternionExt::PermuteInv(double *outX, double *outY, double *outZ, double x, double y, double z)$/;"	f	class:CQuaternionExt
PermuteInv	ui/AntTweakBar/src/TwMgr.cpp	/^void CQuaternionExt::PermuteInv(float *outX, float *outY, float *outZ, float x, float y, float z)$/;"	f	class:CQuaternionExt
PixmapCursor	ui/AntTweakBar/src/TwMgr.cpp	/^CTwMgr::CCursor CTwMgr::PixmapCursor(int _CurIdx)$/;"	f	class:CTwMgr
Player	Player.hpp	/^	class Player$/;"	c	namespace:game
PlayerBounds	cpp/Player.cpp	/^const glm::vec3 PlayerBounds[2] = {$/;"	v
PlayerEyeLevel	cpp/Player.cpp	/^constexpr float PlayerEyeLevel = 1.5;$/;"	v
PlayerHalfDepth	cpp/Player.cpp	/^constexpr float PlayerHalfDepth = 0.5;$/;"	v
PlayerHalfWidth	cpp/Player.cpp	/^constexpr float PlayerHalfWidth = 0.5;$/;"	v
PlayerHeight	cpp/Player.cpp	/^constexpr float PlayerHeight = 2.0;$/;"	v
PlayerSpeed	cpp/Player.cpp	/^constexpr float PlayerSpeed = 4.0;$/;"	v
PopupCallback	ui/AntTweakBar/src/TwBar.cpp	/^static void ANT_CALL PopupCallback(void *_ClientData)$/;"	f	file:
Program	bak/programs.cpp	/^Program::Program() :$/;"	f	class:Program
Program	cpp/opengl/programs.cpp	/^Program::Program() :$/;"	f	class:Program
Program	opengl/programs.h	/^struct Program{$/;"	s
Qs	ui/AntTweakBar/src/TwMgr.h	/^    double               Qx, Qy, Qz, Qs;    \/\/ Quat value$/;"	m	struct:CQuaternionExt
QuatD	ui/AntTweakBar/src/TwMgr.cpp	/^static inline float QuatD(int w, int h)$/;"	f	file:
QuatFromAxisAngle	ui/AntTweakBar/src/TwMgr.cpp	/^static inline void QuatFromAxisAngle(double *out, const double *axis, double angle)$/;"	f	file:
QuatFromDir	ui/AntTweakBar/src/TwMgr.cpp	/^void CQuaternionExt::QuatFromDir(double *outQx, double *outQy, double *outQz, double *outQs, double dx, double dy, double dz)$/;"	f	class:CQuaternionExt
QuatIX	ui/AntTweakBar/src/TwMgr.cpp	/^static inline float QuatIX(int x, int w, int h)$/;"	f	file:
QuatIY	ui/AntTweakBar/src/TwMgr.cpp	/^static inline float QuatIY(int y, int w, int h)$/;"	f	file:
QuatMult	ui/AntTweakBar/src/TwMgr.cpp	/^static inline void QuatMult(double *out, const double *q1, const double *q2)$/;"	f	file:
QuatPX	ui/AntTweakBar/src/TwMgr.cpp	/^static inline int QuatPX(float x, int w, int h)$/;"	f	file:
QuatPY	ui/AntTweakBar/src/TwMgr.cpp	/^static inline int QuatPY(float y, int w, int h)$/;"	f	file:
Qx	ui/AntTweakBar/src/TwMgr.h	/^    double               Qx, Qy, Qz, Qs;    \/\/ Quat value$/;"	m	struct:CQuaternionExt
Qy	ui/AntTweakBar/src/TwMgr.h	/^    double               Qx, Qy, Qz, Qs;    \/\/ Quat value$/;"	m	struct:CQuaternionExt
Qz	ui/AntTweakBar/src/TwMgr.h	/^    double               Qx, Qy, Qz, Qs;    \/\/ Quat value$/;"	m	struct:CQuaternionExt
R	ui/AntTweakBar/src/TwMgr.h	/^    int                  R, G, B;$/;"	m	struct:CColorExt
RANLIB	ui/AntTweakBar/src/Makefile	/^RANLIB   	=$/;"	m
RBB	cpp/Cube.cpp	/^	RBB, RTB,$/;"	e	enum:__anon3	file:
RBF	cpp/Cube.cpp	/^	RBF, RTF,$/;"	e	enum:__anon3	file:
RET_DOUBLE	ui/AntTweakBar/src/TwMgr.h	/^    RET_DOUBLE,$/;"	e	enum:ERetType
RET_ERROR	ui/AntTweakBar/src/TwMgr.h	/^    RET_ERROR = 0,$/;"	e	enum:ERetType
RET_STRING	ui/AntTweakBar/src/TwMgr.h	/^    RET_STRING$/;"	e	enum:ERetType
RGB2HLS	ui/AntTweakBar/src/TwMgr.cpp	/^void CColorExt::RGB2HLS()$/;"	f	class:CColorExt
RTB	cpp/Cube.cpp	/^	RBB, RTB,$/;"	e	enum:__anon3	file:
RTF	cpp/Cube.cpp	/^	RBF, RTF,$/;"	e	enum:__anon3	file:
RadToDeg	ui/AntTweakBar/src/TwMgr.cpp	/^inline double RadToDeg(double radian) { return radian * (180.0\/DOUBLE_PI); }$/;"	f
Record	ui/AntTweakBar/src/LoadOGLCore.cpp	/^        PFNOpenGL Record(const char *_FuncName, PFNOpenGL *_FuncPtr)$/;"	f	namespace:GLCore
Render	ui/AntTweakBar/examples/TwGLCoreSDL.c	/^void Render()$/;"	f
Reset	ui/AntTweakBar/src/AntPerfTimer.h	/^        inline void   Reset()       { QueryPerformanceCounter(&Start); }$/;"	f	struct:PerfTimer
Reset	ui/AntTweakBar/src/AntPerfTimer.h	/^        inline void   Reset()       { gettimeofday(&Start, &TZ); }$/;"	f	struct:PerfTimer
ResizeTriBuffers	ui/AntTweakBar/src/TwOpenGLCore.cpp	/^void CTwGraphOpenGLCore::ResizeTriBuffers(size_t _NewSize)$/;"	f	class:CTwGraphOpenGLCore
Restore	ui/AntTweakBar/src/TwOpenGLCore.cpp	/^void CTwGraphOpenGLCore::Restore()$/;"	f	class:CTwGraphOpenGLCore
RestoreCDStdString	ui/AntTweakBar/src/TwMgr.cpp	/^void CTwMgr::RestoreCDStdString(const std::vector<CCDStdStringRecord>& _Records)$/;"	f	class:CTwMgr
RestoreViewport	ui/AntTweakBar/src/TwOpenGLCore.cpp	/^void CTwGraphOpenGLCore::RestoreViewport()$/;"	f	class:CTwGraphOpenGLCore
RestoreXErrors	ui/AntTweakBar/src/TwMgr.cpp	/^static void RestoreXErrors()$/;"	f	file:
Rloss	ui/AntTweakBar/src/MiniSDL12.h	/^    Uint8  Rloss;$/;"	m	struct:SDL_PixelFormat
Rloss	ui/AntTweakBar/src/MiniSDL13.h	/^    Uint8  Rloss;$/;"	m	struct:SDL_PixelFormat
Rmask	ui/AntTweakBar/src/MiniSDL12.h	/^    Uint32 Rmask;$/;"	m	struct:SDL_PixelFormat
Rmask	ui/AntTweakBar/src/MiniSDL13.h	/^    Uint32 Rmask;$/;"	m	struct:SDL_PixelFormat
RotationSpeed	cpp/Player.cpp	/^constexpr float RotationSpeed = 1.5;$/;"	v
RotoDraw	ui/AntTweakBar/src/TwBar.cpp	/^void CTwBar::RotoDraw()$/;"	f	class:CTwBar
RotoGetMax	ui/AntTweakBar/src/TwBar.cpp	/^double CTwBar::RotoGetMax() const$/;"	f	class:CTwBar
RotoGetMin	ui/AntTweakBar/src/TwBar.cpp	/^double CTwBar::RotoGetMin() const$/;"	f	class:CTwBar
RotoGetStep	ui/AntTweakBar/src/TwBar.cpp	/^double CTwBar::RotoGetStep() const$/;"	f	class:CTwBar
RotoGetSteppedValue	ui/AntTweakBar/src/TwBar.cpp	/^double CTwBar::RotoGetSteppedValue() const$/;"	f	class:CTwBar
RotoGetValue	ui/AntTweakBar/src/TwBar.cpp	/^double CTwBar::RotoGetValue() const$/;"	f	class:CTwBar
RotoOnLButtonDown	ui/AntTweakBar/src/TwBar.cpp	/^void CTwBar::RotoOnLButtonDown(int _X, int _Y)$/;"	f	class:CTwBar
RotoOnLButtonUp	ui/AntTweakBar/src/TwBar.cpp	/^void CTwBar::RotoOnLButtonUp(int \/*_X*\/, int \/*_Y*\/)$/;"	f	class:CTwBar
RotoOnMButtonDown	ui/AntTweakBar/src/TwBar.cpp	/^void CTwBar::RotoOnMButtonDown(int _X, int _Y)$/;"	f	class:CTwBar
RotoOnMButtonUp	ui/AntTweakBar/src/TwBar.cpp	/^void CTwBar::RotoOnMButtonUp(int _X, int _Y)$/;"	f	class:CTwBar
RotoOnMouseMove	ui/AntTweakBar/src/TwBar.cpp	/^void CTwBar::RotoOnMouseMove(int _X, int _Y)$/;"	f	class:CTwBar
RotoSetValue	ui/AntTweakBar/src/TwBar.cpp	/^void CTwBar::RotoSetValue(double _Val)$/;"	f	class:CTwBar
Rshift	ui/AntTweakBar/src/MiniSDL12.h	/^    Uint8  Rshift;$/;"	m	struct:SDL_PixelFormat
Rshift	ui/AntTweakBar/src/MiniSDL13.h	/^    Uint8  Rshift;$/;"	m	struct:SDL_PixelFormat
S	ui/AntTweakBar/src/TwMgr.h	/^    int                  H, L, S;$/;"	m	struct:CColorExt
SDLEventEnum	ui/AntTweakBar/src/MiniSDL12.h	/^} SDLEventEnum;$/;"	t	typeref:enum:__anon10
SDLK_BACKSPACE	ui/AntTweakBar/src/MiniSDL12.h	/^    SDLK_BACKSPACE  = 8,$/;"	e	enum:__anon8
SDLK_BACKSPACE	ui/AntTweakBar/src/MiniSDL13.h	/^    SDLK_BACKSPACE  = 8,$/;"	e	enum:__anon5
SDLK_CLEAR	ui/AntTweakBar/src/MiniSDL12.h	/^    SDLK_CLEAR      = 12,$/;"	e	enum:__anon8
SDLK_CLEAR	ui/AntTweakBar/src/MiniSDL13.h	/^    SDLK_CLEAR      = 12,$/;"	e	enum:__anon5
SDLK_DELETE	ui/AntTweakBar/src/MiniSDL12.h	/^    SDLK_DELETE     = 127,$/;"	e	enum:__anon8
SDLK_DELETE	ui/AntTweakBar/src/MiniSDL13.h	/^    SDLK_DELETE     = 127,$/;"	e	enum:__anon5
SDLK_DOWN	ui/AntTweakBar/src/MiniSDL12.h	/^    SDLK_DOWN       = 274,$/;"	e	enum:__anon8
SDLK_DOWN	ui/AntTweakBar/src/MiniSDL13.h	/^    SDLK_DOWN       = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_DOWN),$/;"	e	enum:__anon5
SDLK_END	ui/AntTweakBar/src/MiniSDL12.h	/^    SDLK_END        = 279,$/;"	e	enum:__anon8
SDLK_END	ui/AntTweakBar/src/MiniSDL13.h	/^    SDLK_END        = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_END),$/;"	e	enum:__anon5
SDLK_ESCAPE	ui/AntTweakBar/src/MiniSDL12.h	/^    SDLK_ESCAPE     = 27,$/;"	e	enum:__anon8
SDLK_ESCAPE	ui/AntTweakBar/src/MiniSDL13.h	/^    SDLK_ESCAPE     = 27,$/;"	e	enum:__anon5
SDLK_F1	ui/AntTweakBar/src/MiniSDL12.h	/^    SDLK_F1         = 282,$/;"	e	enum:__anon8
SDLK_F1	ui/AntTweakBar/src/MiniSDL13.h	/^    SDLK_F1         = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F1),$/;"	e	enum:__anon5
SDLK_F10	ui/AntTweakBar/src/MiniSDL12.h	/^    SDLK_F10        = 291,$/;"	e	enum:__anon8
SDLK_F10	ui/AntTweakBar/src/MiniSDL13.h	/^    SDLK_F10        = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F10),$/;"	e	enum:__anon5
SDLK_F11	ui/AntTweakBar/src/MiniSDL12.h	/^    SDLK_F11        = 292,$/;"	e	enum:__anon8
SDLK_F11	ui/AntTweakBar/src/MiniSDL13.h	/^    SDLK_F11        = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F11),$/;"	e	enum:__anon5
SDLK_F12	ui/AntTweakBar/src/MiniSDL12.h	/^    SDLK_F12        = 293,$/;"	e	enum:__anon8
SDLK_F12	ui/AntTweakBar/src/MiniSDL13.h	/^    SDLK_F12        = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F12)$/;"	e	enum:__anon5
SDLK_F2	ui/AntTweakBar/src/MiniSDL12.h	/^    SDLK_F2         = 283,$/;"	e	enum:__anon8
SDLK_F2	ui/AntTweakBar/src/MiniSDL13.h	/^    SDLK_F2         = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F2),$/;"	e	enum:__anon5
SDLK_F3	ui/AntTweakBar/src/MiniSDL12.h	/^    SDLK_F3         = 284,$/;"	e	enum:__anon8
SDLK_F3	ui/AntTweakBar/src/MiniSDL13.h	/^    SDLK_F3         = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F3),$/;"	e	enum:__anon5
SDLK_F4	ui/AntTweakBar/src/MiniSDL12.h	/^    SDLK_F4         = 285,$/;"	e	enum:__anon8
SDLK_F4	ui/AntTweakBar/src/MiniSDL13.h	/^    SDLK_F4         = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F4),$/;"	e	enum:__anon5
SDLK_F5	ui/AntTweakBar/src/MiniSDL12.h	/^    SDLK_F5         = 286,$/;"	e	enum:__anon8
SDLK_F5	ui/AntTweakBar/src/MiniSDL13.h	/^    SDLK_F5         = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F5),$/;"	e	enum:__anon5
SDLK_F6	ui/AntTweakBar/src/MiniSDL12.h	/^    SDLK_F6         = 287,$/;"	e	enum:__anon8
SDLK_F6	ui/AntTweakBar/src/MiniSDL13.h	/^    SDLK_F6         = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F6),$/;"	e	enum:__anon5
SDLK_F7	ui/AntTweakBar/src/MiniSDL12.h	/^    SDLK_F7         = 288,$/;"	e	enum:__anon8
SDLK_F7	ui/AntTweakBar/src/MiniSDL13.h	/^    SDLK_F7         = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F7),$/;"	e	enum:__anon5
SDLK_F8	ui/AntTweakBar/src/MiniSDL12.h	/^    SDLK_F8         = 289,$/;"	e	enum:__anon8
SDLK_F8	ui/AntTweakBar/src/MiniSDL13.h	/^    SDLK_F8         = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F8),$/;"	e	enum:__anon5
SDLK_F9	ui/AntTweakBar/src/MiniSDL12.h	/^    SDLK_F9         = 290,$/;"	e	enum:__anon8
SDLK_F9	ui/AntTweakBar/src/MiniSDL13.h	/^    SDLK_F9         = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_F9),$/;"	e	enum:__anon5
SDLK_HOME	ui/AntTweakBar/src/MiniSDL12.h	/^    SDLK_HOME       = 278,$/;"	e	enum:__anon8
SDLK_HOME	ui/AntTweakBar/src/MiniSDL13.h	/^    SDLK_HOME       = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_HOME),$/;"	e	enum:__anon5
SDLK_INSERT	ui/AntTweakBar/src/MiniSDL12.h	/^    SDLK_INSERT     = 277,$/;"	e	enum:__anon8
SDLK_INSERT	ui/AntTweakBar/src/MiniSDL13.h	/^    SDLK_INSERT     = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_INSERT),$/;"	e	enum:__anon5
SDLK_LEFT	ui/AntTweakBar/src/MiniSDL12.h	/^    SDLK_LEFT       = 276,$/;"	e	enum:__anon8
SDLK_LEFT	ui/AntTweakBar/src/MiniSDL13.h	/^    SDLK_LEFT       = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_LEFT),$/;"	e	enum:__anon5
SDLK_PAGEDOWN	ui/AntTweakBar/src/MiniSDL12.h	/^    SDLK_PAGEDOWN   = 281,$/;"	e	enum:__anon8
SDLK_PAGEDOWN	ui/AntTweakBar/src/MiniSDL13.h	/^    SDLK_PAGEDOWN   = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_PAGEDOWN),$/;"	e	enum:__anon5
SDLK_PAGEUP	ui/AntTweakBar/src/MiniSDL12.h	/^    SDLK_PAGEUP     = 280,$/;"	e	enum:__anon8
SDLK_PAGEUP	ui/AntTweakBar/src/MiniSDL13.h	/^    SDLK_PAGEUP     = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_PAGEUP),$/;"	e	enum:__anon5
SDLK_PAUSE	ui/AntTweakBar/src/MiniSDL12.h	/^    SDLK_PAUSE      = 19,$/;"	e	enum:__anon8
SDLK_PAUSE	ui/AntTweakBar/src/MiniSDL13.h	/^    SDLK_PAUSE      = 19,$/;"	e	enum:__anon5
SDLK_RETURN	ui/AntTweakBar/src/MiniSDL12.h	/^    SDLK_RETURN     = 13,$/;"	e	enum:__anon8
SDLK_RETURN	ui/AntTweakBar/src/MiniSDL13.h	/^    SDLK_RETURN     = 13,$/;"	e	enum:__anon5
SDLK_RIGHT	ui/AntTweakBar/src/MiniSDL12.h	/^    SDLK_RIGHT      = 275,$/;"	e	enum:__anon8
SDLK_RIGHT	ui/AntTweakBar/src/MiniSDL13.h	/^    SDLK_RIGHT      = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_RIGHT),$/;"	e	enum:__anon5
SDLK_SCANCODE_MASK	ui/AntTweakBar/src/MiniSDL13.h	43;"	d
SDLK_TAB	ui/AntTweakBar/src/MiniSDL12.h	/^    SDLK_TAB        = 9,$/;"	e	enum:__anon8
SDLK_TAB	ui/AntTweakBar/src/MiniSDL13.h	/^    SDLK_TAB        = 9,$/;"	e	enum:__anon5
SDLK_UP	ui/AntTweakBar/src/MiniSDL12.h	/^    SDLK_UP         = 273,$/;"	e	enum:__anon8
SDLK_UP	ui/AntTweakBar/src/MiniSDL13.h	/^    SDLK_UP         = SDL_SCANCODE_TO_KEYCODE(SDL_SCANCODE_UP),$/;"	e	enum:__anon5
SDLKey	ui/AntTweakBar/src/MiniSDL12.h	/^} SDLKey;$/;"	t	typeref:enum:__anon8
SDLKey	ui/AntTweakBar/src/MiniSDL13.h	/^} SDLKey;$/;"	t	typeref:enum:__anon5
SDLMod	ui/AntTweakBar/src/MiniSDL12.h	/^} SDLMod;$/;"	t	typeref:enum:__anon9
SDLMod	ui/AntTweakBar/src/MiniSDL13.h	/^} SDLMod;$/;"	t	typeref:enum:__anon6
SDL_ACTIVEEVENT	ui/AntTweakBar/src/MiniSDL12.h	/^    SDL_ACTIVEEVENT,$/;"	e	enum:__anon10
SDL_ACTIVEEVENT	ui/AntTweakBar/src/MiniSDL13.h	154;"	d
SDL_ANYFORMAT	ui/AntTweakBar/src/MiniSDL12.h	303;"	d
SDL_ANYFORMAT	ui/AntTweakBar/src/MiniSDL13.h	392;"	d
SDL_ASYNCBLIT	ui/AntTweakBar/src/MiniSDL12.h	302;"	d
SDL_ActiveEvent	ui/AntTweakBar/src/MiniSDL12.h	/^typedef struct SDL_ActiveEvent {$/;"	s
SDL_ActiveEvent	ui/AntTweakBar/src/MiniSDL12.h	/^} SDL_ActiveEvent;$/;"	t	typeref:struct:SDL_ActiveEvent
SDL_ActiveEvent	ui/AntTweakBar/src/MiniSDL13.h	/^typedef struct SDL_ActiveEvent$/;"	s
SDL_ActiveEvent	ui/AntTweakBar/src/MiniSDL13.h	/^} SDL_ActiveEvent;$/;"	t	typeref:struct:SDL_ActiveEvent
SDL_CALL	ui/AntTweakBar/src/MiniSDL12.h	30;"	d
SDL_CALL	ui/AntTweakBar/src/MiniSDL12.h	33;"	d
SDL_CALL	ui/AntTweakBar/src/MiniSDL13.h	30;"	d
SDL_CALL	ui/AntTweakBar/src/MiniSDL13.h	33;"	d
SDL_DECLSPEC	ui/AntTweakBar/src/MiniSDL12.h	29;"	d
SDL_DECLSPEC	ui/AntTweakBar/src/MiniSDL12.h	32;"	d
SDL_DECLSPEC	ui/AntTweakBar/src/MiniSDL13.h	29;"	d
SDL_DECLSPEC	ui/AntTweakBar/src/MiniSDL13.h	32;"	d
SDL_DEFAULT_REPEAT_DELAY	ui/AntTweakBar/src/MiniSDL12.h	312;"	d
SDL_DEFAULT_REPEAT_DELAY	ui/AntTweakBar/src/MiniSDL13.h	401;"	d
SDL_DEFAULT_REPEAT_INTERVAL	ui/AntTweakBar/src/MiniSDL12.h	313;"	d
SDL_DEFAULT_REPEAT_INTERVAL	ui/AntTweakBar/src/MiniSDL13.h	402;"	d
SDL_DOUBLEBUF	ui/AntTweakBar/src/MiniSDL12.h	305;"	d
SDL_DOUBLEBUF	ui/AntTweakBar/src/MiniSDL13.h	394;"	d
SDL_EVENT_RESERVED1	ui/AntTweakBar/src/MiniSDL13.h	/^    SDL_EVENT_RESERVED1,$/;"	e	enum:__anon7
SDL_EVENT_RESERVED2	ui/AntTweakBar/src/MiniSDL12.h	/^    SDL_EVENT_RESERVED2,$/;"	e	enum:__anon10
SDL_EVENT_RESERVED2	ui/AntTweakBar/src/MiniSDL13.h	/^    SDL_EVENT_RESERVED2,$/;"	e	enum:__anon7
SDL_EVENT_RESERVED3	ui/AntTweakBar/src/MiniSDL12.h	/^    SDL_EVENT_RESERVED3,$/;"	e	enum:__anon10
SDL_EVENT_RESERVED3	ui/AntTweakBar/src/MiniSDL13.h	/^    SDL_EVENT_RESERVED3,$/;"	e	enum:__anon7
SDL_EVENT_RESERVED4	ui/AntTweakBar/src/MiniSDL12.h	/^    SDL_EVENT_RESERVED4,$/;"	e	enum:__anon10
SDL_EVENT_RESERVED5	ui/AntTweakBar/src/MiniSDL12.h	/^    SDL_EVENT_RESERVED5,$/;"	e	enum:__anon10
SDL_EVENT_RESERVED6	ui/AntTweakBar/src/MiniSDL12.h	/^    SDL_EVENT_RESERVED6,$/;"	e	enum:__anon10
SDL_EVENT_RESERVED7	ui/AntTweakBar/src/MiniSDL12.h	/^    SDL_EVENT_RESERVED7,$/;"	e	enum:__anon10
SDL_EVENT_RESERVEDA	ui/AntTweakBar/src/MiniSDL12.h	/^    SDL_EVENT_RESERVEDA,$/;"	e	enum:__anon10
SDL_EVENT_RESERVEDB	ui/AntTweakBar/src/MiniSDL12.h	/^    SDL_EVENT_RESERVEDB,$/;"	e	enum:__anon10
SDL_Event	ui/AntTweakBar/src/MiniSDL12.h	/^} SDL_Event;$/;"	t	typeref:union:__anon11
SDL_Event	ui/AntTweakBar/src/MiniSDL13.h	/^typedef union SDL_Event {$/;"	u
SDL_Event	ui/AntTweakBar/src/MiniSDL13.h	/^} SDL_Event;$/;"	t	typeref:union:SDL_Event
SDL_EventType	ui/AntTweakBar/src/MiniSDL13.h	/^} SDL_EventType;$/;"	t	typeref:enum:__anon7
SDL_ExposeEvent	ui/AntTweakBar/src/MiniSDL12.h	/^typedef struct SDL_ExposeEvent {$/;"	s
SDL_ExposeEvent	ui/AntTweakBar/src/MiniSDL12.h	/^} SDL_ExposeEvent;$/;"	t	typeref:struct:SDL_ExposeEvent
SDL_ExposeEvent	ui/AntTweakBar/src/MiniSDL13.h	/^typedef struct SDL_ExposeEvent {$/;"	s
SDL_ExposeEvent	ui/AntTweakBar/src/MiniSDL13.h	/^} SDL_ExposeEvent;$/;"	t	typeref:struct:SDL_ExposeEvent
SDL_FULLSCREEN	ui/AntTweakBar/src/MiniSDL12.h	306;"	d
SDL_FULLSCREEN	ui/AntTweakBar/src/MiniSDL13.h	395;"	d
SDL_GL_ACCELERATED_VISUAL	ui/AntTweakBar/src/MiniSDL12.h	/^    SDL_GL_ACCELERATED_VISUAL,$/;"	e	enum:__anon12
SDL_GL_ACCELERATED_VISUAL	ui/AntTweakBar/src/MiniSDL13.h	/^    SDL_GL_ACCELERATED_VISUAL,$/;"	e	enum:SDL_GLattr
SDL_GL_ACCUM_ALPHA_SIZE	ui/AntTweakBar/src/MiniSDL12.h	/^    SDL_GL_ACCUM_ALPHA_SIZE,$/;"	e	enum:__anon12
SDL_GL_ACCUM_ALPHA_SIZE	ui/AntTweakBar/src/MiniSDL13.h	/^    SDL_GL_ACCUM_ALPHA_SIZE,$/;"	e	enum:SDL_GLattr
SDL_GL_ACCUM_BLUE_SIZE	ui/AntTweakBar/src/MiniSDL12.h	/^    SDL_GL_ACCUM_BLUE_SIZE,$/;"	e	enum:__anon12
SDL_GL_ACCUM_BLUE_SIZE	ui/AntTweakBar/src/MiniSDL13.h	/^    SDL_GL_ACCUM_BLUE_SIZE,$/;"	e	enum:SDL_GLattr
SDL_GL_ACCUM_GREEN_SIZE	ui/AntTweakBar/src/MiniSDL12.h	/^    SDL_GL_ACCUM_GREEN_SIZE,$/;"	e	enum:__anon12
SDL_GL_ACCUM_GREEN_SIZE	ui/AntTweakBar/src/MiniSDL13.h	/^    SDL_GL_ACCUM_GREEN_SIZE,$/;"	e	enum:SDL_GLattr
SDL_GL_ACCUM_RED_SIZE	ui/AntTweakBar/src/MiniSDL12.h	/^    SDL_GL_ACCUM_RED_SIZE,$/;"	e	enum:__anon12
SDL_GL_ACCUM_RED_SIZE	ui/AntTweakBar/src/MiniSDL13.h	/^    SDL_GL_ACCUM_RED_SIZE,$/;"	e	enum:SDL_GLattr
SDL_GL_ALPHA_SIZE	ui/AntTweakBar/src/MiniSDL12.h	/^    SDL_GL_ALPHA_SIZE,$/;"	e	enum:__anon12
SDL_GL_ALPHA_SIZE	ui/AntTweakBar/src/MiniSDL13.h	/^    SDL_GL_ALPHA_SIZE,$/;"	e	enum:SDL_GLattr
SDL_GL_BLUE_SIZE	ui/AntTweakBar/src/MiniSDL12.h	/^    SDL_GL_BLUE_SIZE,$/;"	e	enum:__anon12
SDL_GL_BLUE_SIZE	ui/AntTweakBar/src/MiniSDL13.h	/^    SDL_GL_BLUE_SIZE,$/;"	e	enum:SDL_GLattr
SDL_GL_BUFFER_SIZE	ui/AntTweakBar/src/MiniSDL12.h	/^    SDL_GL_BUFFER_SIZE,$/;"	e	enum:__anon12
SDL_GL_BUFFER_SIZE	ui/AntTweakBar/src/MiniSDL13.h	/^    SDL_GL_BUFFER_SIZE,$/;"	e	enum:SDL_GLattr
SDL_GL_CONTEXT_MAJOR_VERSION	ui/AntTweakBar/src/MiniSDL12.h	/^    SDL_GL_CONTEXT_MAJOR_VERSION,$/;"	e	enum:__anon12
SDL_GL_CONTEXT_MAJOR_VERSION	ui/AntTweakBar/src/MiniSDL13.h	/^    SDL_GL_CONTEXT_MAJOR_VERSION,$/;"	e	enum:SDL_GLattr
SDL_GL_CONTEXT_MINOR_VERSION	ui/AntTweakBar/src/MiniSDL12.h	/^    SDL_GL_CONTEXT_MINOR_VERSION$/;"	e	enum:__anon12
SDL_GL_CONTEXT_MINOR_VERSION	ui/AntTweakBar/src/MiniSDL13.h	/^    SDL_GL_CONTEXT_MINOR_VERSION$/;"	e	enum:SDL_GLattr
SDL_GL_DEPTH_SIZE	ui/AntTweakBar/src/MiniSDL12.h	/^    SDL_GL_DEPTH_SIZE,$/;"	e	enum:__anon12
SDL_GL_DEPTH_SIZE	ui/AntTweakBar/src/MiniSDL13.h	/^    SDL_GL_DEPTH_SIZE,$/;"	e	enum:SDL_GLattr
SDL_GL_DOUBLEBUFFER	ui/AntTweakBar/src/MiniSDL12.h	/^    SDL_GL_DOUBLEBUFFER,$/;"	e	enum:__anon12
SDL_GL_DOUBLEBUFFER	ui/AntTweakBar/src/MiniSDL13.h	/^    SDL_GL_DOUBLEBUFFER,$/;"	e	enum:SDL_GLattr
SDL_GL_GREEN_SIZE	ui/AntTweakBar/src/MiniSDL12.h	/^    SDL_GL_GREEN_SIZE,$/;"	e	enum:__anon12
SDL_GL_GREEN_SIZE	ui/AntTweakBar/src/MiniSDL13.h	/^    SDL_GL_GREEN_SIZE,$/;"	e	enum:SDL_GLattr
SDL_GL_MULTISAMPLEBUFFERS	ui/AntTweakBar/src/MiniSDL12.h	/^    SDL_GL_MULTISAMPLEBUFFERS,$/;"	e	enum:__anon12
SDL_GL_MULTISAMPLEBUFFERS	ui/AntTweakBar/src/MiniSDL13.h	/^    SDL_GL_MULTISAMPLEBUFFERS,$/;"	e	enum:SDL_GLattr
SDL_GL_MULTISAMPLESAMPLES	ui/AntTweakBar/src/MiniSDL12.h	/^    SDL_GL_MULTISAMPLESAMPLES,$/;"	e	enum:__anon12
SDL_GL_MULTISAMPLESAMPLES	ui/AntTweakBar/src/MiniSDL13.h	/^    SDL_GL_MULTISAMPLESAMPLES,$/;"	e	enum:SDL_GLattr
SDL_GL_RED_SIZE	ui/AntTweakBar/src/MiniSDL12.h	/^    SDL_GL_RED_SIZE,$/;"	e	enum:__anon12
SDL_GL_RED_SIZE	ui/AntTweakBar/src/MiniSDL13.h	/^    SDL_GL_RED_SIZE,$/;"	e	enum:SDL_GLattr
SDL_GL_RETAINED_BACKING	ui/AntTweakBar/src/MiniSDL12.h	/^    SDL_GL_RETAINED_BACKING,$/;"	e	enum:__anon12
SDL_GL_RETAINED_BACKING	ui/AntTweakBar/src/MiniSDL13.h	/^    SDL_GL_RETAINED_BACKING,$/;"	e	enum:SDL_GLattr
SDL_GL_STENCIL_SIZE	ui/AntTweakBar/src/MiniSDL12.h	/^    SDL_GL_STENCIL_SIZE,$/;"	e	enum:__anon12
SDL_GL_STENCIL_SIZE	ui/AntTweakBar/src/MiniSDL13.h	/^    SDL_GL_STENCIL_SIZE,$/;"	e	enum:SDL_GLattr
SDL_GL_STEREO	ui/AntTweakBar/src/MiniSDL12.h	/^    SDL_GL_STEREO,$/;"	e	enum:__anon12
SDL_GL_STEREO	ui/AntTweakBar/src/MiniSDL13.h	/^    SDL_GL_STEREO,$/;"	e	enum:SDL_GLattr
SDL_GLattr	ui/AntTweakBar/src/MiniSDL12.h	/^} SDL_GLattr;$/;"	t	typeref:enum:__anon12
SDL_GLattr	ui/AntTweakBar/src/MiniSDL13.h	/^typedef enum SDL_GLattr {$/;"	g
SDL_GLattr	ui/AntTweakBar/src/MiniSDL13.h	/^} SDL_GLattr;$/;"	t	typeref:enum:SDL_GLattr
SDL_HWPALETTE	ui/AntTweakBar/src/MiniSDL12.h	304;"	d
SDL_HWPALETTE	ui/AntTweakBar/src/MiniSDL13.h	393;"	d
SDL_HWSURFACE	ui/AntTweakBar/src/MiniSDL12.h	301;"	d
SDL_HWSURFACE	ui/AntTweakBar/src/MiniSDL13.h	399;"	d
SDL_INIT_VIDEO	ui/AntTweakBar/src/MiniSDL12.h	298;"	d
SDL_INIT_VIDEO	ui/AntTweakBar/src/MiniSDL13.h	390;"	d
SDL_JOYAXISMOTION	ui/AntTweakBar/src/MiniSDL12.h	/^    SDL_JOYAXISMOTION,$/;"	e	enum:__anon10
SDL_JOYAXISMOTION	ui/AntTweakBar/src/MiniSDL13.h	/^    SDL_JOYAXISMOTION,  $/;"	e	enum:__anon7
SDL_JOYBALLMOTION	ui/AntTweakBar/src/MiniSDL12.h	/^    SDL_JOYBALLMOTION,$/;"	e	enum:__anon10
SDL_JOYBALLMOTION	ui/AntTweakBar/src/MiniSDL13.h	/^    SDL_JOYBALLMOTION,  $/;"	e	enum:__anon7
SDL_JOYBUTTONDOWN	ui/AntTweakBar/src/MiniSDL12.h	/^    SDL_JOYBUTTONDOWN,$/;"	e	enum:__anon10
SDL_JOYBUTTONDOWN	ui/AntTweakBar/src/MiniSDL13.h	/^    SDL_JOYBUTTONDOWN,  $/;"	e	enum:__anon7
SDL_JOYBUTTONUP	ui/AntTweakBar/src/MiniSDL12.h	/^    SDL_JOYBUTTONUP,$/;"	e	enum:__anon10
SDL_JOYBUTTONUP	ui/AntTweakBar/src/MiniSDL13.h	/^    SDL_JOYBUTTONUP,    $/;"	e	enum:__anon7
SDL_JOYHATMOTION	ui/AntTweakBar/src/MiniSDL12.h	/^    SDL_JOYHATMOTION,$/;"	e	enum:__anon10
SDL_JOYHATMOTION	ui/AntTweakBar/src/MiniSDL13.h	/^    SDL_JOYHATMOTION,   $/;"	e	enum:__anon7
SDL_JoyAxisEvent	ui/AntTweakBar/src/MiniSDL12.h	/^typedef struct SDL_JoyAxisEvent {$/;"	s
SDL_JoyAxisEvent	ui/AntTweakBar/src/MiniSDL12.h	/^} SDL_JoyAxisEvent;$/;"	t	typeref:struct:SDL_JoyAxisEvent
SDL_JoyAxisEvent	ui/AntTweakBar/src/MiniSDL13.h	/^typedef struct SDL_JoyAxisEvent {$/;"	s
SDL_JoyAxisEvent	ui/AntTweakBar/src/MiniSDL13.h	/^} SDL_JoyAxisEvent;$/;"	t	typeref:struct:SDL_JoyAxisEvent
SDL_JoyBallEvent	ui/AntTweakBar/src/MiniSDL12.h	/^typedef struct SDL_JoyBallEvent {$/;"	s
SDL_JoyBallEvent	ui/AntTweakBar/src/MiniSDL12.h	/^} SDL_JoyBallEvent;$/;"	t	typeref:struct:SDL_JoyBallEvent
SDL_JoyBallEvent	ui/AntTweakBar/src/MiniSDL13.h	/^typedef struct SDL_JoyBallEvent {$/;"	s
SDL_JoyBallEvent	ui/AntTweakBar/src/MiniSDL13.h	/^} SDL_JoyBallEvent;$/;"	t	typeref:struct:SDL_JoyBallEvent
SDL_JoyButtonEvent	ui/AntTweakBar/src/MiniSDL12.h	/^typedef struct SDL_JoyButtonEvent {$/;"	s
SDL_JoyButtonEvent	ui/AntTweakBar/src/MiniSDL12.h	/^} SDL_JoyButtonEvent;$/;"	t	typeref:struct:SDL_JoyButtonEvent
SDL_JoyButtonEvent	ui/AntTweakBar/src/MiniSDL13.h	/^typedef struct SDL_JoyButtonEvent {$/;"	s
SDL_JoyButtonEvent	ui/AntTweakBar/src/MiniSDL13.h	/^} SDL_JoyButtonEvent;$/;"	t	typeref:struct:SDL_JoyButtonEvent
SDL_JoyHatEvent	ui/AntTweakBar/src/MiniSDL12.h	/^typedef struct SDL_JoyHatEvent {$/;"	s
SDL_JoyHatEvent	ui/AntTweakBar/src/MiniSDL12.h	/^} SDL_JoyHatEvent;$/;"	t	typeref:struct:SDL_JoyHatEvent
SDL_JoyHatEvent	ui/AntTweakBar/src/MiniSDL13.h	/^typedef struct SDL_JoyHatEvent {$/;"	s
SDL_JoyHatEvent	ui/AntTweakBar/src/MiniSDL13.h	/^} SDL_JoyHatEvent;$/;"	t	typeref:struct:SDL_JoyHatEvent
SDL_KEYDOWN	ui/AntTweakBar/src/MiniSDL12.h	/^    SDL_KEYDOWN,$/;"	e	enum:__anon10
SDL_KEYDOWN	ui/AntTweakBar/src/MiniSDL13.h	/^    SDL_KEYDOWN,        $/;"	e	enum:__anon7
SDL_KEYUP	ui/AntTweakBar/src/MiniSDL12.h	/^    SDL_KEYUP,$/;"	e	enum:__anon10
SDL_KEYUP	ui/AntTweakBar/src/MiniSDL13.h	/^    SDL_KEYUP,          $/;"	e	enum:__anon7
SDL_KeyboardEvent	ui/AntTweakBar/src/MiniSDL12.h	/^typedef struct SDL_KeyboardEvent {$/;"	s
SDL_KeyboardEvent	ui/AntTweakBar/src/MiniSDL12.h	/^} SDL_KeyboardEvent;$/;"	t	typeref:struct:SDL_KeyboardEvent
SDL_KeyboardEvent	ui/AntTweakBar/src/MiniSDL13.h	/^typedef struct SDL_KeyboardEvent {$/;"	s
SDL_KeyboardEvent	ui/AntTweakBar/src/MiniSDL13.h	/^} SDL_KeyboardEvent;$/;"	t	typeref:struct:SDL_KeyboardEvent
SDL_MAJOR_VERSION	ui/AntTweakBar/src/MiniSDL12.h	25;"	d
SDL_MAJOR_VERSION	ui/AntTweakBar/src/MiniSDL13.h	25;"	d
SDL_MINOR_VERSION	ui/AntTweakBar/src/MiniSDL12.h	26;"	d
SDL_MINOR_VERSION	ui/AntTweakBar/src/MiniSDL13.h	26;"	d
SDL_MOUSEBUTTONDOWN	ui/AntTweakBar/src/MiniSDL12.h	/^    SDL_MOUSEBUTTONDOWN,$/;"	e	enum:__anon10
SDL_MOUSEBUTTONDOWN	ui/AntTweakBar/src/MiniSDL13.h	/^    SDL_MOUSEBUTTONDOWN,$/;"	e	enum:__anon7
SDL_MOUSEBUTTONUP	ui/AntTweakBar/src/MiniSDL12.h	/^    SDL_MOUSEBUTTONUP,$/;"	e	enum:__anon10
SDL_MOUSEBUTTONUP	ui/AntTweakBar/src/MiniSDL13.h	/^    SDL_MOUSEBUTTONUP,  $/;"	e	enum:__anon7
SDL_MOUSEMOTION	ui/AntTweakBar/src/MiniSDL12.h	/^    SDL_MOUSEMOTION,$/;"	e	enum:__anon10
SDL_MOUSEMOTION	ui/AntTweakBar/src/MiniSDL13.h	/^    SDL_MOUSEMOTION,    $/;"	e	enum:__anon7
SDL_MOUSEWHEEL	ui/AntTweakBar/src/MiniSDL13.h	/^    SDL_MOUSEWHEEL,     $/;"	e	enum:__anon7
SDL_MouseButtonEvent	ui/AntTweakBar/src/MiniSDL12.h	/^typedef struct SDL_MouseButtonEvent {$/;"	s
SDL_MouseButtonEvent	ui/AntTweakBar/src/MiniSDL12.h	/^} SDL_MouseButtonEvent;$/;"	t	typeref:struct:SDL_MouseButtonEvent
SDL_MouseButtonEvent	ui/AntTweakBar/src/MiniSDL13.h	/^typedef struct SDL_MouseButtonEvent {$/;"	s
SDL_MouseButtonEvent	ui/AntTweakBar/src/MiniSDL13.h	/^} SDL_MouseButtonEvent;$/;"	t	typeref:struct:SDL_MouseButtonEvent
SDL_MouseMotionEvent	ui/AntTweakBar/src/MiniSDL12.h	/^typedef struct SDL_MouseMotionEvent {$/;"	s
SDL_MouseMotionEvent	ui/AntTweakBar/src/MiniSDL12.h	/^} SDL_MouseMotionEvent;$/;"	t	typeref:struct:SDL_MouseMotionEvent
SDL_MouseMotionEvent	ui/AntTweakBar/src/MiniSDL13.h	/^typedef struct SDL_MouseMotionEvent {$/;"	s
SDL_MouseMotionEvent	ui/AntTweakBar/src/MiniSDL13.h	/^} SDL_MouseMotionEvent;$/;"	t	typeref:struct:SDL_MouseMotionEvent
SDL_MouseWheelEvent	ui/AntTweakBar/src/MiniSDL13.h	/^typedef struct SDL_MouseWheelEvent {$/;"	s
SDL_MouseWheelEvent	ui/AntTweakBar/src/MiniSDL13.h	/^} SDL_MouseWheelEvent;$/;"	t	typeref:struct:SDL_MouseWheelEvent
SDL_NOEVENT	ui/AntTweakBar/src/MiniSDL12.h	/^    SDL_NOEVENT = 0,$/;"	e	enum:__anon10
SDL_NOEVENT	ui/AntTweakBar/src/MiniSDL13.h	/^    SDL_NOEVENT     = 0,$/;"	e	enum:__anon7
SDL_NOFRAME	ui/AntTweakBar/src/MiniSDL12.h	310;"	d
SDL_NOFRAME	ui/AntTweakBar/src/MiniSDL13.h	397;"	d
SDL_NUMEVENTS	ui/AntTweakBar/src/MiniSDL12.h	/^    SDL_NUMEVENTS = 32$/;"	e	enum:__anon10
SDL_NUMEVENTS	ui/AntTweakBar/src/MiniSDL13.h	/^    SDL_NUMEVENTS = 32$/;"	e	enum:__anon7
SDL_OPENGL	ui/AntTweakBar/src/MiniSDL12.h	307;"	d
SDL_OPENGL	ui/AntTweakBar/src/MiniSDL13.h	398;"	d
SDL_OPENGLBLIT	ui/AntTweakBar/src/MiniSDL12.h	308;"	d
SDL_PATH	Android.mk	/^SDL_PATH := ..\/SDL2$/;"	m
SDL_PROXIMITYIN	ui/AntTweakBar/src/MiniSDL13.h	/^    SDL_PROXIMITYIN,    $/;"	e	enum:__anon7
SDL_PROXIMITYOUT	ui/AntTweakBar/src/MiniSDL13.h	/^    SDL_PROXIMITYOUT,   $/;"	e	enum:__anon7
SDL_PixelFormat	ui/AntTweakBar/src/MiniSDL12.h	/^typedef struct SDL_PixelFormat {$/;"	s
SDL_PixelFormat	ui/AntTweakBar/src/MiniSDL12.h	/^} SDL_PixelFormat;$/;"	t	typeref:struct:SDL_PixelFormat
SDL_PixelFormat	ui/AntTweakBar/src/MiniSDL13.h	/^typedef struct SDL_PixelFormat {$/;"	s
SDL_PixelFormat	ui/AntTweakBar/src/MiniSDL13.h	/^} SDL_PixelFormat;$/;"	t	typeref:struct:SDL_PixelFormat
SDL_ProximityEvent	ui/AntTweakBar/src/MiniSDL13.h	/^typedef struct SDL_ProximityEvent$/;"	s
SDL_ProximityEvent	ui/AntTweakBar/src/MiniSDL13.h	/^} SDL_ProximityEvent;$/;"	t	typeref:struct:SDL_ProximityEvent
SDL_QUIT	ui/AntTweakBar/src/MiniSDL12.h	/^    SDL_QUIT,$/;"	e	enum:__anon10
SDL_QUIT	ui/AntTweakBar/src/MiniSDL13.h	/^    SDL_QUIT,           $/;"	e	enum:__anon7
SDL_QuitEvent	ui/AntTweakBar/src/MiniSDL12.h	/^typedef struct SDL_QuitEvent {$/;"	s
SDL_QuitEvent	ui/AntTweakBar/src/MiniSDL12.h	/^} SDL_QuitEvent;$/;"	t	typeref:struct:SDL_QuitEvent
SDL_QuitEvent	ui/AntTweakBar/src/MiniSDL13.h	/^typedef struct SDL_QuitEvent {$/;"	s
SDL_QuitEvent	ui/AntTweakBar/src/MiniSDL13.h	/^} SDL_QuitEvent;$/;"	t	typeref:struct:SDL_QuitEvent
SDL_RESIZABLE	ui/AntTweakBar/src/MiniSDL12.h	309;"	d
SDL_RESIZABLE	ui/AntTweakBar/src/MiniSDL13.h	396;"	d
SDL_ResizeEvent	ui/AntTweakBar/src/MiniSDL12.h	/^typedef struct SDL_ResizeEvent {$/;"	s
SDL_ResizeEvent	ui/AntTweakBar/src/MiniSDL12.h	/^} SDL_ResizeEvent;$/;"	t	typeref:struct:SDL_ResizeEvent
SDL_ResizeEvent	ui/AntTweakBar/src/MiniSDL13.h	/^typedef struct SDL_ResizeEvent {$/;"	s
SDL_ResizeEvent	ui/AntTweakBar/src/MiniSDL13.h	/^} SDL_ResizeEvent;$/;"	t	typeref:struct:SDL_ResizeEvent
SDL_SCANCODE_DELETE	ui/AntTweakBar/src/MiniSDL13.h	/^    SDL_SCANCODE_DELETE     = 99, \/\/76,$/;"	e	enum:__anon4
SDL_SCANCODE_DOWN	ui/AntTweakBar/src/MiniSDL13.h	/^    SDL_SCANCODE_DOWN       = 90, \/\/81,$/;"	e	enum:__anon4
SDL_SCANCODE_END	ui/AntTweakBar/src/MiniSDL13.h	/^    SDL_SCANCODE_END        = 89, \/\/77,$/;"	e	enum:__anon4
SDL_SCANCODE_F1	ui/AntTweakBar/src/MiniSDL13.h	/^    SDL_SCANCODE_F1         = 58,$/;"	e	enum:__anon4
SDL_SCANCODE_F10	ui/AntTweakBar/src/MiniSDL13.h	/^    SDL_SCANCODE_F10        = 67,$/;"	e	enum:__anon4
SDL_SCANCODE_F11	ui/AntTweakBar/src/MiniSDL13.h	/^    SDL_SCANCODE_F11        = 68,$/;"	e	enum:__anon4
SDL_SCANCODE_F12	ui/AntTweakBar/src/MiniSDL13.h	/^    SDL_SCANCODE_F12        = 69,$/;"	e	enum:__anon4
SDL_SCANCODE_F2	ui/AntTweakBar/src/MiniSDL13.h	/^    SDL_SCANCODE_F2         = 59,$/;"	e	enum:__anon4
SDL_SCANCODE_F3	ui/AntTweakBar/src/MiniSDL13.h	/^    SDL_SCANCODE_F3         = 60,$/;"	e	enum:__anon4
SDL_SCANCODE_F4	ui/AntTweakBar/src/MiniSDL13.h	/^    SDL_SCANCODE_F4         = 61,$/;"	e	enum:__anon4
SDL_SCANCODE_F5	ui/AntTweakBar/src/MiniSDL13.h	/^    SDL_SCANCODE_F5         = 62,$/;"	e	enum:__anon4
SDL_SCANCODE_F6	ui/AntTweakBar/src/MiniSDL13.h	/^    SDL_SCANCODE_F6         = 63,$/;"	e	enum:__anon4
SDL_SCANCODE_F7	ui/AntTweakBar/src/MiniSDL13.h	/^    SDL_SCANCODE_F7         = 64,$/;"	e	enum:__anon4
SDL_SCANCODE_F8	ui/AntTweakBar/src/MiniSDL13.h	/^    SDL_SCANCODE_F8         = 65,$/;"	e	enum:__anon4
SDL_SCANCODE_F9	ui/AntTweakBar/src/MiniSDL13.h	/^    SDL_SCANCODE_F9         = 66,$/;"	e	enum:__anon4
SDL_SCANCODE_HOME	ui/AntTweakBar/src/MiniSDL13.h	/^    SDL_SCANCODE_HOME       = 95, \/\/74,$/;"	e	enum:__anon4
SDL_SCANCODE_INSERT	ui/AntTweakBar/src/MiniSDL13.h	/^    SDL_SCANCODE_INSERT     = 98, \/\/73,$/;"	e	enum:__anon4
SDL_SCANCODE_LEFT	ui/AntTweakBar/src/MiniSDL13.h	/^    SDL_SCANCODE_LEFT       = 92, \/\/80,$/;"	e	enum:__anon4
SDL_SCANCODE_PAGEDOWN	ui/AntTweakBar/src/MiniSDL13.h	/^    SDL_SCANCODE_PAGEDOWN   = 91, \/\/78,$/;"	e	enum:__anon4
SDL_SCANCODE_PAGEUP	ui/AntTweakBar/src/MiniSDL13.h	/^    SDL_SCANCODE_PAGEUP     = 97, \/\/75,$/;"	e	enum:__anon4
SDL_SCANCODE_RIGHT	ui/AntTweakBar/src/MiniSDL13.h	/^    SDL_SCANCODE_RIGHT      = 94, \/\/79,$/;"	e	enum:__anon4
SDL_SCANCODE_TO_KEYCODE	ui/AntTweakBar/src/MiniSDL13.h	44;"	d
SDL_SCANCODE_UP	ui/AntTweakBar/src/MiniSDL13.h	/^    SDL_SCANCODE_UP         = 96  \/\/82$/;"	e	enum:__anon4
SDL_SWSURFACE	ui/AntTweakBar/src/MiniSDL12.h	300;"	d
SDL_SYSWMEVENT	ui/AntTweakBar/src/MiniSDL12.h	/^    SDL_SYSWMEVENT,$/;"	e	enum:__anon10
SDL_SYSWMEVENT	ui/AntTweakBar/src/MiniSDL13.h	/^    SDL_SYSWMEVENT,     $/;"	e	enum:__anon7
SDL_SysWMEvent	ui/AntTweakBar/src/MiniSDL12.h	/^typedef struct SDL_SysWMEvent {$/;"	s
SDL_SysWMEvent	ui/AntTweakBar/src/MiniSDL12.h	/^} SDL_SysWMEvent;$/;"	t	typeref:struct:SDL_SysWMEvent
SDL_SysWMEvent	ui/AntTweakBar/src/MiniSDL13.h	/^typedef struct SDL_SysWMEvent {$/;"	s
SDL_SysWMEvent	ui/AntTweakBar/src/MiniSDL13.h	/^} SDL_SysWMEvent;$/;"	t	typeref:struct:SDL_SysWMEvent
SDL_SysWMmsg	ui/AntTweakBar/src/MiniSDL12.h	/^typedef struct SDL_SysWMmsg SDL_SysWMmsg;$/;"	t	typeref:struct:SDL_SysWMmsg
SDL_SysWMmsg	ui/AntTweakBar/src/MiniSDL13.h	/^typedef struct SDL_SysWMmsg SDL_SysWMmsg;$/;"	t	typeref:struct:SDL_SysWMmsg
SDL_TEXTEDITING	ui/AntTweakBar/src/MiniSDL13.h	/^    SDL_TEXTEDITING,    $/;"	e	enum:__anon7
SDL_TEXTEDITINGEVENT_TEXT_SIZE	ui/AntTweakBar/src/MiniSDL13.h	183;"	d
SDL_TEXTINPUT	ui/AntTweakBar/src/MiniSDL13.h	/^    SDL_TEXTINPUT,      $/;"	e	enum:__anon7
SDL_TEXTINPUTEVENT_TEXT_SIZE	ui/AntTweakBar/src/MiniSDL13.h	191;"	d
SDL_TextEditingEvent	ui/AntTweakBar/src/MiniSDL13.h	/^typedef struct SDL_TextEditingEvent {$/;"	s
SDL_TextEditingEvent	ui/AntTweakBar/src/MiniSDL13.h	/^} SDL_TextEditingEvent;$/;"	t	typeref:struct:SDL_TextEditingEvent
SDL_TextInputEvent	ui/AntTweakBar/src/MiniSDL13.h	/^typedef struct SDL_TextInputEvent {$/;"	s
SDL_TextInputEvent	ui/AntTweakBar/src/MiniSDL13.h	/^} SDL_TextInputEvent;$/;"	t	typeref:struct:SDL_TextInputEvent
SDL_USEREVENT	ui/AntTweakBar/src/MiniSDL12.h	/^    SDL_USEREVENT = 24,$/;"	e	enum:__anon10
SDL_USEREVENT	ui/AntTweakBar/src/MiniSDL13.h	/^    SDL_USEREVENT = 24,$/;"	e	enum:__anon7
SDL_UserEvent	ui/AntTweakBar/src/MiniSDL12.h	/^typedef struct SDL_UserEvent {$/;"	s
SDL_UserEvent	ui/AntTweakBar/src/MiniSDL12.h	/^} SDL_UserEvent;$/;"	t	typeref:struct:SDL_UserEvent
SDL_UserEvent	ui/AntTweakBar/src/MiniSDL13.h	/^typedef struct SDL_UserEvent {$/;"	s
SDL_UserEvent	ui/AntTweakBar/src/MiniSDL13.h	/^} SDL_UserEvent;$/;"	t	typeref:struct:SDL_UserEvent
SDL_VIDEOEXPOSE	ui/AntTweakBar/src/MiniSDL12.h	/^    SDL_VIDEOEXPOSE,$/;"	e	enum:__anon10
SDL_VIDEOEXPOSE	ui/AntTweakBar/src/MiniSDL13.h	156;"	d
SDL_VIDEORESIZE	ui/AntTweakBar/src/MiniSDL12.h	/^    SDL_VIDEORESIZE,$/;"	e	enum:__anon10
SDL_VIDEORESIZE	ui/AntTweakBar/src/MiniSDL13.h	155;"	d
SDL_VideoInfo	ui/AntTweakBar/src/MiniSDL12.h	/^typedef struct SDL_VideoInfo {$/;"	s
SDL_VideoInfo	ui/AntTweakBar/src/MiniSDL12.h	/^} SDL_VideoInfo;$/;"	t	typeref:struct:SDL_VideoInfo
SDL_VideoInfo	ui/AntTweakBar/src/MiniSDL13.h	/^typedef struct SDL_VideoInfo {$/;"	s
SDL_VideoInfo	ui/AntTweakBar/src/MiniSDL13.h	/^} SDL_VideoInfo;$/;"	t	typeref:struct:SDL_VideoInfo
SDL_WINDOWEVENT	ui/AntTweakBar/src/MiniSDL13.h	/^    SDL_WINDOWEVENT,    $/;"	e	enum:__anon7
SDL_WindowEvent	ui/AntTweakBar/src/MiniSDL13.h	/^typedef struct SDL_WindowEvent {$/;"	s
SDL_WindowEvent	ui/AntTweakBar/src/MiniSDL13.h	/^} SDL_WindowEvent;$/;"	t	typeref:struct:SDL_WindowEvent
SDL_WindowID	ui/AntTweakBar/src/MiniSDL13.h	/^typedef Uint32 SDL_WindowID;$/;"	t
SDL_keysym	ui/AntTweakBar/src/MiniSDL12.h	/^typedef struct SDL_keysym {$/;"	s
SDL_keysym	ui/AntTweakBar/src/MiniSDL12.h	/^} SDL_keysym;$/;"	t	typeref:struct:SDL_keysym
SDL_keysym	ui/AntTweakBar/src/MiniSDL13.h	/^typedef struct SDL_keysym {$/;"	s
SDL_keysym	ui/AntTweakBar/src/MiniSDL13.h	/^} SDL_keysym;$/;"	t	typeref:struct:SDL_keysym
SDL_scancode	ui/AntTweakBar/src/MiniSDL13.h	/^} SDL_scancode;$/;"	t	typeref:enum:__anon4
SO_EXT	ui/AntTweakBar/src/Makefile	/^SO_EXT		= .so$/;"	m
SO_VERSION	ui/AntTweakBar/src/Makefile	/^SO_VERSION	= 1$/;"	m
SRCS	Makefile	/^SRCS = $(wildcard *.cpp cpp\/*.cpp cpp\/opengl\/*.cpp cpp\/screens\/*.cpp)$/;"	m
SRC_FILES	ui/AntTweakBar/examples/Makefile	/^SRC_FILES	= TwGLCoreSDL.c$/;"	m
SRC_FILES	ui/AntTweakBar/src/Makefile	/^SRC_FILES	= TwColors.cpp TwFonts.cpp TwOpenGLCore.cpp TwBar.cpp TwMgr.cpp TwPrecomp.cpp LoadOGLCore.cpp TwEventSDL.c TwEventSDL12.c TwEventSDL13.c$/;"	m
SYMLINK	ui/AntTweakBar/src/Makefile	/^SYMLINK  	= ln -sf$/;"	m
Screen	cpp/screen.cpp	/^Screen::Screen(){$/;"	f	class:Screen
Screen	screen.h	/^struct Screen {  \/\/like a view in the java sdk. lol f java$/;"	s
SetAttrib	ui/AntTweakBar/src/TwBar.cpp	/^int CTwBar::SetAttrib(int _AttribID, const char *_Value)$/;"	f	class:CTwBar
SetAttrib	ui/AntTweakBar/src/TwBar.cpp	/^int CTwVar::SetAttrib(int _AttribID, const char *_Value, TwBar *_Bar, struct CTwVarGroup *_VarParent, int _VarIndex)$/;"	f	class:CTwVar
SetAttrib	ui/AntTweakBar/src/TwBar.cpp	/^int CTwVarAtom::SetAttrib(int _AttribID, const char *_Value, TwBar *_Bar, struct CTwVarGroup *_VarParent, int _VarIndex)$/;"	f	class:CTwVarAtom
SetAttrib	ui/AntTweakBar/src/TwBar.cpp	/^int CTwVarGroup::SetAttrib(int _AttribID, const char *_Value, TwBar *_Bar, struct CTwVarGroup *_VarParent, int _VarIndex)$/;"	f	class:CTwVarGroup
SetAttrib	ui/AntTweakBar/src/TwMgr.cpp	/^int CTwMgr::SetAttrib(int _AttribID, const char *_Value)$/;"	f	class:CTwMgr
SetCB	ui/AntTweakBar/src/TwMgr.cpp	/^void ANT_CALL CTwMgr::CCDStdString::SetCB(const void *_Value, void *_ClientData)$/;"	f	class:CTwMgr::CCDStdString
SetCB	ui/AntTweakBar/src/TwMgr.cpp	/^void ANT_CALL CTwMgr::CMemberProxy::SetCB(const void *_Value, void *_ClientData)$/;"	f	class:CTwMgr::CMemberProxy
SetCurrentDbgParams	ui/AntTweakBar/src/TwMgr.cpp	/^void CTwMgr::SetCurrentDbgParams(const char *dbgFile, int dbgLine)$/;"	f	class:CTwMgr
SetCursor	ui/AntTweakBar/src/TwMgr.cpp	/^void CTwMgr::SetCursor(CTwMgr::CCursor _Cursor)$/;"	f	class:CTwMgr
SetDefaults	ui/AntTweakBar/src/TwBar.cpp	/^void CTwVarAtom::SetDefaults()$/;"	f	class:CTwVarAtom
SetFont	ui/AntTweakBar/src/TwMgr.cpp	/^void CTwMgr::SetFont(const CTexFont *_Font, bool _ResizeBars)$/;"	f	class:CTwMgr
SetLastError	ui/AntTweakBar/src/TwMgr.cpp	/^void CTwMgr::SetLastError(const char *_ErrorMessage)    \/\/ _ErrorMessage must be a static string$/;"	f	class:CTwMgr
SetReadOnly	ui/AntTweakBar/src/TwBar.h	/^    virtual void            SetReadOnly(bool _ReadOnly) { for(size_t i=0; i<m_Vars.size(); ++i) if(m_Vars[i]) m_Vars[i]->SetReadOnly(_ReadOnly); }$/;"	f	struct:CTwVarGroup
SetReadOnly	ui/AntTweakBar/src/TwBar.h	/^    virtual void            SetReadOnly(bool _ReadOnly) { m_ReadOnly=_ReadOnly; if( m_Type!=TW_TYPE_BUTTON && m_SetCallback==NULL && m_Ptr==NULL ) m_ReadOnly=true; }$/;"	f	struct:CTwVarAtom
SetScissor	ui/AntTweakBar/src/TwOpenGLCore.cpp	/^void CTwGraphOpenGLCore::SetScissor(int _X0, int _Y0, int _Width, int _Height)$/;"	f	class:CTwGraphOpenGLCore
Shape	cpp/shapes.cpp	/^Shape::Shape(ColorRGB color,bool multipleColors){$/;"	f	class:Shape
Shape	shapes.h	/^struct Shape : public SimpleShape{$/;"	s
Show	ui/AntTweakBar/src/TwBar.cpp	/^bool CTwBar::Show(CTwVar *_Var)$/;"	f	class:CTwBar
Shut	ui/AntTweakBar/src/TwOpenGLCore.cpp	/^int CTwGraphOpenGLCore::Shut()$/;"	f	class:CTwGraphOpenGLCore
SimpleShape	cpp/shapes.cpp	/^SimpleShape::SimpleShape(ColorRGB color,bool multipleColors){$/;"	f	class:SimpleShape
SimpleShape	shapes.h	/^struct SimpleShape{$/;"	s
SimpleSurface	cpp/opengl/opengl.cpp	/^SimpleSurface::SimpleSurface(std::string path){ $/;"	f	class:SimpleSurface
SimpleSurface	opengl/opengl.h	/^struct SimpleSurface{$/;"	s
Sint16	ui/AntTweakBar/src/MiniSDL12.h	/^typedef signed short    Sint16;$/;"	t
Sint16	ui/AntTweakBar/src/MiniSDL13.h	/^typedef signed short    Sint16;$/;"	t
Sint32	ui/AntTweakBar/src/MiniSDL12.h	/^typedef signed int      Sint32;$/;"	t
Sint32	ui/AntTweakBar/src/MiniSDL13.h	/^typedef signed int      Sint32;$/;"	t
Sint8	ui/AntTweakBar/src/MiniSDL12.h	/^typedef signed char     Sint8;$/;"	t
Sint8	ui/AntTweakBar/src/MiniSDL13.h	/^typedef signed char     Sint8;$/;"	t
SoftBody	SoftBody.h	/^struct SoftBody{$/;"	s
SoftBody	cpp/bak/SoftBody.cpp	/^SoftBody::SoftBody(){$/;"	f	class:SoftBody
SoftDude	Rope.h	/^struct SoftDude{$/;"	s
SoftDude	cpp/bak/Rope.cpp	/^SoftDude::SoftDude(){$/;"	f	class:SoftDude
SplitString	ui/AntTweakBar/src/TwMgr.cpp	/^static void SplitString(vector<string>& _OutSplits, const char *_String, int _Width, const CTexFont *_Font)$/;"	f	file:
Start	ui/AntTweakBar/src/AntPerfTimer.h	/^        LARGE_INTEGER Start, End, Freq;$/;"	m	struct:PerfTimer
Start	ui/AntTweakBar/src/AntPerfTimer.h	/^        struct timeval Start, End;$/;"	m	struct:PerfTimer	typeref:struct:PerfTimer::timeval
StopEditInPlace	ui/AntTweakBar/src/TwBar.h	/^    void                    StopEditInPlace() { if( m_EditInPlace.m_Active ) EditInPlaceEnd(false); }$/;"	f	struct:CTwBar
StructCompare	ui/AntTweakBar/src/TwMgr.cpp	/^struct StructCompare : public binary_function<TwType, TwType, bool>$/;"	s	file:
StructSet	ui/AntTweakBar/src/TwMgr.cpp	/^typedef set<TwType, StructCompare> StructSet;$/;"	t	file:
Subtract	ui/AntTweakBar/src/TwMgr.cpp	/^bool CRect::Subtract(const CRect& _Rect, vector<CRect>& _OutRects) const$/;"	f	class:CRect
Subtract	ui/AntTweakBar/src/TwMgr.cpp	/^bool CRect::Subtract(const vector<CRect>& _Rects, vector<CRect>& _OutRects) const$/;"	f	class:CRect
SummaryCB	ui/AntTweakBar/src/TwMgr.cpp	/^void ANT_CALL CColorExt::SummaryCB(char *_SummaryString, size_t \/*_SummaryMaxLength*\/, const void *_ExtValue, void * \/*_ClientData*\/)$/;"	f	class:CColorExt
SummaryCB	ui/AntTweakBar/src/TwMgr.cpp	/^void ANT_CALL CQuaternionExt::SummaryCB(char *_SummaryString, size_t _SummaryMaxLength, const void *_ExtValue, void * \/*_ClientData*\/)$/;"	f	class:CQuaternionExt
SynchroHierarchy	ui/AntTweakBar/src/TwMgr.cpp	/^static void SynchroHierarchy(CTwVarGroup *cur, const CTwVarGroup *orig)$/;"	f	file:
TAR	ui/AntTweakBar/src/Makefile	/^TAR      	= tar -cf$/;"	m
TARGET	ui/AntTweakBar/src/Makefile	/^TARGET 		= AntTweakBar$/;"	m
TBARLIB	Makefile	/^TBARLIB = ui\/AntTweakBar\/lib\/libAntTweakBar.a$/;"	m
TClamp	ui/AntTweakBar/src/TwColors.h	/^template <typename _T> inline const _T& TClamp(const _T& _X, const _T& _Limit1, const _T& _Limit2)$/;"	f
TEXTURED_FIXED_COLOR	opengl/programs.h	/^    TEXTURED_FIXED_COLOR,$/;"	e	enum:program::EnumProgramIndices
TVal	ui/AntTweakBar/src/TwBar.h	/^    template <typename _T>  struct TVal$/;"	s	struct:CTwVarAtom
TW_API	ui/AntTweakBar/include/AntTweakBar.h	58;"	d
TW_API	ui/AntTweakBar/include/AntTweakBar.h	60;"	d
TW_API	ui/AntTweakBar/include/AntTweakBar.h	69;"	d
TW_CALL	ui/AntTweakBar/include/AntTweakBar.h	46;"	d
TW_CALL	ui/AntTweakBar/include/AntTweakBar.h	51;"	d
TW_CDECL_CALL	ui/AntTweakBar/include/AntTweakBar.h	47;"	d
TW_CDECL_CALL	ui/AntTweakBar/include/AntTweakBar.h	52;"	d
TW_COMPILE_TIME_ASSERT	ui/AntTweakBar/include/AntTweakBar.h	352;"	d
TW_CSSTRING_SIZE	ui/AntTweakBar/src/TwMgr.h	354;"	d
TW_DIRECT3D10	ui/AntTweakBar/include/AntTweakBar.h	/^    TW_DIRECT3D10       = 3,$/;"	e	enum:ETwGraphAPI
TW_DIRECT3D11	ui/AntTweakBar/include/AntTweakBar.h	/^    TW_DIRECT3D11       = 4,$/;"	e	enum:ETwGraphAPI
TW_DIRECT3D9	ui/AntTweakBar/include/AntTweakBar.h	/^    TW_DIRECT3D9        = 2,$/;"	e	enum:ETwGraphAPI
TW_EXPORT_API	ui/AntTweakBar/include/AntTweakBar.h	48;"	d
TW_EXPORT_API	ui/AntTweakBar/include/AntTweakBar.h	53;"	d
TW_GLOBAL_BAR	ui/AntTweakBar/src/TwMgr.cpp	/^CTwBar * const TW_GLOBAL_BAR = (CTwBar *)(-1);$/;"	v
TW_GLUT_CALL	ui/AntTweakBar/include/AntTweakBar.h	326;"	d
TW_GLUT_CALL	ui/AntTweakBar/include/AntTweakBar.h	328;"	d
TW_IMPORT_API	ui/AntTweakBar/include/AntTweakBar.h	49;"	d
TW_IMPORT_API	ui/AntTweakBar/include/AntTweakBar.h	54;"	d
TW_INCLUDED	ui/AntTweakBar/include/AntTweakBar.h	21;"	d
TW_KEY_BACKSPACE	ui/AntTweakBar/include/AntTweakBar.h	/^    TW_KEY_BACKSPACE    = '\\b',$/;"	e	enum:EKeySpecial
TW_KEY_CLEAR	ui/AntTweakBar/include/AntTweakBar.h	/^    TW_KEY_CLEAR        = 0x0c,$/;"	e	enum:EKeySpecial
TW_KEY_DELETE	ui/AntTweakBar/include/AntTweakBar.h	/^    TW_KEY_DELETE       = 0x7f,$/;"	e	enum:EKeySpecial
TW_KEY_DOWN	ui/AntTweakBar/include/AntTweakBar.h	/^    TW_KEY_DOWN,$/;"	e	enum:EKeySpecial
TW_KEY_END	ui/AntTweakBar/include/AntTweakBar.h	/^    TW_KEY_END,$/;"	e	enum:EKeySpecial
TW_KEY_ESCAPE	ui/AntTweakBar/include/AntTweakBar.h	/^    TW_KEY_ESCAPE       = 0x1b,$/;"	e	enum:EKeySpecial
TW_KEY_F1	ui/AntTweakBar/include/AntTweakBar.h	/^    TW_KEY_F1,$/;"	e	enum:EKeySpecial
TW_KEY_F10	ui/AntTweakBar/include/AntTweakBar.h	/^    TW_KEY_F10,$/;"	e	enum:EKeySpecial
TW_KEY_F11	ui/AntTweakBar/include/AntTweakBar.h	/^    TW_KEY_F11,$/;"	e	enum:EKeySpecial
TW_KEY_F12	ui/AntTweakBar/include/AntTweakBar.h	/^    TW_KEY_F12,$/;"	e	enum:EKeySpecial
TW_KEY_F13	ui/AntTweakBar/include/AntTweakBar.h	/^    TW_KEY_F13,$/;"	e	enum:EKeySpecial
TW_KEY_F14	ui/AntTweakBar/include/AntTweakBar.h	/^    TW_KEY_F14,$/;"	e	enum:EKeySpecial
TW_KEY_F15	ui/AntTweakBar/include/AntTweakBar.h	/^    TW_KEY_F15,$/;"	e	enum:EKeySpecial
TW_KEY_F2	ui/AntTweakBar/include/AntTweakBar.h	/^    TW_KEY_F2,$/;"	e	enum:EKeySpecial
TW_KEY_F3	ui/AntTweakBar/include/AntTweakBar.h	/^    TW_KEY_F3,$/;"	e	enum:EKeySpecial
TW_KEY_F4	ui/AntTweakBar/include/AntTweakBar.h	/^    TW_KEY_F4,$/;"	e	enum:EKeySpecial
TW_KEY_F5	ui/AntTweakBar/include/AntTweakBar.h	/^    TW_KEY_F5,$/;"	e	enum:EKeySpecial
TW_KEY_F6	ui/AntTweakBar/include/AntTweakBar.h	/^    TW_KEY_F6,$/;"	e	enum:EKeySpecial
TW_KEY_F7	ui/AntTweakBar/include/AntTweakBar.h	/^    TW_KEY_F7,$/;"	e	enum:EKeySpecial
TW_KEY_F8	ui/AntTweakBar/include/AntTweakBar.h	/^    TW_KEY_F8,$/;"	e	enum:EKeySpecial
TW_KEY_F9	ui/AntTweakBar/include/AntTweakBar.h	/^    TW_KEY_F9,$/;"	e	enum:EKeySpecial
TW_KEY_HOME	ui/AntTweakBar/include/AntTweakBar.h	/^    TW_KEY_HOME,$/;"	e	enum:EKeySpecial
TW_KEY_INSERT	ui/AntTweakBar/include/AntTweakBar.h	/^    TW_KEY_INSERT,$/;"	e	enum:EKeySpecial
TW_KEY_LAST	ui/AntTweakBar/include/AntTweakBar.h	/^    TW_KEY_LAST$/;"	e	enum:EKeySpecial
TW_KEY_LEFT	ui/AntTweakBar/include/AntTweakBar.h	/^    TW_KEY_LEFT,$/;"	e	enum:EKeySpecial
TW_KEY_PAGE_DOWN	ui/AntTweakBar/include/AntTweakBar.h	/^    TW_KEY_PAGE_DOWN,$/;"	e	enum:EKeySpecial
TW_KEY_PAGE_UP	ui/AntTweakBar/include/AntTweakBar.h	/^    TW_KEY_PAGE_UP,$/;"	e	enum:EKeySpecial
TW_KEY_PAUSE	ui/AntTweakBar/include/AntTweakBar.h	/^    TW_KEY_PAUSE        = 0x13,$/;"	e	enum:EKeySpecial
TW_KEY_RETURN	ui/AntTweakBar/include/AntTweakBar.h	/^    TW_KEY_RETURN       = '\\r',$/;"	e	enum:EKeySpecial
TW_KEY_RIGHT	ui/AntTweakBar/include/AntTweakBar.h	/^    TW_KEY_RIGHT,$/;"	e	enum:EKeySpecial
TW_KEY_SPACE	ui/AntTweakBar/include/AntTweakBar.h	/^    TW_KEY_SPACE        = ' ',$/;"	e	enum:EKeySpecial
TW_KEY_TAB	ui/AntTweakBar/include/AntTweakBar.h	/^    TW_KEY_TAB          = '\\t',$/;"	e	enum:EKeySpecial
TW_KEY_UP	ui/AntTweakBar/include/AntTweakBar.h	/^    TW_KEY_UP           = 273,      \/\/ same codes and order as SDL 1.2 keysym.sym$/;"	e	enum:EKeySpecial
TW_KMOD_ALT	ui/AntTweakBar/include/AntTweakBar.h	/^    TW_KMOD_ALT         = 0x0100,$/;"	e	enum:ETwKeyModifier
TW_KMOD_CTRL	ui/AntTweakBar/include/AntTweakBar.h	/^    TW_KMOD_CTRL        = 0x00c0,$/;"	e	enum:ETwKeyModifier
TW_KMOD_META	ui/AntTweakBar/include/AntTweakBar.h	/^    TW_KMOD_META        = 0x0c00$/;"	e	enum:ETwKeyModifier
TW_KMOD_NONE	ui/AntTweakBar/include/AntTweakBar.h	/^    TW_KMOD_NONE        = 0x0000,   \/\/ same codes as SDL keysym.mod$/;"	e	enum:ETwKeyModifier
TW_KMOD_SHIFT	ui/AntTweakBar/include/AntTweakBar.h	/^    TW_KMOD_SHIFT       = 0x0003,$/;"	e	enum:ETwKeyModifier
TW_MASTER_WINDOW_ID	ui/AntTweakBar/src/TwMgr.cpp	/^const int TW_MASTER_WINDOW_ID = 0;$/;"	v
TW_MOUSE_LEFT	ui/AntTweakBar/include/AntTweakBar.h	/^    TW_MOUSE_LEFT       = 1,    \/\/ same code as SDL_BUTTON_LEFT$/;"	e	enum:ETwMouseButtonID
TW_MOUSE_MIDDLE	ui/AntTweakBar/include/AntTweakBar.h	/^    TW_MOUSE_MIDDLE     = 2,    \/\/ same code as SDL_BUTTON_MIDDLE$/;"	e	enum:ETwMouseButtonID
TW_MOUSE_MOTION	ui/AntTweakBar/src/TwMgr.cpp	/^ETwMouseAction   TW_MOUSE_MOTION = (ETwMouseAction)(-2);$/;"	v
TW_MOUSE_NA	ui/AntTweakBar/src/TwMgr.cpp	/^ETwMouseButtonID TW_MOUSE_NA = (ETwMouseButtonID)(-1);$/;"	v
TW_MOUSE_NOMOTION	ui/AntTweakBar/src/TwMgr.cpp	/^const int        TW_MOUSE_NOMOTION = -1;$/;"	v
TW_MOUSE_PRESSED	ui/AntTweakBar/include/AntTweakBar.h	/^    TW_MOUSE_PRESSED  $/;"	e	enum:ETwMouseAction
TW_MOUSE_RELEASED	ui/AntTweakBar/include/AntTweakBar.h	/^    TW_MOUSE_RELEASED,$/;"	e	enum:ETwMouseAction
TW_MOUSE_RIGHT	ui/AntTweakBar/include/AntTweakBar.h	/^    TW_MOUSE_RIGHT      = 3     \/\/ same code as SDL_BUTTON_RIGHT$/;"	e	enum:ETwMouseButtonID
TW_MOUSE_WHEEL	ui/AntTweakBar/src/TwMgr.cpp	/^ETwMouseAction   TW_MOUSE_WHEEL = (ETwMouseAction)(-3);$/;"	v
TW_OPENGL	ui/AntTweakBar/include/AntTweakBar.h	/^    TW_OPENGL           = 1,$/;"	e	enum:ETwGraphAPI
TW_OPENGL_CORE	ui/AntTweakBar/include/AntTweakBar.h	/^    TW_OPENGL_CORE      = 5$/;"	e	enum:ETwGraphAPI
TW_PARAM_CSTRING	ui/AntTweakBar/include/AntTweakBar.h	/^    TW_PARAM_CSTRING \/\/ Null-terminated array of char (ie, c-string)$/;"	e	enum:ETwParamValueType
TW_PARAM_DOUBLE	ui/AntTweakBar/include/AntTweakBar.h	/^    TW_PARAM_DOUBLE,$/;"	e	enum:ETwParamValueType
TW_PARAM_FLOAT	ui/AntTweakBar/include/AntTweakBar.h	/^    TW_PARAM_FLOAT,$/;"	e	enum:ETwParamValueType
TW_PARAM_INT32	ui/AntTweakBar/include/AntTweakBar.h	/^    TW_PARAM_INT32,$/;"	e	enum:ETwParamValueType
TW_STATE_ERROR	ui/AntTweakBar/src/TwMgr.h	/^    TW_STATE_ERROR       = 0$/;"	e	enum:ETwState
TW_STATE_HIDDEN	ui/AntTweakBar/src/TwMgr.h	/^    TW_STATE_HIDDEN      = 3,$/;"	e	enum:ETwState
TW_STATE_ICONIFIED	ui/AntTweakBar/src/TwMgr.h	/^    TW_STATE_ICONIFIED   = 2,$/;"	e	enum:ETwState
TW_STATE_SHOWN	ui/AntTweakBar/src/TwMgr.h	/^    TW_STATE_SHOWN       = 1,$/;"	e	enum:ETwState
TW_STATE_UNICONIFIED	ui/AntTweakBar/src/TwMgr.h	/^    TW_STATE_UNICONIFIED = 4,$/;"	e	enum:ETwState
TW_TYPE_BOOL16	ui/AntTweakBar/include/AntTweakBar.h	/^    TW_TYPE_BOOL16,$/;"	e	enum:ETwType
TW_TYPE_BOOL32	ui/AntTweakBar/include/AntTweakBar.h	/^    TW_TYPE_BOOL32,$/;"	e	enum:ETwType
TW_TYPE_BOOL8	ui/AntTweakBar/include/AntTweakBar.h	/^    TW_TYPE_BOOL8   = 2,$/;"	e	enum:ETwType
TW_TYPE_BOOLCPP	ui/AntTweakBar/include/AntTweakBar.h	/^    TW_TYPE_BOOLCPP = 1,$/;"	e	enum:ETwType
TW_TYPE_BUTTON	ui/AntTweakBar/src/TwMgr.h	/^const TwType TW_TYPE_BUTTON         = TwType(0xfff6);$/;"	v
TW_TYPE_CDSTDSTRING	ui/AntTweakBar/src/TwMgr.h	/^const TwType TW_TYPE_CDSTDSTRING    = TwType(0xfff7);$/;"	v
TW_TYPE_CDSTRING	ui/AntTweakBar/include/AntTweakBar.h	/^    TW_TYPE_CDSTRING,   \/\/ Null-terminated C Dynamic String (pointer to an array of char dynamically allocated with malloc\/realloc\/strdup)$/;"	e	enum:ETwType
TW_TYPE_CHAR	ui/AntTweakBar/include/AntTweakBar.h	/^    TW_TYPE_CHAR,$/;"	e	enum:ETwType
TW_TYPE_COLOR32	ui/AntTweakBar/include/AntTweakBar.h	/^    TW_TYPE_COLOR32,    \/\/ 32 bits color. Order is RGBA if API is OpenGL or Direct3D10, and inversed if API is Direct3D9 (can be modified by defining 'colorOrder=...', see doc)$/;"	e	enum:ETwType
TW_TYPE_COLOR3F	ui/AntTweakBar/include/AntTweakBar.h	/^    TW_TYPE_COLOR3F,    \/\/ 3 floats color. Order is RGB.$/;"	e	enum:ETwType
TW_TYPE_COLOR4F	ui/AntTweakBar/include/AntTweakBar.h	/^    TW_TYPE_COLOR4F,    \/\/ 4 floats color. Order is RGBA.$/;"	e	enum:ETwType
TW_TYPE_CSSTRING	ui/AntTweakBar/include/AntTweakBar.h	137;"	d
TW_TYPE_CSSTRING_BASE	ui/AntTweakBar/src/TwMgr.h	/^const TwType TW_TYPE_CSSTRING_BASE  = TW_TYPE_CSSTRING(0);          \/\/ defined as 0x30000000 (see AntTweakBar.h)$/;"	v
TW_TYPE_CSSTRING_MAX	ui/AntTweakBar/src/TwMgr.h	/^const TwType TW_TYPE_CSSTRING_MAX   = TW_TYPE_CSSTRING(0xfffffff);$/;"	v
TW_TYPE_CUSTOM_BASE	ui/AntTweakBar/src/TwMgr.h	/^const TwType TW_TYPE_CUSTOM_BASE    = TwType(0x40000000);$/;"	v
TW_TYPE_DIR3D	ui/AntTweakBar/include/AntTweakBar.h	/^    TW_TYPE_DIR3D       \/\/ direction vector represented by 3 doubles$/;"	e	enum:ETwType
TW_TYPE_DIR3F	ui/AntTweakBar/include/AntTweakBar.h	/^    TW_TYPE_DIR3F,      \/\/ direction vector represented by 3 floats$/;"	e	enum:ETwType
TW_TYPE_DOUBLE	ui/AntTweakBar/include/AntTweakBar.h	/^    TW_TYPE_DOUBLE,$/;"	e	enum:ETwType
TW_TYPE_ENUM_BASE	ui/AntTweakBar/src/TwMgr.h	/^const TwType TW_TYPE_ENUM_BASE      = TwType(0x20000000);$/;"	v
TW_TYPE_FLOAT	ui/AntTweakBar/include/AntTweakBar.h	/^    TW_TYPE_FLOAT,$/;"	e	enum:ETwType
TW_TYPE_HELP_ATOM	ui/AntTweakBar/src/TwMgr.h	/^const TwType TW_TYPE_HELP_ATOM      = TwType(0xfff3);$/;"	v
TW_TYPE_HELP_GRP	ui/AntTweakBar/src/TwMgr.h	/^const TwType TW_TYPE_HELP_GRP       = TwType(0xfff2);$/;"	v
TW_TYPE_HELP_HEADER	ui/AntTweakBar/src/TwMgr.h	/^const TwType TW_TYPE_HELP_HEADER    = TwType(0xfff4);$/;"	v
TW_TYPE_HELP_STRUCT	ui/AntTweakBar/src/TwMgr.h	/^const TwType TW_TYPE_HELP_STRUCT    = TwType(0xfff5);$/;"	v
TW_TYPE_INT16	ui/AntTweakBar/include/AntTweakBar.h	/^    TW_TYPE_INT16,$/;"	e	enum:ETwType
TW_TYPE_INT32	ui/AntTweakBar/include/AntTweakBar.h	/^    TW_TYPE_INT32,$/;"	e	enum:ETwType
TW_TYPE_INT8	ui/AntTweakBar/include/AntTweakBar.h	/^    TW_TYPE_INT8,$/;"	e	enum:ETwType
TW_TYPE_QUAT4D	ui/AntTweakBar/include/AntTweakBar.h	/^    TW_TYPE_QUAT4D,     \/\/ 4 doubles encoding a quaternion {qx,qy,qz,qs}$/;"	e	enum:ETwType
TW_TYPE_QUAT4F	ui/AntTweakBar/include/AntTweakBar.h	/^    TW_TYPE_QUAT4F = TW_TYPE_CDSTRING+2, \/\/ 4 floats encoding a quaternion {qx,qy,qz,qs}$/;"	e	enum:ETwType
TW_TYPE_SHORTCUT	ui/AntTweakBar/src/TwMgr.h	/^const TwType TW_TYPE_SHORTCUT       = TwType(0xfff1);$/;"	v
TW_TYPE_STDSTRING	ui/AntTweakBar/include/AntTweakBar.h	/^    TW_TYPE_STDSTRING = (0x2ffe0000+sizeof(std::string)),  \/\/ VS2010 C++ STL string (std::string)$/;"	e	enum:ETwType
TW_TYPE_STDSTRING_VS2008	ui/AntTweakBar/src/TwMgr.h	/^const TwType TW_TYPE_STDSTRING_VS2008 = TwType(0x2fff0000);$/;"	v
TW_TYPE_STDSTRING_VS2010	ui/AntTweakBar/src/TwMgr.h	/^const TwType TW_TYPE_STDSTRING_VS2010 = TwType(0x2ffe0000);$/;"	v
TW_TYPE_STRUCT_BASE	ui/AntTweakBar/src/TwMgr.h	/^const TwType TW_TYPE_STRUCT_BASE    = TwType(0x10000000);$/;"	v
TW_TYPE_UINT16	ui/AntTweakBar/include/AntTweakBar.h	/^    TW_TYPE_UINT16,$/;"	e	enum:ETwType
TW_TYPE_UINT32	ui/AntTweakBar/include/AntTweakBar.h	/^    TW_TYPE_UINT32,$/;"	e	enum:ETwType
TW_TYPE_UINT8	ui/AntTweakBar/include/AntTweakBar.h	/^    TW_TYPE_UINT8,$/;"	e	enum:ETwType
TW_TYPE_UNDEF	ui/AntTweakBar/include/AntTweakBar.h	/^    TW_TYPE_UNDEF   = 0,$/;"	e	enum:ETwType
TW_VERSION	ui/AntTweakBar/include/AntTweakBar.h	25;"	d
TZ	ui/AntTweakBar/src/AntPerfTimer.h	/^        struct timezone TZ;$/;"	m	struct:PerfTimer	typeref:struct:PerfTimer::timezone
TexturedFixedColor	bak/programs.cpp	/^  TexturedFixedColor::TexturedFixedColor(){$/;"	f	class:program::TexturedFixedColor
TexturedFixedColor	cpp/opengl/programs.cpp	/^  TexturedFixedColor::TexturedFixedColor(){$/;"	f	class:program::TexturedFixedColor
TexturedFixedColor	opengl/programs.h	/^  struct TexturedFixedColor : public DummyTextured, public FixedColor {$/;"	s	namespace:program
TexturedShape	shapes.h	/^struct TexturedShape : public Shape {$/;"	s
ToClient	ui/AntTweakBar/src/TwMgr.cpp	/^std::string& CTwMgr::CClientStdString::ToClient() $/;"	f	class:CTwMgr::CClientStdString
ToLib	ui/AntTweakBar/src/TwMgr.cpp	/^std::string& CTwMgr::CLibStdString::ToLib()$/;"	f	class:CTwMgr::CLibStdString
ToNormScreenX	ui/AntTweakBar/src/TwOpenGLCore.cpp	/^static inline float ToNormScreenX(float x, int wndWidth)$/;"	f	file:
ToNormScreenY	ui/AntTweakBar/src/TwOpenGLCore.cpp	/^static inline float ToNormScreenY(float y, int wndHeight)$/;"	f	file:
TranslateKey	ui/AntTweakBar/src/TwMgr.cpp	/^static int TranslateKey(int _Key, int _Modifiers)$/;"	f	file:
TwAddButton	ui/AntTweakBar/src/TwMgr.cpp	/^int ANT_CALL TwAddButton(TwBar *_Bar, const char *_Name, TwButtonCallback _Callback, void *_ClientData, const char *_Def)$/;"	f
TwAddSeparator	ui/AntTweakBar/src/TwMgr.cpp	/^int ANT_CALL TwAddSeparator(TwBar *_Bar, const char *_Name, const char *_Def)$/;"	f
TwAddVarCB	ui/AntTweakBar/src/TwMgr.cpp	/^int ANT_CALL TwAddVarCB(TwBar *_Bar, const char *_Name, ETwType _Type, TwSetVarCallback _SetCallback, TwGetVarCallback _GetCallback, void *_ClientData, const char *_Def)$/;"	f
TwAddVarRO	ui/AntTweakBar/src/TwMgr.cpp	/^int ANT_CALL TwAddVarRO(TwBar *_Bar, const char *_Name, ETwType _Type, const void *_Var, const char *_Def)$/;"	f
TwAddVarRW	ui/AntTweakBar/src/TwMgr.cpp	/^int ANT_CALL TwAddVarRW(TwBar *_Bar, const char *_Name, ETwType _Type, void *_Var, const char *_Def)$/;"	f
TwBar	ui/AntTweakBar/include/AntTweakBar.h	/^typedef struct CTwBar TwBar; \/\/ structure CTwBar is not exposed.$/;"	t	typeref:struct:CTwBar
TwButtonCallback	ui/AntTweakBar/include/AntTweakBar.h	/^typedef void (TW_CALL * TwButtonCallback)(void *clientData);$/;"	t
TwCopyCDStringToClient	ui/AntTweakBar/include/AntTweakBar.h	/^typedef void (TW_CALL * TwCopyCDStringToClient)(char **destinationClientStringPtr, const char *sourceString);$/;"	t
TwCopyCDStringToClientFunc	ui/AntTweakBar/src/TwMgr.cpp	/^void ANT_CALL TwCopyCDStringToClientFunc(TwCopyCDStringToClient copyCDStringToClientFunc)$/;"	f
TwCopyCDStringToLibrary	ui/AntTweakBar/src/TwMgr.cpp	/^void ANT_CALL TwCopyCDStringToLibrary(char **destinationLibraryStringPtr, const char *sourceClientString)$/;"	f
TwCopyStdStringToClient	ui/AntTweakBar/include/AntTweakBar.h	/^typedef void (TW_CALL * TwCopyStdStringToClient)(std::string& destinationClientString, const std::string& sourceString);$/;"	t
TwCopyStdStringToClientFunc	ui/AntTweakBar/src/TwMgr.cpp	/^void ANT_CALL TwCopyStdStringToClientFunc(TwCopyStdStringToClient copyStdStringToClientFunc)$/;"	f
TwCopyStdStringToLibrary	ui/AntTweakBar/src/TwMgr.cpp	/^void ANT_CALL TwCopyStdStringToLibrary(std::string& destLibraryString, const std::string& srcClientString)$/;"	f
TwCopyVarFromExtCallback	ui/AntTweakBar/src/TwMgr.h	/^typedef void (ANT_CALL *TwCopyVarFromExtCallback)(void *structValue, const void *structExtValue, unsigned int structExtMemberIndex, void *clientData);$/;"	t
TwCopyVarToExtCallback	ui/AntTweakBar/src/TwMgr.h	/^typedef void (ANT_CALL *TwCopyVarToExtCallback)(const void *structValue, void *structExtValue, unsigned int structExtMemberIndex, void *clientData);$/;"	t
TwCreateGraph	ui/AntTweakBar/src/TwMgr.cpp	/^static int TwCreateGraph(ETwGraphAPI _GraphAPI)$/;"	f	file:
TwCustomDrawCallback	ui/AntTweakBar/src/TwMgr.h	/^typedef void (ANT_CALL *TwCustomDrawCallback)(int w, int h, void *structExtValue, void *clientData, TwBar *bar, CTwVarGroup *varGrp);$/;"	t
TwCustomMouseButtonCallback	ui/AntTweakBar/src/TwMgr.h	/^typedef bool (ANT_CALL *TwCustomMouseButtonCallback)(TwMouseButtonID button, bool pressed, int mouseX, int mouseY, int w, int h, void *structExtValue, void *clientData, TwBar *bar, CTwVarGroup *varGrp);$/;"	t
TwCustomMouseLeaveCallback	ui/AntTweakBar/src/TwMgr.h	/^typedef void (ANT_CALL *TwCustomMouseLeaveCallback)(void *structExtValue, void *clientData, TwBar *bar);$/;"	t
TwCustomMouseMotionCallback	ui/AntTweakBar/src/TwMgr.h	/^typedef bool (ANT_CALL *TwCustomMouseMotionCallback)(int mouseX, int mouseY, int w, int h, void *structExtValue, void *clientData, TwBar *bar, CTwVarGroup *varGrp);$/;"	t
TwDefine	ui/AntTweakBar/src/TwMgr.cpp	/^int ANT_CALL TwDefine(const char *_Def)$/;"	f
TwDefineEnum	ui/AntTweakBar/src/TwMgr.cpp	/^TwType ANT_CALL TwDefineEnum(const char *_Name, const TwEnumVal *_EnumValues, unsigned int _NbValues)$/;"	f
TwDefineEnumFromString	ui/AntTweakBar/src/TwMgr.cpp	/^TwType TW_CALL TwDefineEnumFromString(const char *_Name, const char *_EnumString)$/;"	f
TwDefineStruct	ui/AntTweakBar/src/TwMgr.cpp	/^TwType ANT_CALL TwDefineStruct(const char *_StructName, const TwStructMember *_StructMembers, unsigned int _NbMembers, size_t _StructSize, TwSummaryCallback _SummaryCallback, void *_SummaryClientData)$/;"	f
TwDefineStructExt	ui/AntTweakBar/src/TwMgr.cpp	/^TwType ANT_CALL TwDefineStructExt(const char *_StructName, const TwStructMember *_StructExtMembers, unsigned int _NbExtMembers, size_t _StructSize, size_t _StructExtSize, TwStructExtInitCallback _StructExtInitCallback, TwCopyVarFromExtCallback _CopyVarFromExtCallback, TwCopyVarToExtCallback _CopyVarToExtCallback, TwSummaryCallback _SummaryCallback, void *_ClientData, const char *_Help)$/;"	f
TwDeleteAllBars	ui/AntTweakBar/src/TwMgr.cpp	/^int ANT_CALL TwDeleteAllBars()$/;"	f
TwDeleteBar	ui/AntTweakBar/src/TwMgr.cpp	/^int ANT_CALL TwDeleteBar(TwBar *_Bar)$/;"	f
TwDeleteDefaultFonts	ui/AntTweakBar/src/TwFonts.cpp	/^void TwDeleteDefaultFonts()$/;"	f
TwDraw	ui/AntTweakBar/src/TwMgr.cpp	/^int ANT_CALL TwDraw()$/;"	f
TwEnumVal	ui/AntTweakBar/include/AntTweakBar.h	/^} TwEnumVal;$/;"	t	typeref:struct:CTwEnumVal
TwErrorHandler	ui/AntTweakBar/include/AntTweakBar.h	/^typedef void (TW_CALL * TwErrorHandler)(const char *errorMessage);$/;"	t
TwEventCharGLFW	ui/AntTweakBar/include/AntTweakBar.h	313;"	d
TwEventKeyGLFW	ui/AntTweakBar/include/AntTweakBar.h	312;"	d
TwEventMouseButtonGLFW	ui/AntTweakBar/include/AntTweakBar.h	311;"	d
TwEventMousePosGLFW	ui/AntTweakBar/include/AntTweakBar.h	314;"	d
TwEventMousePosGLFW	ui/AntTweakBar/include/AntTweakBar.h	320;"	d
TwEventMouseWheelGLFW	ui/AntTweakBar/include/AntTweakBar.h	315;"	d
TwEventMouseWheelGLFW	ui/AntTweakBar/include/AntTweakBar.h	321;"	d
TwEventSDL	ui/AntTweakBar/src/TwEventSDL.c	/^int TW_CALL TwEventSDL(const void *sdlEvent, unsigned char majorVersion, unsigned char minorVersion)$/;"	f
TwEventSDL12	ui/AntTweakBar/src/TwEventSDL12.c	/^int TW_CALL TwEventSDL12(const void *sdlEvent)$/;"	f
TwEventSDL13	ui/AntTweakBar/src/TwEventSDL13.c	/^int TW_CALL TwEventSDL13(const void *sdlEvent)$/;"	f
TwEventWin32	ui/AntTweakBar/include/AntTweakBar.h	298;"	d
TwFreeAsyncDrawing	ui/AntTweakBar/src/TwMgr.cpp	/^static inline int TwFreeAsyncDrawing()$/;"	f	file:
TwGenerateDefaultFonts	ui/AntTweakBar/src/TwFonts.cpp	/^void TwGenerateDefaultFonts(float _Scaling)$/;"	f
TwGenerateFont	ui/AntTweakBar/src/TwFonts.cpp	/^CTexFont *TwGenerateFont(const unsigned char *_Bitmap, int _BmWidth, int _BmHeight, float _Scaling)$/;"	f
TwGetBarByIndex	ui/AntTweakBar/src/TwMgr.cpp	/^TwBar * ANT_CALL TwGetBarByIndex(int index)$/;"	f
TwGetBarByName	ui/AntTweakBar/src/TwMgr.cpp	/^TwBar * ANT_CALL TwGetBarByName(const char *name)$/;"	f
TwGetBarCount	ui/AntTweakBar/src/TwMgr.cpp	/^int ANT_CALL TwGetBarCount()$/;"	f
TwGetBarName	ui/AntTweakBar/src/TwMgr.cpp	/^const char * ANT_CALL TwGetBarName(const TwBar *_Bar)$/;"	f
TwGetBottomBar	ui/AntTweakBar/src/TwMgr.cpp	/^TwBar* ANT_CALL TwGetBottomBar()$/;"	f
TwGetCurrentWindow	ui/AntTweakBar/src/TwMgr.cpp	/^int ANT_CALL TwGetCurrentWindow()$/;"	f
TwGetKeyCode	ui/AntTweakBar/src/TwMgr.cpp	/^bool TwGetKeyCode(int *_Code, int *_Modif, const char *_String)$/;"	f
TwGetKeyString	ui/AntTweakBar/src/TwMgr.cpp	/^bool TwGetKeyString(std::string *_String, int _Code, int _Modif)$/;"	f
TwGetLastError	ui/AntTweakBar/src/TwMgr.cpp	/^const char *ANT_CALL TwGetLastError()$/;"	f
TwGetParam	ui/AntTweakBar/src/TwMgr.cpp	/^int ANT_CALL TwGetParam(TwBar *bar, const char *varName, const char *paramName, TwParamValueType paramValueType, unsigned int outValueMaxCount, void *outValues)$/;"	f
TwGetTopBar	ui/AntTweakBar/src/TwMgr.cpp	/^TwBar * ANT_CALL TwGetTopBar()$/;"	f
TwGetVarCallback	ui/AntTweakBar/include/AntTweakBar.h	/^typedef void (TW_CALL * TwGetVarCallback)(void *value, void *clientData);$/;"	t
TwGlobalError	ui/AntTweakBar/src/TwMgr.cpp	/^void ANT_CALL TwGlobalError(const char *_ErrorMessage)  \/\/ to be called when g_TwMasterMgr is not created$/;"	f
TwGraphAPI	ui/AntTweakBar/include/AntTweakBar.h	/^} TwGraphAPI;$/;"	t	typeref:enum:ETwGraphAPI
TwHandleErrors	ui/AntTweakBar/src/TwMgr.cpp	/^void ANT_CALL TwHandleErrors(TwErrorHandler _ErrorHandler)$/;"	f
TwHandleErrors	ui/AntTweakBar/src/TwMgr.cpp	/^void ANT_CALL TwHandleErrors(TwErrorHandler _ErrorHandler, int _BreakOnError)$/;"	f
TwInit	ui/AntTweakBar/src/TwMgr.cpp	/^int ANT_CALL TwInit(ETwGraphAPI _GraphAPI, void *_Device)$/;"	f
TwInitMgr	ui/AntTweakBar/src/TwMgr.cpp	/^static int TwInitMgr()$/;"	f	file:
TwKeyModifier	ui/AntTweakBar/include/AntTweakBar.h	/^} TwKeyModifier;$/;"	t	typeref:enum:ETwKeyModifier
TwKeyPressed	ui/AntTweakBar/src/TwMgr.cpp	/^int ANT_CALL TwKeyPressed(int _Key, int _Modifiers)$/;"	f
TwKeySpecial	ui/AntTweakBar/include/AntTweakBar.h	/^} TwKeySpecial;$/;"	t	typeref:enum:EKeySpecial
TwKeyTest	ui/AntTweakBar/src/TwMgr.cpp	/^int ANT_CALL TwKeyTest(int _Key, int _Modifiers)$/;"	f
TwMouseAction	ui/AntTweakBar/include/AntTweakBar.h	/^} TwMouseAction;$/;"	t	typeref:enum:ETwMouseAction
TwMouseButton	ui/AntTweakBar/src/TwMgr.cpp	/^int ANT_CALL TwMouseButton(ETwMouseAction _EventType, TwMouseButtonID _Button)$/;"	f
TwMouseButtonID	ui/AntTweakBar/include/AntTweakBar.h	/^} TwMouseButtonID;$/;"	t	typeref:enum:ETwMouseButtonID
TwMouseEvent	ui/AntTweakBar/src/TwMgr.cpp	/^static int TwMouseEvent(ETwMouseAction _EventType, TwMouseButtonID _Button, int _MouseX, int _MouseY, int _WheelPos)$/;"	f	file:
TwMouseMotion	ui/AntTweakBar/src/TwMgr.cpp	/^int ANT_CALL TwMouseMotion(int _MouseX, int _MouseY)$/;"	f
TwMouseWheel	ui/AntTweakBar/src/TwMgr.cpp	/^int ANT_CALL TwMouseWheel(int _Pos)$/;"	f
TwNewBar	ui/AntTweakBar/src/TwMgr.cpp	/^TwBar *ANT_CALL TwNewBar(const char *_Name)$/;"	f
TwParamValueType	ui/AntTweakBar/include/AntTweakBar.h	/^} TwParamValueType;$/;"	t	typeref:enum:ETwParamValueType
TwRefreshBar	ui/AntTweakBar/src/TwMgr.cpp	/^int ANT_CALL TwRefreshBar(TwBar *bar)$/;"	f
TwRemoveAllVars	ui/AntTweakBar/src/TwMgr.cpp	/^int ANT_CALL TwRemoveAllVars(TwBar *_Bar)$/;"	f
TwRemoveVar	ui/AntTweakBar/src/TwMgr.cpp	/^int ANT_CALL TwRemoveVar(TwBar *_Bar, const char *_Name)$/;"	f
TwSetBarState	ui/AntTweakBar/src/TwMgr.cpp	/^int ANT_CALL TwSetBarState(TwBar *_Bar, TwState _State)$/;"	f
TwSetBottomBar	ui/AntTweakBar/src/TwMgr.cpp	/^int ANT_CALL TwSetBottomBar(const TwBar *_Bar)$/;"	f
TwSetCurrentWindow	ui/AntTweakBar/src/TwMgr.cpp	/^int ANT_CALL TwSetCurrentWindow(int wndID)$/;"	f
TwSetLastError	ui/AntTweakBar/src/TwMgr.cpp	/^int ANT_CALL TwSetLastError(const char *_StaticErrorMessage)$/;"	f
TwSetParam	ui/AntTweakBar/src/TwMgr.cpp	/^int ANT_CALL TwSetParam(TwBar *bar, const char *varName, const char *paramName, TwParamValueType paramValueType, unsigned int inValueCount, const void *inValues)$/;"	f
TwSetTopBar	ui/AntTweakBar/src/TwMgr.cpp	/^int ANT_CALL TwSetTopBar(const TwBar *_Bar)$/;"	f
TwSetVarCallback	ui/AntTweakBar/include/AntTweakBar.h	/^typedef void (TW_CALL * TwSetVarCallback)(const void *value, void *clientData);$/;"	t
TwState	ui/AntTweakBar/src/TwMgr.h	/^} TwState;$/;"	t	typeref:enum:ETwState
TwStructExtInitCallback	ui/AntTweakBar/src/TwMgr.h	/^typedef void (ANT_CALL *TwStructExtInitCallback)(void *structExtValue, void *clientData);$/;"	t
TwStructMember	ui/AntTweakBar/include/AntTweakBar.h	/^} TwStructMember;$/;"	t	typeref:struct:CTwStructMember
TwSummaryCallback	ui/AntTweakBar/include/AntTweakBar.h	/^typedef void (TW_CALL * TwSummaryCallback)(char *summaryString, size_t summaryMaxLength, const void *value, void *clientData);$/;"	t
TwTerminate	ui/AntTweakBar/src/TwMgr.cpp	/^int ANT_CALL TwTerminate()$/;"	f
TwType	ui/AntTweakBar/include/AntTweakBar.h	/^} TwType;$/;"	t	typeref:enum:ETwType
TwWindowExists	ui/AntTweakBar/src/TwMgr.cpp	/^int ANT_CALL TwWindowExists(int wndID)$/;"	f
TwWindowSize	ui/AntTweakBar/src/TwMgr.cpp	/^int ANT_CALL TwWindowSize(int _Width, int _Height)$/;"	f
Type	ui/AntTweakBar/include/AntTweakBar.h	/^    TwType        Type;$/;"	m	struct:CTwStructMember
UIDEP	Makefile	/^UIDEP = $(TBARLIB)$/;"	m
USE_ANTBAR	Makefile	/^USE_ANTBAR = 1$/;"	m
USE_GLES	Makefile	/^USE_GLES=1$/;"	m
USE_MINI_SDL	ui/AntTweakBar/examples/TwGLCoreSDL.c	22;"	d	file:
UVal	ui/AntTweakBar/src/TwBar.h	/^    union UVal$/;"	u	struct:CTwVarAtom
Uint16	ui/AntTweakBar/src/MiniSDL12.h	/^typedef unsigned short  Uint16;$/;"	t
Uint16	ui/AntTweakBar/src/MiniSDL13.h	/^typedef unsigned short  Uint16;$/;"	t
Uint32	ui/AntTweakBar/src/MiniSDL12.h	/^typedef unsigned int    Uint32;$/;"	t
Uint32	ui/AntTweakBar/src/MiniSDL13.h	/^typedef unsigned int    Uint32;$/;"	t
Uint8	ui/AntTweakBar/src/MiniSDL12.h	/^typedef unsigned char   Uint8;$/;"	t
Uint8	ui/AntTweakBar/src/MiniSDL13.h	/^typedef unsigned char   Uint8;$/;"	t
UnHighlightLine	ui/AntTweakBar/src/TwBar.h	/^    void                    UnHighlightLine() { m_HighlightedLine = -1; NotUpToDate(); } \/\/ used by PopupCallback$/;"	f	struct:CTwBar
UnbindFont	ui/AntTweakBar/src/TwOpenGLCore.cpp	/^static void UnbindFont(GLuint _FontTexID)$/;"	f	file:
Unhide	ui/AntTweakBar/src/TwMgr.cpp	/^void CTwMgr::Unhide(TwBar *_Bar)$/;"	f	class:CTwMgr
UninitRender	ui/AntTweakBar/examples/TwGLCoreSDL.c	/^void UninitRender()$/;"	f
UnloadOpenGLCore	ui/AntTweakBar/src/LoadOGLCore.cpp	/^    int UnloadOpenGLCore()$/;"	f
UnrollCDStdString	ui/AntTweakBar/src/TwMgr.cpp	/^void CTwMgr::UnrollCDStdString(std::vector<CCDStdStringRecord>& _Records, TwType _Type, void *_Data)$/;"	f	class:CTwMgr
UnusedBits1	ui/AntTweakBar/src/MiniSDL12.h	/^    Uint32 UnusedBits1  :6;$/;"	m	struct:SDL_VideoInfo
UnusedBits1	ui/AntTweakBar/src/MiniSDL13.h	/^    Uint32 UnusedBits1  :6;$/;"	m	struct:SDL_VideoInfo
UnusedBits2	ui/AntTweakBar/src/MiniSDL12.h	/^    Uint32 UnusedBits2  :1;$/;"	m	struct:SDL_VideoInfo
UnusedBits2	ui/AntTweakBar/src/MiniSDL13.h	/^    Uint32 UnusedBits2  :1;$/;"	m	struct:SDL_VideoInfo
UnusedBits3	ui/AntTweakBar/src/MiniSDL12.h	/^    Uint32 UnusedBits3  :16;$/;"	m	struct:SDL_VideoInfo
UnusedBits3	ui/AntTweakBar/src/MiniSDL13.h	/^    Uint32 UnusedBits3  :16;$/;"	m	struct:SDL_VideoInfo
Update	ui/AntTweakBar/src/TwBar.cpp	/^void CTwBar::Update()$/;"	f	class:CTwBar
UpdateColors	ui/AntTweakBar/src/TwBar.cpp	/^void CTwBar::UpdateColors()$/;"	f	class:CTwBar
UpdateHelpBar	ui/AntTweakBar/src/TwMgr.cpp	/^void CTwMgr::UpdateHelpBar()$/;"	f	class:CTwMgr
VALUES_WIDTH_FIT	ui/AntTweakBar/src/TwBar.h	/^    enum EValuesWidthFit    { VALUES_WIDTH_FIT = -5555 };$/;"	e	enum:CTwBar::EValuesWidthFit
VA_DECIMAL	ui/AntTweakBar/src/TwBar.cpp	/^    VA_DECIMAL, \/\/ for backward compatibility$/;"	e	enum:EVarAtomAttribs	file:
VA_ENUM	ui/AntTweakBar/src/TwBar.cpp	/^    VA_ENUM,$/;"	e	enum:EVarAtomAttribs	file:
VA_FALSE	ui/AntTweakBar/src/TwBar.cpp	/^    VA_FALSE,$/;"	e	enum:EVarAtomAttribs	file:
VA_HEXA	ui/AntTweakBar/src/TwBar.cpp	/^    VA_HEXA,$/;"	e	enum:EVarAtomAttribs	file:
VA_KEY_DECR	ui/AntTweakBar/src/TwBar.cpp	/^    VA_KEY_DECR,$/;"	e	enum:EVarAtomAttribs	file:
VA_KEY_INCR	ui/AntTweakBar/src/TwBar.cpp	/^    VA_KEY_INCR = V_ENDTAG+1,$/;"	e	enum:EVarAtomAttribs	file:
VA_MAX	ui/AntTweakBar/src/TwBar.cpp	/^    VA_MAX,$/;"	e	enum:EVarAtomAttribs	file:
VA_MIN	ui/AntTweakBar/src/TwBar.cpp	/^    VA_MIN,$/;"	e	enum:EVarAtomAttribs	file:
VA_PRECISION	ui/AntTweakBar/src/TwBar.cpp	/^    VA_PRECISION,$/;"	e	enum:EVarAtomAttribs	file:
VA_STEP	ui/AntTweakBar/src/TwBar.cpp	/^    VA_STEP,$/;"	e	enum:EVarAtomAttribs	file:
VA_TRUE	ui/AntTweakBar/src/TwBar.cpp	/^    VA_TRUE,$/;"	e	enum:EVarAtomAttribs	file:
VA_VALUE	ui/AntTweakBar/src/TwBar.cpp	/^    VA_VALUE$/;"	e	enum:EVarAtomAttribs	file:
VERTBUF	cpp/Cube.cpp	/^    VERTBUF,$/;"	e	enum:__anon2	file:
VERTBUF	cpp/Floor.cpp	/^    VERTBUF$/;"	e	enum:__anon1	file:
VG_ALPHA	ui/AntTweakBar/src/TwBar.cpp	/^    VG_ALPHA,       \/\/ for backward compatibility$/;"	e	enum:EVarGroupAttribs	file:
VG_ARROW	ui/AntTweakBar/src/TwBar.cpp	/^    VG_ARROW,       \/\/ tw_type_quat* only$/;"	e	enum:EVarGroupAttribs	file:
VG_ARROWCOLOR	ui/AntTweakBar/src/TwBar.cpp	/^    VG_ARROWCOLOR,  \/\/ tw_type_quat* only$/;"	e	enum:EVarGroupAttribs	file:
VG_AXISX	ui/AntTweakBar/src/TwBar.cpp	/^    VG_AXISX,       \/\/ tw_type_quat* only$/;"	e	enum:EVarGroupAttribs	file:
VG_AXISY	ui/AntTweakBar/src/TwBar.cpp	/^    VG_AXISY,       \/\/ tw_type_quat* only$/;"	e	enum:EVarGroupAttribs	file:
VG_AXISZ	ui/AntTweakBar/src/TwBar.cpp	/^    VG_AXISZ,       \/\/ tw_type_quat* only$/;"	e	enum:EVarGroupAttribs	file:
VG_CLOSE	ui/AntTweakBar/src/TwBar.cpp	/^    VG_CLOSE,       \/\/ for backward compatibility$/;"	e	enum:EVarGroupAttribs	file:
VG_COLORALPHA	ui/AntTweakBar/src/TwBar.cpp	/^    VG_COLORALPHA,  \/\/ tw_type_color* only$/;"	e	enum:EVarGroupAttribs	file:
VG_COLORMODE	ui/AntTweakBar/src/TwBar.cpp	/^    VG_COLORMODE,   \/\/ tw_type_color* only$/;"	e	enum:EVarGroupAttribs	file:
VG_COLORORDER	ui/AntTweakBar/src/TwBar.cpp	/^    VG_COLORORDER,  \/\/ tw_type_color* only$/;"	e	enum:EVarGroupAttribs	file:
VG_HLS	ui/AntTweakBar/src/TwBar.cpp	/^    VG_HLS,         \/\/ for backward compatibility$/;"	e	enum:EVarGroupAttribs	file:
VG_NOALPHA	ui/AntTweakBar/src/TwBar.cpp	/^    VG_NOALPHA,     \/\/ for backward compatibility$/;"	e	enum:EVarGroupAttribs	file:
VG_OPEN	ui/AntTweakBar/src/TwBar.cpp	/^    VG_OPEN = V_ENDTAG+1, \/\/ for backward compatibility$/;"	e	enum:EVarGroupAttribs	file:
VG_OPENED	ui/AntTweakBar/src/TwBar.cpp	/^    VG_OPENED,$/;"	e	enum:EVarGroupAttribs	file:
VG_RGB	ui/AntTweakBar/src/TwBar.cpp	/^    VG_RGB,         \/\/ for backward compatibility$/;"	e	enum:EVarGroupAttribs	file:
VG_SHOWVAL	ui/AntTweakBar/src/TwBar.cpp	/^    VG_SHOWVAL      \/\/ tw_type_quat* only$/;"	e	enum:EVarGroupAttribs	file:
VG_TYPEID	ui/AntTweakBar/src/TwBar.cpp	/^    VG_TYPEID,      \/\/ used internally for structs$/;"	e	enum:EVarGroupAttribs	file:
VG_VALPTR	ui/AntTweakBar/src/TwBar.cpp	/^    VG_VALPTR,      \/\/ used internally for structs$/;"	e	enum:EVarGroupAttribs	file:
V_ENDTAG	ui/AntTweakBar/src/TwBar.cpp	/^    V_ENDTAG$/;"	e	enum:EVarAttribs	file:
V_GROUP	ui/AntTweakBar/src/TwBar.cpp	/^    V_GROUP,$/;"	e	enum:EVarAttribs	file:
V_HELP	ui/AntTweakBar/src/TwBar.cpp	/^    V_HELP,$/;"	e	enum:EVarAttribs	file:
V_HIDE	ui/AntTweakBar/src/TwBar.cpp	/^    V_HIDE,$/;"	e	enum:EVarAttribs	file:
V_LABEL	ui/AntTweakBar/src/TwBar.cpp	/^    V_LABEL = 1,$/;"	e	enum:EVarAttribs	file:
V_ORDER	ui/AntTweakBar/src/TwBar.cpp	/^    V_ORDER,$/;"	e	enum:EVarAttribs	file:
V_READONLY	ui/AntTweakBar/src/TwBar.cpp	/^    V_READONLY,$/;"	e	enum:EVarAttribs	file:
V_READWRITE	ui/AntTweakBar/src/TwBar.cpp	/^    V_READWRITE,$/;"	e	enum:EVarAttribs	file:
V_SHOW	ui/AntTweakBar/src/TwBar.cpp	/^    V_SHOW,$/;"	e	enum:EVarAttribs	file:
V_VISIBLE	ui/AntTweakBar/src/TwBar.cpp	/^    V_VISIBLE,$/;"	e	enum:EVarAttribs	file:
Value	ui/AntTweakBar/include/AntTweakBar.h	/^    int           Value;$/;"	m	struct:CTwEnumVal
ValueFromDouble	ui/AntTweakBar/src/TwBar.cpp	/^void CTwVarAtom::ValueFromDouble(double _Val)$/;"	f	class:CTwVarAtom
ValueToDouble	ui/AntTweakBar/src/TwBar.cpp	/^double CTwVarAtom::ValueToDouble() const$/;"	f	class:CTwVarAtom
ValueToString	ui/AntTweakBar/src/TwBar.cpp	/^void CTwVarAtom::ValueToString(string *_Str) const$/;"	f	class:CTwVarAtom
Vec	opengl/opengl.h	/^struct Vec{$/;"	s
Vec2	opengl/opengl.h	/^struct Vec2{$/;"	s
Vec2	ui/AntTweakBar/src/TwOpenGLCore.h	/^    struct Vec2         { GLfloat x, y; Vec2(){} Vec2(GLfloat _X, GLfloat _Y):x(_X),y(_Y){} Vec2(int _X, int _Y):x(GLfloat(_X)),y(GLfloat(_Y)){} };$/;"	f	struct:CTwGraphOpenGLCore::Vec2
Vec2	ui/AntTweakBar/src/TwOpenGLCore.h	/^    struct Vec2         { GLfloat x, y; Vec2(){} Vec2(GLfloat _X, GLfloat _Y):x(_X),y(_Y){} Vec2(int _X, int _Y):x(GLfloat(_X)),y(GLfloat(_Y)){} };$/;"	s	class:CTwGraphOpenGLCore
Vec3Cross	ui/AntTweakBar/src/TwMgr.cpp	/^static inline void Vec3Cross(double *out, const double *a, const double *b)$/;"	f	file:
Vec3Dot	ui/AntTweakBar/src/TwMgr.cpp	/^static inline double Vec3Dot(const double *a, const double *b)$/;"	f	file:
Vec3RotY	ui/AntTweakBar/src/TwMgr.cpp	/^static inline void Vec3RotY(float *x, float *y, float *z)$/;"	f	file:
Vec3RotZ	ui/AntTweakBar/src/TwMgr.cpp	/^static inline void Vec3RotZ(float *x, float *y, float *z)$/;"	f	file:
Vx	ui/AntTweakBar/src/TwMgr.h	/^    double               Vx, Vy, Vz, Angle; \/\/ Not used$/;"	m	struct:CQuaternionExt
Vy	ui/AntTweakBar/src/TwMgr.h	/^    double               Vx, Vy, Vz, Angle; \/\/ Not used$/;"	m	struct:CQuaternionExt
Vz	ui/AntTweakBar/src/TwMgr.h	/^    double               Vx, Vy, Vz, Angle; \/\/ Not used$/;"	m	struct:CQuaternionExt
W	ui/AntTweakBar/src/TwMgr.h	/^    int X, Y, W, H;$/;"	m	struct:CRect
WIN32	ui/AntTweakBar/src/TwPrecomp.h	56;"	d
WIN32	ui/AntTweakBar/src/TwPrecomp.h	69;"	d
WIN32_LEAN_AND_MEAN	ui/AntTweakBar/src/TwPrecomp.h	78;"	d
WIN64	ui/AntTweakBar/src/TwPrecomp.h	58;"	d
WIN64	ui/AntTweakBar/src/TwPrecomp.h	71;"	d
X	ui/AntTweakBar/src/TwMgr.h	/^    int X, Y, W, H;$/;"	m	struct:CRect
XD	cpp/CubeMesh.cpp	/^constexpr int XD = 512;$/;"	v
XD2	cpp/CubeMesh.cpp	/^constexpr int XD2 = XD\/2;$/;"	v
Y	ui/AntTweakBar/src/TwMgr.h	/^    int X, Y, W, H;$/;"	m	struct:CRect
YD	cpp/CubeMesh.cpp	/^constexpr int YD = 32;$/;"	v
YD2	cpp/CubeMesh.cpp	/^constexpr int YD2 = YD\/2;$/;"	v
ZD	cpp/CubeMesh.cpp	/^constexpr int ZD = 512;$/;"	v
ZD2	cpp/CubeMesh.cpp	/^constexpr int ZD2 = ZD\/2;$/;"	v
_2PI	cpp/bak/Rope.cpp	13;"	d	file:
_APS_NEXT_COMMAND_VALUE	ui/AntTweakBar/src/resource.h	25;"	d
_APS_NEXT_CONTROL_VALUE	ui/AntTweakBar/src/resource.h	26;"	d
_APS_NEXT_RESOURCE_VALUE	ui/AntTweakBar/src/resource.h	24;"	d
_APS_NEXT_SYMED_VALUE	ui/AntTweakBar/src/resource.h	27;"	d
_CRT_SECURE_NO_DEPRECATE	ui/AntTweakBar/src/TwPrecomp.h	23;"	d
_GAMESCREEN_H	screens/GameScreen.h	2;"	d
_LOOP_H	loop.h	2;"	d
_OPENGL_H	opengl/opengl.h	2;"	d
_READ_H	read.h	3;"	d
_SCREEN_H	screen.h	2;"	d
_SHAPES_H	shapes.h	3;"	d
_W64	ui/AntTweakBar/include/AntTweakBar.h	291;"	d
_WIN32	ui/AntTweakBar/src/TwPrecomp.h	55;"	d
_WIN32	ui/AntTweakBar/src/TwPrecomp.h	68;"	d
_WIN64	ui/AntTweakBar/src/TwPrecomp.h	57;"	d
_WIN64	ui/AntTweakBar/src/TwPrecomp.h	70;"	d
_WINDOWS	ui/AntTweakBar/src/TwPrecomp.h	59;"	d
_WINDOWS	ui/AntTweakBar/src/TwPrecomp.h	72;"	d
__TwDbg	ui/AntTweakBar/src/TwMgr.cpp	/^int ANT_CALL __TwDbg(const char *dbgFile, int dbgLine)$/;"	f
_glAttachShader	ui/AntTweakBar/examples/TwGLCoreSDL.c	/^PFNGLAttachShader _glAttachShader;$/;"	v
_glBindBuffer	ui/AntTweakBar/examples/TwGLCoreSDL.c	/^PFNGLBindBuffer _glBindBuffer;$/;"	v
_glBindVertexArray	ui/AntTweakBar/examples/TwGLCoreSDL.c	/^PFNGLBindVertexArray _glBindVertexArray;$/;"	v
_glBufferData	ui/AntTweakBar/examples/TwGLCoreSDL.c	/^PFNGLBufferData _glBufferData;$/;"	v
_glCompileShader	ui/AntTweakBar/examples/TwGLCoreSDL.c	/^PFNGLCompileShader _glCompileShader;$/;"	v
_glCreateProgram	ui/AntTweakBar/examples/TwGLCoreSDL.c	/^PFNGLCreateProgram _glCreateProgram;$/;"	v
_glCreateShader	ui/AntTweakBar/examples/TwGLCoreSDL.c	/^PFNGLCreateShader _glCreateShader;$/;"	v
_glDeleteBuffers	ui/AntTweakBar/examples/TwGLCoreSDL.c	/^PFNGLDeleteBuffers _glDeleteBuffers;$/;"	v
_glDeleteProgram	ui/AntTweakBar/examples/TwGLCoreSDL.c	/^PFNGLDeleteProgram _glDeleteProgram;$/;"	v
_glDeleteShader	ui/AntTweakBar/examples/TwGLCoreSDL.c	/^PFNGLDeleteShader _glDeleteShader;$/;"	v
_glDeleteVertexArrays	ui/AntTweakBar/examples/TwGLCoreSDL.c	/^PFNGLDeleteVertexArrays _glDeleteVertexArrays;$/;"	v
_glEnableVertexAttribArray	ui/AntTweakBar/examples/TwGLCoreSDL.c	/^PFNGLEnableVertexAttribArray _glEnableVertexAttribArray;$/;"	v
_glGenBuffers	ui/AntTweakBar/examples/TwGLCoreSDL.c	/^PFNGLGenBuffers _glGenBuffers;$/;"	v
_glGenVertexArrays	ui/AntTweakBar/examples/TwGLCoreSDL.c	/^PFNGLGenVertexArrays _glGenVertexArrays;$/;"	v
_glGetAttribLocation	ui/AntTweakBar/examples/TwGLCoreSDL.c	/^PFNGLGetAttribLocation _glGetAttribLocation;$/;"	v
_glGetProcAddress	ui/AntTweakBar/src/LoadOGLCore.cpp	/^namespace GLCore { PFNGLGetProcAddress _glGetProcAddress = NULL; }$/;"	m	namespace:GLCore	file:
_glGetUniformLocation	ui/AntTweakBar/examples/TwGLCoreSDL.c	/^PFNGLGetUniformLocation _glGetUniformLocation;$/;"	v
_glLinkProgram	ui/AntTweakBar/examples/TwGLCoreSDL.c	/^PFNGLLinkProgram _glLinkProgram;$/;"	v
_glShaderSource	ui/AntTweakBar/examples/TwGLCoreSDL.c	/^PFNGLShaderSource _glShaderSource;$/;"	v
_glUniform1f	ui/AntTweakBar/examples/TwGLCoreSDL.c	/^PFNGLUniform1f _glUniform1f;$/;"	v
_glUniform3f	ui/AntTweakBar/examples/TwGLCoreSDL.c	/^PFNGLUniform3f _glUniform3f;$/;"	v
_glUseProgram	ui/AntTweakBar/examples/TwGLCoreSDL.c	/^PFNGLUseProgram _glUseProgram;$/;"	v
_glVertexAttribPointer	ui/AntTweakBar/examples/TwGLCoreSDL.c	/^PFNGLVertexAttribPointer _glVertexAttribPointer;$/;"	v
_snprintf	ui/AntTweakBar/src/TwMgr.cpp	29;"	d	file:
_strdup	ui/AntTweakBar/src/TwBar.cpp	39;"	d	file:
_strdup	ui/AntTweakBar/src/TwMgr.cpp	83;"	d	file:
_stricmp	ui/AntTweakBar/src/TwBar.cpp	38;"	d	file:
_stricmp	ui/AntTweakBar/src/TwMgr.cpp	82;"	d	file:
accel	opengl/opengl.h	/^  float accel=0.001; \/\/acceleration$/;"	m	struct:AngularVelocity
active	ui/AntTweakBar/src/MiniSDL12.h	/^    SDL_ActiveEvent active;$/;"	m	union:__anon11
active	ui/AntTweakBar/src/MiniSDL13.h	/^    SDL_ActiveEvent active;$/;"	m	union:SDL_Event
addCube	cpp/CubeMesh.cpp	/^    void CubeMesh::addCube(Cube cube)$/;"	f	class:game::CubeMesh
alpha	ui/AntTweakBar/src/MiniSDL12.h	/^    Uint8  alpha;$/;"	m	struct:SDL_PixelFormat
ambientLight	screens/GameScreen.h	/^  float ambientLight[3] = {1,1,1};$/;"	m	struct:GameScreen
angle	Player.hpp	/^		float angle;$/;"	m	class:game::Player
angle	opengl/opengl.h	/^  float angle;$/;"	m	struct:AngularVelocity
angle	screens/GameScreen.h	/^  float angle = 0;$/;"	m	struct:GameScreen
angle	ui/AntTweakBar/examples/TwGLCoreSDL.c	/^float angle = 0, quat[4];$/;"	v
angles	SoftBody.h	/^  std::vector<float> angles;$/;"	m	struct:SoftBody
angularVelocity	Player.hpp	/^		float angularVelocity;$/;"	m	class:game::Player
angularVerts	Rope.h	/^  std::vector<AngularVelocity> angularVerts;$/;"	m	struct:SoftDude
avgFps	cpp/loop.cpp	/^float avgFps = 0.;$/;"	v
axis	ui/AntTweakBar/src/MiniSDL12.h	/^    Uint8 axis;$/;"	m	struct:SDL_JoyAxisEvent
axis	ui/AntTweakBar/src/MiniSDL13.h	/^    Uint8 axis;$/;"	m	struct:SDL_JoyAxisEvent
b	opengl/opengl.h	/^  float b=1;$/;"	m	struct:ColorRGB
ball	ui/AntTweakBar/src/MiniSDL12.h	/^    Uint8 ball;$/;"	m	struct:SDL_JoyBallEvent
ball	ui/AntTweakBar/src/MiniSDL13.h	/^    Uint8 ball;$/;"	m	struct:SDL_JoyBallEvent
bind	bak/programs.cpp	/^  void bind(EnumProgramIndices e){$/;"	f	namespace:program
bind	bak/programs.cpp	/^void Program::bind()$/;"	f	class:Program
bind	cpp/opengl/programs.cpp	/^  void bind(EnumProgramIndices e){$/;"	f	namespace:program
bind	cpp/opengl/programs.cpp	/^void Program::bind()$/;"	f	class:Program
blit_fill	ui/AntTweakBar/src/MiniSDL12.h	/^    Uint32 blit_fill    :1;$/;"	m	struct:SDL_VideoInfo
blit_fill	ui/AntTweakBar/src/MiniSDL13.h	/^    Uint32 blit_fill    :1;$/;"	m	struct:SDL_VideoInfo
blit_hw	ui/AntTweakBar/src/MiniSDL12.h	/^    Uint32 blit_hw      :1;$/;"	m	struct:SDL_VideoInfo
blit_hw	ui/AntTweakBar/src/MiniSDL13.h	/^    Uint32 blit_hw      :1;$/;"	m	struct:SDL_VideoInfo
blit_hw_A	ui/AntTweakBar/src/MiniSDL12.h	/^    Uint32 blit_hw_A    :1;$/;"	m	struct:SDL_VideoInfo
blit_hw_A	ui/AntTweakBar/src/MiniSDL13.h	/^    Uint32 blit_hw_A    :1;$/;"	m	struct:SDL_VideoInfo
blit_hw_CC	ui/AntTweakBar/src/MiniSDL12.h	/^    Uint32 blit_hw_CC   :1;$/;"	m	struct:SDL_VideoInfo
blit_hw_CC	ui/AntTweakBar/src/MiniSDL13.h	/^    Uint32 blit_hw_CC   :1;$/;"	m	struct:SDL_VideoInfo
blit_sw	ui/AntTweakBar/src/MiniSDL12.h	/^    Uint32 blit_sw      :1;$/;"	m	struct:SDL_VideoInfo
blit_sw	ui/AntTweakBar/src/MiniSDL13.h	/^    Uint32 blit_sw      :1;$/;"	m	struct:SDL_VideoInfo
blit_sw_A	ui/AntTweakBar/src/MiniSDL12.h	/^    Uint32 blit_sw_A    :1;$/;"	m	struct:SDL_VideoInfo
blit_sw_A	ui/AntTweakBar/src/MiniSDL13.h	/^    Uint32 blit_sw_A    :1;$/;"	m	struct:SDL_VideoInfo
blit_sw_CC	ui/AntTweakBar/src/MiniSDL12.h	/^    Uint32 blit_sw_CC   :1;$/;"	m	struct:SDL_VideoInfo
blit_sw_CC	ui/AntTweakBar/src/MiniSDL13.h	/^    Uint32 blit_sw_CC   :1;$/;"	m	struct:SDL_VideoInfo
bound	bak/programs.cpp	/^  unsigned int bound;$/;"	m	namespace:program	file:
bound	cpp/opengl/programs.cpp	/^  unsigned int bound;$/;"	m	namespace:program	file:
bounds	cpp/screen.cpp	/^  float bounds[2];$/;"	m	namespace:screen	file:
buffer	ui/AntTweakBar/examples/TwGLCoreSDL.c	/^GLuint vshader, fshader, program, varray, buffer;$/;"	v
button	ui/AntTweakBar/src/MiniSDL12.h	/^    SDL_MouseButtonEvent button;$/;"	m	union:__anon11
button	ui/AntTweakBar/src/MiniSDL12.h	/^    Uint8 button;$/;"	m	struct:SDL_JoyButtonEvent
button	ui/AntTweakBar/src/MiniSDL12.h	/^    Uint8 button;$/;"	m	struct:SDL_MouseButtonEvent
button	ui/AntTweakBar/src/MiniSDL13.h	/^    SDL_MouseButtonEvent button;   $/;"	m	union:SDL_Event
button	ui/AntTweakBar/src/MiniSDL13.h	/^    Uint8 button;          $/;"	m	struct:SDL_MouseButtonEvent
button	ui/AntTweakBar/src/MiniSDL13.h	/^    Uint8 button;$/;"	m	struct:SDL_JoyButtonEvent
bytesPerColor	opengl/opengl.h	/^  int bytesPerColor = 4; \/\/3 or 4$/;"	m	struct:DrawCache
cache	cpp/opengl/opengl.cpp	/^float AngularVelocity::cache = 0;$/;"	m	class:AngularVelocity	file:
cache	opengl/opengl.h	/^  static float cache;$/;"	m	struct:AngularVelocity
calculatedFps	cpp/loop.cpp	/^  float calculatedFps;$/;"	m	namespace:loop	file:
center	SoftBody.h	/^  Vec center;$/;"	m	struct:SoftBody
circle	cpp/shapes.cpp	/^    SimpleShape* circle(float radius,std::vector<ColorRGB> colors,unsigned int vertNum,SimpleShape* shape){$/;"	f	namespace:shape::outline
circle	cpp/shapes.cpp	/^  Shape* circle(float radius,std::vector<ColorRGB> colors,unsigned int outerVertNum,Shape* shape){$/;"	f	namespace:shape
circle	screens/GameScreen.h	/^  Shape* circle;$/;"	m	struct:GameScreen
clearMatrices	cpp/matrix.cpp	/^  void clearMatrices(){$/;"	f	namespace:mat
code	ui/AntTweakBar/src/MiniSDL12.h	/^    int code;$/;"	m	struct:SDL_UserEvent
code	ui/AntTweakBar/src/MiniSDL13.h	/^    int code;$/;"	m	struct:SDL_UserEvent
color	Rope.h	/^  float color[3] = {0.75,0.75,0.75};$/;"	m	struct:SoftDude
color	SoftBody.h	/^  float color[3] = {0.75,0.75,0.75};$/;"	m	struct:SoftBody
color	screens/GameScreen.h	/^  float color[3] = {1,0.5,1};$/;"	m	struct:GameScreen
color	ui/AntTweakBar/examples/TwGLCoreSDL.c	/^float color[] = {0.8f, 1.0f, 0.2f};$/;"	v
color2	Rope.h	/^  float color2[3] = {0,1,0};$/;"	m	struct:SoftDude
color2	SoftBody.h	/^  float color2[3] = {0,1,0};$/;"	m	struct:SoftBody
color32	ui/AntTweakBar/src/TwColors.h	/^typedef unsigned int color32;$/;"	t
colorBuf	opengl/opengl.h	/^  GLuint colorBuf = 0;$/;"	m	struct:DrawCache
colorHandle	opengl/programs.h	/^  GLuint colorHandle;$/;"	m	struct:Program
colorVar	bak/GameScreen.cpp	/^static float colorVar[] = { 0., 1., 0. };$/;"	v	file:
colorVar	cpp/screens/GameScreen.cpp	/^static float colorVar[] = { 0., 1., 0. };$/;"	v	file:
colorkey	ui/AntTweakBar/src/MiniSDL12.h	/^    Uint32 colorkey;$/;"	m	struct:SDL_PixelFormat
colorloc	ui/AntTweakBar/examples/TwGLCoreSDL.c	/^GLint cosa, sina, colorloc;$/;"	v
colors	opengl/opengl.h	/^  std::vector<float> colors;$/;"	m	struct:DrawCache
colors	shapes.h	/^  std::vector<ColorRGB> colors; \/\/when using the fixed color shader you can use this to store one value$/;"	m	struct:SimpleShape
compression	SoftBody.h	/^  float compression = 0.01;$/;"	m	struct:SoftBody
cosa	ui/AntTweakBar/examples/TwGLCoreSDL.c	/^GLint cosa, sina, colorloc;$/;"	v
cubeIndices	cpp/Cube.cpp	/^static std::array<uint16_t, 24> cubeIndices = {{$/;"	v	file:
cubeMesh	bak/GameScreen.cpp	/^game::CubeMesh cubeMesh;$/;"	v
cubeMesh	cpp/screens/GameScreen.cpp	/^game::CubeMesh cubeMesh;$/;"	v
cubeVertices	cpp/Cube.cpp	/^static std::array<glm::vec3, 8> cubeVertices = {{$/;"	v	file:
cubes	CubeMesh.hpp	/^        std::vector<std::shared_ptr<Cube>> cubes;$/;"	m	class:game::CubeMesh
currentScreen	cpp/loop.cpp	/^  Screen* currentScreen = GameScreen::instance;$/;"	m	namespace:loop	file:
current_h	ui/AntTweakBar/src/MiniSDL12.h	/^    int current_h;$/;"	m	struct:SDL_VideoInfo
current_h	ui/AntTweakBar/src/MiniSDL13.h	/^    int current_h;$/;"	m	struct:SDL_VideoInfo
current_w	ui/AntTweakBar/src/MiniSDL12.h	/^    int current_w;$/;"	m	struct:SDL_VideoInfo
current_w	ui/AntTweakBar/src/MiniSDL13.h	/^    int current_w;$/;"	m	struct:SDL_VideoInfo
cursor	ui/AntTweakBar/src/MiniSDL13.h	/^    int cursor;            $/;"	m	struct:SDL_MouseMotionEvent
cursor	ui/AntTweakBar/src/MiniSDL13.h	/^    int cursor;$/;"	m	struct:SDL_ProximityEvent
data	opengl/opengl.h	/^  unsigned char* data;$/;"	m	struct:SimpleSurface
data1	ui/AntTweakBar/src/MiniSDL12.h	/^    void *data1;$/;"	m	struct:SDL_UserEvent
data1	ui/AntTweakBar/src/MiniSDL13.h	/^    int data1;              $/;"	m	struct:SDL_WindowEvent
data1	ui/AntTweakBar/src/MiniSDL13.h	/^    void *data1;$/;"	m	struct:SDL_UserEvent
data2	ui/AntTweakBar/src/MiniSDL12.h	/^    void *data2;$/;"	m	struct:SDL_UserEvent
data2	ui/AntTweakBar/src/MiniSDL13.h	/^    int data2;              $/;"	m	struct:SDL_WindowEvent
data2	ui/AntTweakBar/src/MiniSDL13.h	/^    void *data2;$/;"	m	struct:SDL_UserEvent
defaultInit	bak/programs.cpp	/^void Program::defaultInit(const GLchar* vertSource,const GLchar* fragSource){$/;"	f	class:Program
defaultInit	cpp/opengl/programs.cpp	/^void Program::defaultInit(const GLchar* vertSource,const GLchar* fragSource){$/;"	f	class:Program
dimension	Rope.h	/^  int dimension = 2;$/;"	m	struct:SoftDude
dimension	SoftBody.h	/^  int dimension = 2;$/;"	m	struct:SoftBody
dimension	opengl/opengl.h	/^  int dimension = 2; \/\/2D or 3D$/;"	m	struct:DrawCache
downloadMVP	cpp/matrix.cpp	/^  void downloadMVP(){$/;"	f	namespace:mat
draw	cpp/Cube.cpp	/^    void Cube::draw()$/;"	f	class:game::Cube
draw	cpp/Floor.cpp	/^    void Floor::draw()$/;"	f	class:game::Floor
draw	cpp/bak/Rope.cpp	/^void SoftDude::draw(){$/;"	f	class:SoftDude
draw	cpp/bak/SoftBody.cpp	/^void SoftBody::draw(){$/;"	f	class:SoftBody
draw	cpp/shapes.cpp	/^void LightenTexturedShape::draw(){$/;"	f	class:LightenTexturedShape
draw	cpp/shapes.cpp	/^void Shape::draw(){$/;"	f	class:Shape
draw	cpp/shapes.cpp	/^void SimpleShape::draw(){$/;"	f	class:SimpleShape
draw	cpp/shapes.cpp	/^void TexturedShape::draw(){$/;"	f	class:TexturedShape
drawMode	shapes.h	/^  GLenum drawMode = GL_LINE_LOOP;$/;"	m	struct:SimpleShape
edit	ui/AntTweakBar/src/MiniSDL13.h	/^    SDL_TextEditingEvent edit;     $/;"	m	union:SDL_Event
event	ui/AntTweakBar/src/MiniSDL13.h	/^    Uint8 event;            $/;"	m	struct:SDL_WindowEvent
expose	ui/AntTweakBar/src/MiniSDL12.h	/^    SDL_ExposeEvent expose;$/;"	m	union:__anon11
eyeVector	Player.hpp	/^		glm::vec3 eyeVector;$/;"	m	class:game::Player
favorableRadius	SoftBody.h	/^  float favorableRadius = 0.4;$/;"	m	struct:SoftBody
floor	cpp/Floor.cpp	/^    Floor floor;$/;"	m	namespace:game	file:
fpsSum	cpp/loop.cpp	/^  float fpsSum = 0.0;$/;"	m	namespace:loop	file:
fragShader	opengl/programs.h	/^  GLuint fragShader;$/;"	m	struct:Program
fshader	ui/AntTweakBar/examples/TwGLCoreSDL.c	/^GLuint vshader, fshader, program, varray, buffer;$/;"	v
full	ui/AntTweakBar/src/MiniSDL12.h	/^char full[56];$/;"	m	union:__anon11
g	opengl/opengl.h	/^  float g=1;$/;"	m	struct:ColorRGB
g_BarTimer	ui/AntTweakBar/src/TwBar.cpp	/^PerfTimer g_BarTimer;$/;"	v
g_BreakOnError	ui/AntTweakBar/src/TwMgr.cpp	/^bool g_BreakOnError = false;$/;"	v
g_CurHot	ui/AntTweakBar/src/res/TwXCursors.h	/^static int g_CurHot[][2] = $/;"	v
g_CurMask	ui/AntTweakBar/src/res/TwXCursors.h	/^static bool g_CurMask[][32*32] = $/;"	v
g_CurPict	ui/AntTweakBar/src/res/TwXCursors.h	/^static bool g_CurPict[][32*32] = $/;"	v
g_DefaultFixed1Font	ui/AntTweakBar/src/TwFonts.cpp	/^CTexFont *g_DefaultFixed1Font = NULL;$/;"	v
g_DefaultLargeFont	ui/AntTweakBar/src/TwFonts.cpp	/^CTexFont *g_DefaultLargeFont = NULL;$/;"	v
g_DefaultNormalFont	ui/AntTweakBar/src/TwFonts.cpp	/^CTexFont *g_DefaultNormalFont = NULL;$/;"	v
g_DefaultSmallFont	ui/AntTweakBar/src/TwFonts.cpp	/^CTexFont *g_DefaultSmallFont = NULL;$/;"	v
g_ErrBadDevice	ui/AntTweakBar/src/TwMgr.cpp	/^const char *g_ErrBadDevice  = "Invalid graph device";$/;"	v
g_ErrBadFontHeight	ui/AntTweakBar/src/TwFonts.cpp	/^const char *g_ErrBadFontHeight = "Cannot determine font height while reading font bitmap (check first pixel column)";$/;"	v
g_ErrBadParam	ui/AntTweakBar/src/TwMgr.cpp	/^const char *g_ErrBadParam   = "Invalid parameter";$/;"	v
g_ErrBadSize	ui/AntTweakBar/src/TwMgr.cpp	/^const char *g_ErrBadSize    = "Bad size";$/;"	v
g_ErrBadType	ui/AntTweakBar/src/TwMgr.cpp	/^const char *g_ErrBadType    = "Incompatible type";$/;"	v
g_ErrBadValue	ui/AntTweakBar/src/TwBar.cpp	/^const char *g_ErrBadValue       = "Bad value";$/;"	v
g_ErrCStrParam	ui/AntTweakBar/src/TwMgr.cpp	/^const char *g_ErrCStrParam  = "Value count for TW_PARAM_CSTRING must be 1";$/;"	v
g_ErrCantLoadOGL	ui/AntTweakBar/src/TwOpenGLCore.cpp	/^const char *g_ErrCantLoadOGL = "Cannot load OpenGL library dynamically";$/;"	v
g_ErrCantUnloadOGL	ui/AntTweakBar/src/TwOpenGLCore.cpp	/^const char *g_ErrCantUnloadOGL = "Cannot unload OpenGL library";$/;"	v
g_ErrDelHelp	ui/AntTweakBar/src/TwMgr.cpp	/^const char *g_ErrDelHelp    = "Cannot delete help bar";$/;"	v
g_ErrDelStruct	ui/AntTweakBar/src/TwMgr.cpp	/^const char *g_ErrDelStruct  = "Cannot delete a struct member";$/;"	v
g_ErrExist	ui/AntTweakBar/src/TwMgr.cpp	/^const char *g_ErrExist      = "Exists already";$/;"	v
g_ErrHasNoValue	ui/AntTweakBar/src/TwMgr.cpp	/^const char *g_ErrHasNoValue = "Has no value";$/;"	v
g_ErrInit	ui/AntTweakBar/src/TwMgr.cpp	/^const char *g_ErrInit       = "Already initialized";$/;"	v
g_ErrInvalidAttrib	ui/AntTweakBar/src/TwBar.cpp	/^const char *g_ErrInvalidAttrib  = "Invalid parameter";$/;"	v
g_ErrIsDrawing	ui/AntTweakBar/src/TwMgr.cpp	/^const char *g_ErrIsDrawing  = "Asynchronous drawing detected";$/;"	v
g_ErrIsProcessing	ui/AntTweakBar/src/TwMgr.cpp	/^const char *g_ErrIsProcessing="Asynchronous processing detected";$/;"	v
g_ErrNoBackQuote	ui/AntTweakBar/src/TwMgr.cpp	/^const char *g_ErrNoBackQuote= "Name cannot include back-quote";$/;"	v
g_ErrNoValue	ui/AntTweakBar/src/TwBar.cpp	/^const char *g_ErrNoValue        = "Value required";$/;"	v
g_ErrNotEnum	ui/AntTweakBar/src/TwBar.cpp	/^const char *g_ErrNotEnum        = "Must be of type Enum";$/;"	v
g_ErrNotFound	ui/AntTweakBar/src/TwMgr.cpp	/^const char *g_ErrNotFound   = "Not found";$/;"	v
g_ErrNotGroup	ui/AntTweakBar/src/TwBar.cpp	/^const char *g_ErrNotGroup       = "Value is not a group";$/;"	v
g_ErrNotInit	ui/AntTweakBar/src/TwMgr.cpp	/^const char *g_ErrNotInit    = "Not initialized";$/;"	v
g_ErrNthToDo	ui/AntTweakBar/src/TwMgr.cpp	/^const char *g_ErrNthToDo    = "Nothing to do";$/;"	v
g_ErrOffset	ui/AntTweakBar/src/TwMgr.cpp	/^const char *g_ErrOffset     = "Offset larger than StructSize";$/;"	v
g_ErrOutOfRange	ui/AntTweakBar/src/TwMgr.cpp	/^const char *g_ErrOutOfRange = "Index out of range";$/;"	v
g_ErrParse	ui/AntTweakBar/src/TwMgr.cpp	/^char g_ErrParse[512];$/;"	v
g_ErrShut	ui/AntTweakBar/src/TwMgr.cpp	/^const char *g_ErrShut       = "Already shutdown";$/;"	v
g_ErrStdString	ui/AntTweakBar/src/TwMgr.cpp	/^const char *g_ErrStdString  = "Debug\/Release std::string mismatch";$/;"	v
g_ErrUnknownAPI	ui/AntTweakBar/src/TwMgr.cpp	/^const char *g_ErrUnknownAPI = "Unsupported graph API";$/;"	v
g_ErrUnknownAttrib	ui/AntTweakBar/src/TwBar.cpp	/^const char *g_ErrUnknownAttrib  = "Unknown parameter";$/;"	v
g_ErrUnknownType	ui/AntTweakBar/src/TwBar.cpp	/^const char *g_ErrUnknownType    = "Unknown type";$/;"	v
g_ErrorHandler	ui/AntTweakBar/src/TwMgr.cpp	/^TwErrorHandler g_ErrorHandler = NULL;$/;"	v
g_FontScaling	ui/AntTweakBar/src/TwMgr.cpp	/^float g_FontScaling = 1.0f;$/;"	v
g_InitCopyCDStringToClient	ui/AntTweakBar/src/TwMgr.cpp	/^TwCopyCDStringToClient  g_InitCopyCDStringToClient = NULL;$/;"	v
g_InitCopyStdStringToClient	ui/AntTweakBar/src/TwMgr.cpp	/^TwCopyStdStringToClient g_InitCopyStdStringToClient = NULL;$/;"	v
g_InitWndHeight	ui/AntTweakBar/src/TwMgr.cpp	/^int g_InitWndHeight = -1;$/;"	v
g_InitWndWidth	ui/AntTweakBar/src/TwMgr.cpp	/^int g_InitWndWidth = -1;$/;"	v
g_NbOGLCoreFunc	ui/AntTweakBar/src/LoadOGLCore.cpp	/^int g_NbOGLCoreFunc = 0;$/;"	v
g_OGLCoreFuncRec	ui/AntTweakBar/src/LoadOGLCore.cpp	/^COGLCoreFuncRec g_OGLCoreFuncRec[ANT_NB_OGL_CORE_FUNC_MAX];$/;"	v
g_OGLCoreModule	ui/AntTweakBar/src/LoadOGLCore.cpp	/^HMODULE g_OGLCoreModule = NULL;$/;"	v
g_TabLength	ui/AntTweakBar/src/TwMgr.cpp	/^int g_TabLength = 4;$/;"	v
g_TwMasterMgr	ui/AntTweakBar/src/TwMgr.cpp	/^CTwMgr *g_TwMasterMgr = NULL;$/;"	v
g_UseCurRsc	ui/AntTweakBar/src/TwMgr.cpp	/^    bool g_UseCurRsc = true;    \/\/ use dll resources for rotoslider cursors$/;"	v
g_Wnds	ui/AntTweakBar/src/TwMgr.cpp	/^CTwWndMap g_Wnds;$/;"	v
gain	ui/AntTweakBar/src/MiniSDL12.h	/^    Uint8 gain;$/;"	m	struct:SDL_ActiveEvent
gain	ui/AntTweakBar/src/MiniSDL13.h	/^    Uint8 gain;$/;"	m	struct:SDL_ActiveEvent
game	Cube.hpp	/^namespace game$/;"	n
game	CubeMesh.hpp	/^namespace game$/;"	n
game	Floor.hpp	/^namespace game$/;"	n
game	Player.hpp	/^namespace game$/;"	n
game	cpp/Cube.cpp	/^namespace game$/;"	n	file:
game	cpp/CubeMesh.cpp	/^namespace game$/;"	n	file:
game	cpp/Floor.cpp	/^namespace game$/;"	n	file:
game	cpp/Player.cpp	/^namespace game$/;"	n	file:
genBuf	cpp/bak/Rope.cpp	/^void SoftDude::genBuf(){$/;"	f	class:SoftDude
genBuf	cpp/bak/SoftBody.cpp	/^void SoftBody::genBuf(){$/;"	f	class:SoftBody
genGraphics	bak/GameScreen.cpp	/^void GameScreen::genGraphics(){$/;"	f	class:GameScreen
genGraphics	cpp/Cube.cpp	/^    void Cube::genGraphics()$/;"	f	class:game::Cube
genGraphics	cpp/Floor.cpp	/^    void Floor::genGraphics()$/;"	f	class:game::Floor
genGraphics	cpp/screen.cpp	/^void Screen::genGraphics() { };$/;"	f	class:Screen
genGraphics	cpp/screens/GameScreen.cpp	/^void GameScreen::genGraphics(){$/;"	f	class:GameScreen
genGraphics	cpp/shapes.cpp	/^void LightenTexturedShape::genGraphics(){$/;"	f	class:LightenTexturedShape
genGraphics	cpp/shapes.cpp	/^void Shape::genGraphics(){$/;"	f	class:Shape
genGraphics	cpp/shapes.cpp	/^void SimpleShape::genGraphics(){$/;"	f	class:SimpleShape
genGraphics	cpp/shapes.cpp	/^void TexturedShape::genGraphics(){$/;"	f	class:TexturedShape
genGraphics	tmo/GameScreen.cpp	/^void GameScreen::genGraphics(){$/;"	f	class:GameScreen
getAssetsPath	cpp/read.cpp	/^std::string read::getAssetsPath()$/;"	f	class:read
getBound	bak/programs.cpp	/^  Program* getBound(){$/;"	f	namespace:program
getBound	cpp/opengl/programs.cpp	/^  Program* getBound(){$/;"	f	namespace:program
getProgram	bak/programs.cpp	/^  Program* getProgram(EnumProgramIndices e)$/;"	f	namespace:program
getProgram	cpp/opengl/programs.cpp	/^  Program* getProgram(EnumProgramIndices e)$/;"	f	namespace:program
getType	CubeMesh.hpp	/^        uint8_t getType(const glm::ivec3 &pos)$/;"	f	class:game::CubeMesh
getType	cpp/CubeMesh.cpp	/^    uint8_t CubeMesh::getType(int x, int y, int z)$/;"	f	class:game::CubeMesh
gl	cpp/opengl/opengl.cpp	/^namespace gl{$/;"	n	file:
gl	cpp/screen.cpp	/^  SDL_GLContext gl;$/;"	m	namespace:screen	file:
gl	opengl/opengl.h	/^namespace gl{$/;"	n
glGetProcAddress	ui/AntTweakBar/examples/TwGLCoreSDL.c	56;"	d	file:
glGetProcAddress	ui/AntTweakBar/examples/TwGLCoreSDL.c	60;"	d	file:
glProgram	Rope.h	/^  static int glProgram; \/\/this is set before and draw()s are called. I plan on improving the infastructure so it wont work like that$/;"	m	struct:SoftDude
glProgram	cpp/bak/Rope.cpp	/^int SoftDude::glProgram = 0;$/;"	m	class:SoftDude	file:
glbufs	cpp/Cube.cpp	/^static GLuint glbufs[2];$/;"	v	file:
glbufs	cpp/Floor.cpp	/^static GLuint glbufs[1];$/;"	v	file:
grav	Rope.h	/^  float grav = 0.001;$/;"	m	struct:SoftDude
h	opengl/opengl.h	/^  int h;$/;"	m	struct:SimpleSurface
h	ui/AntTweakBar/src/MiniSDL12.h	/^    int h;$/;"	m	struct:SDL_ResizeEvent
h	ui/AntTweakBar/src/MiniSDL13.h	/^    int h;$/;"	m	struct:SDL_ResizeEvent
handleBlocks	cpp/Player.cpp	/^    void Player::handleBlocks(CubeMesh &mesh, float dt)$/;"	f	class:game::Player
hat	ui/AntTweakBar/src/MiniSDL12.h	/^    Uint8 hat;$/;"	m	struct:SDL_JoyHatEvent
hat	ui/AntTweakBar/src/MiniSDL13.h	/^    Uint8 hat;$/;"	m	struct:SDL_JoyHatEvent
holden	cpp/read.cpp	/^std::vector<Shape*> read::holden(std::string path){$/;"	f	class:read
hw_available	ui/AntTweakBar/src/MiniSDL12.h	/^    Uint32 hw_available :1;$/;"	m	struct:SDL_VideoInfo
hw_available	ui/AntTweakBar/src/MiniSDL13.h	/^    Uint32 hw_available :1;$/;"	m	struct:SDL_VideoInfo
id	opengl/programs.h	/^  GLuint id;$/;"	m	struct:Program
idx	opengl/programs.h	/^  unsigned idx;$/;"	m	struct:Program
idxBuf	shapes.h	/^  GLuint idxBuf;$/;"	m	struct:Shape
inAir	Player.hpp	/^                bool inAir;$/;"	m	class:game::Player
inc	Rope.h	/^  float inc = 0.005;$/;"	m	struct:SoftDude
inc	cpp/loop.cpp	/^void inc(float* increment,float movementPerSecond){$/;"	f
increment	loop.h	/^typedef float increment;$/;"	t
incrementPointers	cpp/loop.cpp	/^  std::vector<float*> incrementPointers;$/;"	m	namespace:loop	file:
incrementValues	cpp/loop.cpp	/^  std::vector<float> incrementValues;$/;"	m	namespace:loop	file:
indices	shapes.h	/^  std::vector<unsigned short> indices;$/;"	m	struct:Shape
init	bak/programs.cpp	/^  void init(){$/;"	f	namespace:program
init	cpp/loop.cpp	/^  void init() {$/;"	f	namespace:loop
init	cpp/opengl/opengl.cpp	/^  void init(){$/;"	f	namespace:gl
init	cpp/opengl/programs.cpp	/^  void init(){$/;"	f	namespace:program
init	cpp/screen.cpp	/^  void init(){$/;"	f	namespace:screen
initUI	bak/GameScreen.cpp	/^void initUI()$/;"	f
initUI	cpp/screens/GameScreen.cpp	/^void initUI()$/;"	f
instance	bak/GameScreen.cpp	/^Screen* GameScreen::instance = new GameScreen();$/;"	m	class:GameScreen	file:
instance	cpp/screens/GameScreen.cpp	/^Screen* GameScreen::instance = new GameScreen();$/;"	m	class:GameScreen	file:
instance	screens/GameScreen.h	/^  static Screen* instance;$/;"	m	struct:GameScreen
instance	tmo/GameScreen.cpp	/^Screen* GameScreen::instance = new GameScreen();$/;"	m	class:GameScreen	file:
instances	shapes.h	/^  static std::vector<SimpleShape*> instances;$/;"	m	struct:SimpleShape
jaxis	ui/AntTweakBar/src/MiniSDL12.h	/^    SDL_JoyAxisEvent jaxis;$/;"	m	union:__anon11
jaxis	ui/AntTweakBar/src/MiniSDL13.h	/^    SDL_JoyAxisEvent jaxis;        $/;"	m	union:SDL_Event
jball	ui/AntTweakBar/src/MiniSDL12.h	/^    SDL_JoyBallEvent jball;$/;"	m	union:__anon11
jball	ui/AntTweakBar/src/MiniSDL13.h	/^    SDL_JoyBallEvent jball;        $/;"	m	union:SDL_Event
jbutton	ui/AntTweakBar/src/MiniSDL12.h	/^    SDL_JoyButtonEvent jbutton;$/;"	m	union:__anon11
jbutton	ui/AntTweakBar/src/MiniSDL13.h	/^    SDL_JoyButtonEvent jbutton;    $/;"	m	union:SDL_Event
jhat	ui/AntTweakBar/src/MiniSDL12.h	/^    SDL_JoyHatEvent jhat;$/;"	m	union:__anon11
jhat	ui/AntTweakBar/src/MiniSDL13.h	/^    SDL_JoyHatEvent jhat;          $/;"	m	union:SDL_Event
jump	cpp/Player.cpp	/^    void Player::jump()$/;"	f	class:game::Player
key	ui/AntTweakBar/src/MiniSDL12.h	/^    SDL_KeyboardEvent key;$/;"	m	union:__anon11
key	ui/AntTweakBar/src/MiniSDL13.h	/^    SDL_KeyboardEvent key;         $/;"	m	union:SDL_Event
keyInput	bak/GameScreen.cpp	/^void GameScreen::keyInput(){$/;"	f	class:GameScreen
keyInput	cpp/screens/GameScreen.cpp	/^void GameScreen::keyInput(){$/;"	f	class:GameScreen
keyInput	tmo/GameScreen.cpp	/^void GameScreen::keyInput(){$/;"	f	class:GameScreen
keysym	ui/AntTweakBar/src/MiniSDL12.h	/^    SDL_keysym keysym;$/;"	m	struct:SDL_KeyboardEvent
keysym	ui/AntTweakBar/src/MiniSDL13.h	/^    SDL_keysym keysym;     $/;"	m	struct:SDL_KeyboardEvent
length	ui/AntTweakBar/src/MiniSDL13.h	/^    int length;                                $/;"	m	struct:SDL_TextEditingEvent
lightPosUniform	opengl/programs.h	/^    GLuint lightPosUniform;$/;"	m	struct:program::DummyLighten
loop	cpp/loop.cpp	/^  void loop(){$/;"	f	namespace:loop
loop	cpp/loop.cpp	/^namespace loop{$/;"	n	file:
loop	loop.h	/^namespace loop{$/;"	n
m_AAMode	ui/AntTweakBar/src/TwMgr.h	/^    bool                 m_AAMode;          \/\/ Axis & angle mode -> disabled$/;"	m	struct:CQuaternionExt
m_Active	ui/AntTweakBar/src/TwBar.h	/^        bool                m_Active;$/;"	m	struct:CTwBar::CEditInPlace
m_Active	ui/AntTweakBar/src/TwBar.h	/^        bool                m_Active;$/;"	m	struct:CTwBar::CRotoSlider
m_ActiveMiddle	ui/AntTweakBar/src/TwBar.h	/^        bool                m_ActiveMiddle;$/;"	m	struct:CTwBar::CRotoSlider
m_Angle0	ui/AntTweakBar/src/TwBar.h	/^        double              m_Angle0;$/;"	m	struct:CTwBar::CRotoSlider
m_AngleDT	ui/AntTweakBar/src/TwBar.h	/^        double              m_AngleDT;$/;"	m	struct:CTwBar::CRotoSlider
m_Bar	ui/AntTweakBar/src/TwMgr.h	/^        CTwBar *        m_Bar;$/;"	m	struct:CTwMgr::CMemberProxy
m_BarAlwaysOnBottom	ui/AntTweakBar/src/TwMgr.h	/^    std::string         m_BarAlwaysOnBottom;$/;"	m	struct:CTwMgr
m_BarAlwaysOnTop	ui/AntTweakBar/src/TwMgr.h	/^    std::string         m_BarAlwaysOnTop;$/;"	m	struct:CTwMgr
m_BarInitColorHue	ui/AntTweakBar/src/TwMgr.h	/^    int                 m_BarInitColorHue;$/;"	m	struct:CTwMgr
m_BarLinkedToPopupList	ui/AntTweakBar/src/TwBar.h	/^    CTwBar *                m_BarLinkedToPopupList;$/;"	m	struct:CTwBar
m_Bars	ui/AntTweakBar/src/TwMgr.h	/^    std::vector<TwBar*> m_Bars;$/;"	m	struct:CTwMgr
m_BgColorPtr	ui/AntTweakBar/src/TwBar.h	/^    const color32 *         m_BgColorPtr;$/;"	m	struct:CTwVar
m_BgColors	ui/AntTweakBar/src/TwOpenGLCore.h	/^        std::vector<color32>m_BgColors;$/;"	m	struct:CTwGraphOpenGLCore::CTextObj
m_BgVerts	ui/AntTweakBar/src/TwOpenGLCore.h	/^        std::vector<Vec2>   m_BgVerts;$/;"	m	struct:CTwGraphOpenGLCore::CTextObj
m_Bool	ui/AntTweakBar/src/TwBar.h	/^        }                   m_Bool;$/;"	m	union:CTwVarAtom::UVal	typeref:struct:CTwVarAtom::UVal::CBoolVal
m_Button	ui/AntTweakBar/src/TwBar.h	/^        }                   m_Button;$/;"	m	union:CTwVarAtom::UVal	typeref:struct:CTwVarAtom::UVal::CButtonVal
m_ButtonAlign	ui/AntTweakBar/src/TwBar.h	/^    EButtonAlign            m_ButtonAlign;$/;"	m	struct:CTwBar
m_ButtonAlign	ui/AntTweakBar/src/TwMgr.h	/^    EButtonAlign        m_ButtonAlign;$/;"	m	struct:CTwMgr
m_CDStdStringCopyBuffers	ui/AntTweakBar/src/TwMgr.h	/^    std::map<void *, std::vector<char> > m_CDStdStringCopyBuffers;$/;"	m	struct:CTwMgr
m_CDStdStringRecords	ui/AntTweakBar/src/TwMgr.h	/^    std::vector<CCDStdStringRecord> m_CDStdStringRecords;$/;"	m	struct:CTwMgr
m_CDStdStrings	ui/AntTweakBar/src/TwMgr.h	/^    std::list<CCDStdString>  m_CDStdStrings;$/;"	m	struct:CTwMgr
m_CSStringBuffer	ui/AntTweakBar/src/TwMgr.h	/^    std::vector<char>   m_CSStringBuffer;$/;"	m	struct:CTwMgr
m_Callback	ui/AntTweakBar/src/TwBar.h	/^            TwButtonCallback m_Callback;$/;"	m	struct:CTwVarAtom::UVal::CButtonVal
m_CanHaveAlpha	ui/AntTweakBar/src/TwMgr.h	/^    bool                 m_CanHaveAlpha;$/;"	m	struct:CColorExt
m_CanRepeatMousePressed	ui/AntTweakBar/src/TwMgr.h	/^    bool                m_CanRepeatMousePressed;$/;"	m	struct:CTwMgr
m_CaretPos	ui/AntTweakBar/src/TwBar.h	/^        int                 m_CaretPos;$/;"	m	struct:CTwBar::CEditInPlace
m_Char	ui/AntTweakBar/src/TwBar.h	/^        TVal<unsigned char> m_Char;$/;"	m	union:CTwVarAtom::UVal
m_CharHeight	ui/AntTweakBar/src/TwFonts.h	/^    int             m_CharHeight;$/;"	m	struct:CTexFont
m_CharU0	ui/AntTweakBar/src/TwFonts.h	/^    float           m_CharU0[256];$/;"	m	struct:CTexFont
m_CharU1	ui/AntTweakBar/src/TwFonts.h	/^    float           m_CharU1[256];$/;"	m	struct:CTexFont
m_CharV0	ui/AntTweakBar/src/TwFonts.h	/^    float           m_CharV0[256];$/;"	m	struct:CTexFont
m_CharV1	ui/AntTweakBar/src/TwFonts.h	/^    float           m_CharV1[256];$/;"	m	struct:CTexFont
m_CharWidth	ui/AntTweakBar/src/TwFonts.h	/^    int             m_CharWidth[256];$/;"	m	struct:CTexFont
m_ClientData	ui/AntTweakBar/src/TwBar.h	/^    void *                  m_ClientData;$/;"	m	struct:CTwVarAtom
m_ClientData	ui/AntTweakBar/src/TwMgr.h	/^        void *               m_ClientData;$/;"	m	struct:CTwMgr::CCDStdString
m_ClientGetCallback	ui/AntTweakBar/src/TwMgr.h	/^        TwGetVarCallback     m_ClientGetCallback;$/;"	m	struct:CTwMgr::CCDStdString
m_ClientSetCallback	ui/AntTweakBar/src/TwMgr.h	/^        TwSetVarCallback     m_ClientSetCallback;$/;"	m	struct:CTwMgr::CCDStdString
m_ClientStdString	ui/AntTweakBar/src/TwMgr.h	/^        CClientStdString    m_ClientStdString;$/;"	m	struct:CTwMgr::CCDStdStringRecord
m_ClientStdStringBaseType	ui/AntTweakBar/src/TwMgr.h	/^    TwType              m_ClientStdStringBaseType;$/;"	m	struct:CTwMgr
m_ClientStdStringPtr	ui/AntTweakBar/src/TwMgr.h	/^        std::string *        m_ClientStdStringPtr;$/;"	m	struct:CTwMgr::CCDStdString
m_ClientStdStringStructSize	ui/AntTweakBar/src/TwMgr.h	/^    size_t              m_ClientStdStringStructSize;$/;"	m	struct:CTwMgr
m_ClientStructSize	ui/AntTweakBar/src/TwMgr.h	/^        size_t                      m_ClientStructSize;$/;"	m	struct:CTwMgr::CStruct
m_Clipboard	ui/AntTweakBar/src/TwBar.h	/^        std::string         m_Clipboard;$/;"	m	struct:CTwBar::CEditInPlace
m_Closing	ui/AntTweakBar/src/TwBar.h	/^        bool                m_Closing;$/;"	m	struct:CTwBar::CHierTag
m_ColBg	ui/AntTweakBar/src/TwBar.h	/^    color32                 m_ColBg, m_ColBg1, m_ColBg2;$/;"	m	struct:CTwBar
m_ColBg1	ui/AntTweakBar/src/TwBar.h	/^    color32                 m_ColBg, m_ColBg1, m_ColBg2;$/;"	m	struct:CTwBar
m_ColBg2	ui/AntTweakBar/src/TwBar.h	/^    color32                 m_ColBg, m_ColBg1, m_ColBg2;$/;"	m	struct:CTwBar
m_ColBtn	ui/AntTweakBar/src/TwBar.h	/^    color32                 m_ColBtn;$/;"	m	struct:CTwBar
m_ColEditBg	ui/AntTweakBar/src/TwBar.h	/^    color32                 m_ColEditBg;$/;"	m	struct:CTwBar
m_ColEditSelBg	ui/AntTweakBar/src/TwBar.h	/^    color32                 m_ColEditSelBg;$/;"	m	struct:CTwBar
m_ColEditSelText	ui/AntTweakBar/src/TwBar.h	/^    color32                 m_ColEditSelText;$/;"	m	struct:CTwBar
m_ColEditText	ui/AntTweakBar/src/TwBar.h	/^    color32                 m_ColEditText;$/;"	m	struct:CTwBar
m_ColFold	ui/AntTweakBar/src/TwBar.h	/^    color32                 m_ColFold;$/;"	m	struct:CTwBar
m_ColGrpBg	ui/AntTweakBar/src/TwBar.h	/^    color32                 m_ColGrpBg;$/;"	m	struct:CTwBar
m_ColGrpText	ui/AntTweakBar/src/TwBar.h	/^    color32                 m_ColGrpText;$/;"	m	struct:CTwBar
m_ColHelpBg	ui/AntTweakBar/src/TwBar.h	/^    color32                 m_ColHelpBg;$/;"	m	struct:CTwBar
m_ColHelpText	ui/AntTweakBar/src/TwBar.h	/^    color32                 m_ColHelpText;$/;"	m	struct:CTwBar
m_ColHierBg	ui/AntTweakBar/src/TwBar.h	/^    color32                 m_ColHierBg;$/;"	m	struct:CTwBar
m_ColHighBg0	ui/AntTweakBar/src/TwBar.h	/^    color32                 m_ColHighBg0;$/;"	m	struct:CTwBar
m_ColHighBg1	ui/AntTweakBar/src/TwBar.h	/^    color32                 m_ColHighBg1;$/;"	m	struct:CTwBar
m_ColHighBtn	ui/AntTweakBar/src/TwBar.h	/^    color32                 m_ColHighBtn;$/;"	m	struct:CTwBar
m_ColHighFold	ui/AntTweakBar/src/TwBar.h	/^    color32                 m_ColHighFold;$/;"	m	struct:CTwBar
m_ColInfoText	ui/AntTweakBar/src/TwBar.h	/^    color32                 m_ColInfoText;$/;"	m	struct:CTwBar
m_ColLabelText	ui/AntTweakBar/src/TwBar.h	/^    color32                 m_ColLabelText;$/;"	m	struct:CTwBar
m_ColLine	ui/AntTweakBar/src/TwBar.h	/^    color32                 m_ColLine;$/;"	m	struct:CTwBar
m_ColLineShadow	ui/AntTweakBar/src/TwBar.h	/^    color32                 m_ColLineShadow;$/;"	m	struct:CTwBar
m_ColRoto	ui/AntTweakBar/src/TwBar.h	/^    color32                 m_ColRoto;$/;"	m	struct:CTwBar
m_ColRotoBound	ui/AntTweakBar/src/TwBar.h	/^    color32                 m_ColRotoBound;$/;"	m	struct:CTwBar
m_ColRotoVal	ui/AntTweakBar/src/TwBar.h	/^    color32                 m_ColRotoVal;$/;"	m	struct:CTwBar
m_ColSeparator	ui/AntTweakBar/src/TwBar.h	/^    color32                 m_ColSeparator;$/;"	m	struct:CTwBar
m_ColShortcutBg	ui/AntTweakBar/src/TwBar.h	/^    color32                 m_ColShortcutBg;$/;"	m	struct:CTwBar
m_ColShortcutText	ui/AntTweakBar/src/TwBar.h	/^    color32                 m_ColShortcutText;$/;"	m	struct:CTwBar
m_ColStaticText	ui/AntTweakBar/src/TwBar.h	/^    color32                 m_ColStaticText;$/;"	m	struct:CTwBar
m_ColStructBg	ui/AntTweakBar/src/TwBar.h	/^    color32                 m_ColStructBg;$/;"	m	struct:CTwBar
m_ColStructText	ui/AntTweakBar/src/TwBar.h	/^    color32                 m_ColStructText;$/;"	m	struct:CTwBar
m_ColTitleBg	ui/AntTweakBar/src/TwBar.h	/^    color32                 m_ColTitleBg;$/;"	m	struct:CTwBar
m_ColTitleHighBg	ui/AntTweakBar/src/TwBar.h	/^    color32                 m_ColTitleHighBg;$/;"	m	struct:CTwBar
m_ColTitleShadow	ui/AntTweakBar/src/TwBar.h	/^    color32                 m_ColTitleShadow;$/;"	m	struct:CTwBar
m_ColTitleText	ui/AntTweakBar/src/TwBar.h	/^    color32                 m_ColTitleText;$/;"	m	struct:CTwBar
m_ColTitleUnactiveBg	ui/AntTweakBar/src/TwBar.h	/^    color32                 m_ColTitleUnactiveBg;$/;"	m	struct:CTwBar
m_ColUnderline	ui/AntTweakBar/src/TwBar.h	/^    color32                 m_ColUnderline;$/;"	m	struct:CTwBar
m_ColValBg	ui/AntTweakBar/src/TwBar.h	/^    color32                 m_ColValBg;$/;"	m	struct:CTwBar
m_ColValMax	ui/AntTweakBar/src/TwBar.h	/^    color32                 m_ColValMax;$/;"	m	struct:CTwBar
m_ColValMin	ui/AntTweakBar/src/TwBar.h	/^    color32                 m_ColValMin;$/;"	m	struct:CTwBar
m_ColValText	ui/AntTweakBar/src/TwBar.h	/^    color32                 m_ColValText;$/;"	m	struct:CTwBar
m_ColValTextNE	ui/AntTweakBar/src/TwBar.h	/^    color32                 m_ColValTextNE;$/;"	m	struct:CTwBar
m_ColValTextRO	ui/AntTweakBar/src/TwBar.h	/^    color32                 m_ColValTextRO;$/;"	m	struct:CTwBar
m_Color	ui/AntTweakBar/src/TwBar.h	/^    color32                 m_Color;$/;"	m	struct:CTwBar
m_ColorPtr	ui/AntTweakBar/src/TwBar.h	/^    const color32 *         m_ColorPtr;$/;"	m	struct:CTwVar
m_Colors	ui/AntTweakBar/src/TwOpenGLCore.h	/^        std::vector<color32>m_Colors;$/;"	m	struct:CTwGraphOpenGLCore::CTextObj
m_Contained	ui/AntTweakBar/src/TwBar.h	/^    bool                    m_Contained;$/;"	m	struct:CTwBar
m_Contained	ui/AntTweakBar/src/TwMgr.h	/^    bool                m_Contained;$/;"	m	struct:CTwMgr
m_CopyCDStringToClient	ui/AntTweakBar/src/TwMgr.h	/^    TwCopyCDStringToClient  m_CopyCDStringToClient;$/;"	m	struct:CTwMgr
m_CopyStdStringToClient	ui/AntTweakBar/src/TwMgr.h	/^    TwCopyStdStringToClient m_CopyStdStringToClient;$/;"	m	struct:CTwMgr
m_CopyVarFromExtCallback	ui/AntTweakBar/src/TwMgr.h	/^        TwCopyVarFromExtCallback    m_CopyVarFromExtCallback;$/;"	m	struct:CTwMgr::CStruct
m_CopyVarToExtCallback	ui/AntTweakBar/src/TwMgr.h	/^        TwCopyVarToExtCallback      m_CopyVarToExtCallback;$/;"	m	struct:CTwMgr::CStruct
m_Current	ui/AntTweakBar/src/TwBar.h	/^        CPoint              m_Current;$/;"	m	struct:CTwBar::CRotoSlider
m_CurrentDbgFile	ui/AntTweakBar/src/TwMgr.h	/^    const char *        m_CurrentDbgFile;$/;"	m	struct:CTwMgr
m_CurrentDbgLine	ui/AntTweakBar/src/TwMgr.h	/^    int                 m_CurrentDbgLine;$/;"	m	struct:CTwMgr
m_CurrentFont	ui/AntTweakBar/src/TwMgr.h	/^    const CTexFont *    m_CurrentFont;$/;"	m	struct:CTwMgr
m_CurrentValue	ui/AntTweakBar/src/TwBar.h	/^        double              m_CurrentValue;$/;"	m	struct:CTwBar::CRotoSlider
m_CurrentXDisplay	ui/AntTweakBar/src/TwMgr.h	/^        Display *       m_CurrentXDisplay;$/;"	m	struct:CTwMgr
m_CurrentXWindow	ui/AntTweakBar/src/TwMgr.h	/^        Window          m_CurrentXWindow;$/;"	m	struct:CTwMgr
m_CursorArrow	ui/AntTweakBar/src/TwMgr.h	/^    CCursor             m_CursorArrow;$/;"	m	struct:CTwMgr
m_CursorBottomLeft	ui/AntTweakBar/src/TwMgr.h	/^    CCursor             m_CursorBottomLeft;$/;"	m	struct:CTwMgr
m_CursorBottomRight	ui/AntTweakBar/src/TwMgr.h	/^    CCursor             m_CursorBottomRight;    $/;"	m	struct:CTwMgr
m_CursorCenter	ui/AntTweakBar/src/TwMgr.h	/^    CCursor             m_CursorCenter;$/;"	m	struct:CTwMgr
m_CursorCross	ui/AntTweakBar/src/TwMgr.h	/^    CCursor             m_CursorCross;$/;"	m	struct:CTwMgr
m_CursorHand	ui/AntTweakBar/src/TwMgr.h	/^    CCursor             m_CursorHand;$/;"	m	struct:CTwMgr
m_CursorHelp	ui/AntTweakBar/src/TwMgr.h	/^    CCursor             m_CursorHelp;$/;"	m	struct:CTwMgr
m_CursorIBeam	ui/AntTweakBar/src/TwMgr.h	/^    CCursor             m_CursorIBeam;$/;"	m	struct:CTwMgr
m_CursorMove	ui/AntTweakBar/src/TwMgr.h	/^    CCursor             m_CursorMove;$/;"	m	struct:CTwMgr
m_CursorNS	ui/AntTweakBar/src/TwMgr.h	/^    CCursor             m_CursorNS;$/;"	m	struct:CTwMgr
m_CursorNo	ui/AntTweakBar/src/TwMgr.h	/^    CCursor             m_CursorNo;$/;"	m	struct:CTwMgr
m_CursorPoint	ui/AntTweakBar/src/TwMgr.h	/^    CCursor             m_CursorPoint;$/;"	m	struct:CTwMgr
m_CursorTopLeft	ui/AntTweakBar/src/TwMgr.h	/^    CCursor             m_CursorTopLeft;$/;"	m	struct:CTwMgr
m_CursorTopRight	ui/AntTweakBar/src/TwMgr.h	/^    CCursor             m_CursorTopRight;$/;"	m	struct:CTwMgr
m_CursorUpArrow	ui/AntTweakBar/src/TwMgr.h	/^    CCursor             m_CursorUpArrow;$/;"	m	struct:CTwMgr
m_CursorWE	ui/AntTweakBar/src/TwMgr.h	/^    CCursor             m_CursorWE;$/;"	m	struct:CTwMgr
m_CursorsCreated	ui/AntTweakBar/src/TwMgr.h	/^    bool                m_CursorsCreated;$/;"	m	struct:CTwMgr
m_Custom	ui/AntTweakBar/src/TwBar.h	/^        }                   m_Custom;$/;"	m	union:CTwVarAtom::UVal	typeref:struct:CTwVarAtom::UVal::CCustomVal
m_CustomActiveStructProxy	ui/AntTweakBar/src/TwBar.h	/^    CTwMgr::CStructProxy *  m_CustomActiveStructProxy;$/;"	m	struct:CTwBar
m_CustomCaptureFocus	ui/AntTweakBar/src/TwMgr.h	/^        bool             m_CustomCaptureFocus;$/;"	m	struct:CTwMgr::CStructProxy
m_CustomDrawCallback	ui/AntTweakBar/src/TwMgr.h	/^        TwCustomDrawCallback        m_CustomDrawCallback;$/;"	m	struct:CTwMgr::CStructProxy
m_CustomIndexFirst	ui/AntTweakBar/src/TwMgr.h	/^        int              m_CustomIndexFirst;$/;"	m	struct:CTwMgr::CStructProxy
m_CustomIndexLast	ui/AntTweakBar/src/TwMgr.h	/^        int              m_CustomIndexLast;$/;"	m	struct:CTwMgr::CStructProxy
m_CustomMouseButtonCallback	ui/AntTweakBar/src/TwMgr.h	/^        TwCustomMouseButtonCallback m_CustomMouseButtonCallback;$/;"	m	struct:CTwMgr::CStructProxy
m_CustomMouseLeaveCallback	ui/AntTweakBar/src/TwMgr.h	/^        TwCustomMouseLeaveCallback  m_CustomMouseLeaveCallback;$/;"	m	struct:CTwMgr::CStructProxy
m_CustomMouseMotionCallback	ui/AntTweakBar/src/TwMgr.h	/^        TwCustomMouseMotionCallback m_CustomMouseMotionCallback;$/;"	m	struct:CTwMgr::CStructProxy
m_CustomRecords	ui/AntTweakBar/src/TwBar.h	/^    CustomMap               m_CustomRecords;$/;"	m	struct:CTwBar
m_Customs	ui/AntTweakBar/src/TwMgr.h	/^    std::vector<CCustom *> m_Customs;$/;"	m	struct:CTwMgr
m_DarkText	ui/AntTweakBar/src/TwBar.h	/^    bool                    m_DarkText;$/;"	m	struct:CTwBar
m_Data	ui/AntTweakBar/src/TwMgr.h	/^        char            m_Data[sizeof(std::string)+2*sizeof(void *)];$/;"	m	struct:CTwMgr::CClientStdString
m_Data	ui/AntTweakBar/src/TwMgr.h	/^        char            m_Data[sizeof(std::string)+2*sizeof(void *)];$/;"	m	struct:CTwMgr::CLibStdString
m_DataPtr	ui/AntTweakBar/src/TwMgr.h	/^        void *              m_DataPtr;$/;"	m	struct:CTwMgr::CCDStdStringRecord
m_Decr	ui/AntTweakBar/src/TwBar.h	/^            int             m_Decr[2];$/;"	m	struct:CTwVarAtom::UVal::CShortcutVal
m_DefString	ui/AntTweakBar/src/TwMgr.h	/^        std::string     m_DefString;$/;"	m	struct:CTwMgr::CStructMember
m_DeleteStructData	ui/AntTweakBar/src/TwMgr.h	/^        bool             m_DeleteStructData;$/;"	m	struct:CTwMgr::CStructProxy
m_Device	ui/AntTweakBar/src/TwMgr.h	/^    void *              m_Device;$/;"	m	struct:CTwMgr
m_Dir	ui/AntTweakBar/src/TwMgr.h	/^    double               m_Dir[3];          \/\/ If not zero, display one direction vector$/;"	m	struct:CQuaternionExt
m_DirColor	ui/AntTweakBar/src/TwMgr.h	/^    color32              m_DirColor;        \/\/ Direction vector color$/;"	m	struct:CQuaternionExt
m_DontClip	ui/AntTweakBar/src/TwBar.h	/^    bool                    m_DontClip;$/;"	m	struct:CTwVar
m_DrawBoolBtn	ui/AntTweakBar/src/TwBar.h	/^    bool                    m_DrawBoolBtn;$/;"	m	struct:CTwBar
m_DrawClickBtn	ui/AntTweakBar/src/TwBar.h	/^    bool                    m_DrawClickBtn;$/;"	m	struct:CTwBar
m_DrawHandles	ui/AntTweakBar/src/TwBar.h	/^    bool                    m_DrawHandles;$/;"	m	struct:CTwBar
m_DrawIncrDecrBtn	ui/AntTweakBar/src/TwBar.h	/^    bool                    m_DrawIncrDecrBtn;$/;"	m	struct:CTwBar
m_DrawListBtn	ui/AntTweakBar/src/TwBar.h	/^    bool                    m_DrawListBtn;$/;"	m	struct:CTwBar
m_DrawRotoBtn	ui/AntTweakBar/src/TwBar.h	/^    bool                    m_DrawRotoBtn;$/;"	m	struct:CTwBar
m_Drawing	ui/AntTweakBar/src/TwOpenGLCore.h	/^    bool                m_Drawing;$/;"	m	class:CTwGraphOpenGLCore
m_EditInPlace	ui/AntTweakBar/src/TwBar.h	/^    CEditInPlace            m_EditInPlace;$/;"	m	struct:CTwBar
m_EditSelTextObj	ui/AntTweakBar/src/TwBar.h	/^        void *              m_EditSelTextObj;$/;"	m	struct:CTwBar::CEditInPlace
m_EditTextObj	ui/AntTweakBar/src/TwBar.h	/^        void *              m_EditTextObj;$/;"	m	struct:CTwBar::CEditInPlace
m_Entries	ui/AntTweakBar/src/TwMgr.h	/^        CEntries        m_Entries;$/;"	m	struct:CTwMgr::CEnum
m_Enum	ui/AntTweakBar/src/TwBar.h	/^        }                   m_Enum;$/;"	m	union:CTwVarAtom::UVal	typeref:struct:CTwVarAtom::UVal::CEnumVal
m_Enums	ui/AntTweakBar/src/TwMgr.h	/^    std::vector<CEnum>  m_Enums;$/;"	m	struct:CTwMgr
m_ExtClientData	ui/AntTweakBar/src/TwMgr.h	/^        void *                      m_ExtClientData;$/;"	m	struct:CTwMgr::CStruct
m_FalseString	ui/AntTweakBar/src/TwBar.h	/^            char *          m_FalseString;$/;"	m	struct:CTwVarAtom::UVal::CBoolVal
m_FirstChar	ui/AntTweakBar/src/TwBar.h	/^        int                 m_FirstChar;$/;"	m	struct:CTwBar::CEditInPlace
m_FirstLine	ui/AntTweakBar/src/TwBar.h	/^    int                     m_FirstLine;$/;"	m	struct:CTwBar
m_FirstLine0	ui/AntTweakBar/src/TwBar.h	/^    int                     m_FirstLine0;$/;"	m	struct:CTwBar
m_Float32	ui/AntTweakBar/src/TwBar.h	/^        TVal<float>         m_Float32;$/;"	m	union:CTwVarAtom::UVal
m_Float64	ui/AntTweakBar/src/TwBar.h	/^        TVal<double>        m_Float64;$/;"	m	union:CTwVarAtom::UVal
m_Font	ui/AntTweakBar/src/TwBar.h	/^    const CTexFont *        m_Font;$/;"	m	struct:CTwBar
m_FontResizable	ui/AntTweakBar/src/TwMgr.h	/^    bool                m_FontResizable;$/;"	m	struct:CTwMgr
m_FontTex	ui/AntTweakBar/src/TwOpenGLCore.h	/^    const CTexFont *    m_FontTex;$/;"	m	class:CTwGraphOpenGLCore
m_FontTexID	ui/AntTweakBar/src/TwOpenGLCore.h	/^    GLuint              m_FontTexID;$/;"	m	class:CTwGraphOpenGLCore
m_FreeFalseString	ui/AntTweakBar/src/TwBar.h	/^            bool            m_FreeFalseString;$/;"	m	struct:CTwVarAtom::UVal::CBoolVal
m_FreeTrueString	ui/AntTweakBar/src/TwBar.h	/^            bool            m_FreeTrueString;$/;"	m	struct:CTwVarAtom::UVal::CBoolVal
m_FuncPtr	ui/AntTweakBar/src/LoadOGLCore.cpp	/^    GLCore::PFNOpenGL * m_FuncPtr;$/;"	m	struct:COGLCoreFuncRec	file:
m_GetCallback	ui/AntTweakBar/src/TwBar.h	/^    TwGetVarCallback        m_GetCallback;$/;"	m	struct:CTwVarAtom
m_Graph	ui/AntTweakBar/src/TwMgr.h	/^    class ITwGraph *    m_Graph;$/;"	m	struct:CTwMgr	typeref:class:CTwMgr::ITwGraph
m_GraphAPI	ui/AntTweakBar/src/TwMgr.h	/^    ETwGraphAPI         m_GraphAPI;$/;"	m	struct:CTwMgr
m_HLS	ui/AntTweakBar/src/TwMgr.h	/^    bool                 m_HLS, m_HasAlpha, m_OGL;$/;"	m	struct:CColorExt
m_HasAlpha	ui/AntTweakBar/src/TwMgr.h	/^    bool                 m_HLS, m_HasAlpha, m_OGL;$/;"	m	struct:CColorExt
m_HasPrevious	ui/AntTweakBar/src/TwBar.h	/^        bool                m_HasPrevious;$/;"	m	struct:CTwBar::CRotoSlider
m_HeadersTextObj	ui/AntTweakBar/src/TwBar.h	/^    void *                  m_HeadersTextObj;$/;"	m	struct:CTwBar
m_Height	ui/AntTweakBar/src/TwBar.h	/^    int                     m_Height;$/;"	m	struct:CTwBar
m_Help	ui/AntTweakBar/src/TwBar.h	/^    std::string             m_Help;$/;"	m	struct:CTwBar
m_Help	ui/AntTweakBar/src/TwBar.h	/^    std::string             m_Help;$/;"	m	struct:CTwVar
m_Help	ui/AntTweakBar/src/TwMgr.h	/^        std::string                 m_Help;$/;"	m	struct:CTwMgr::CStruct
m_Help	ui/AntTweakBar/src/TwMgr.h	/^        std::string     m_Help;$/;"	m	struct:CTwMgr::CStructMember
m_Help	ui/AntTweakBar/src/TwMgr.h	/^    std::string         m_Help;$/;"	m	struct:CTwMgr
m_HelpBar	ui/AntTweakBar/src/TwMgr.h	/^    TwBar *             m_HelpBar;$/;"	m	struct:CTwMgr
m_HelpBarNotUpToDate	ui/AntTweakBar/src/TwMgr.h	/^    bool                m_HelpBarNotUpToDate;$/;"	m	struct:CTwMgr
m_HelpBarUpdateNow	ui/AntTweakBar/src/TwMgr.h	/^    bool                m_HelpBarUpdateNow;$/;"	m	struct:CTwMgr
m_HelpStruct	ui/AntTweakBar/src/TwBar.h	/^        }                   m_HelpStruct;$/;"	m	union:CTwVarAtom::UVal	typeref:struct:CTwVarAtom::UVal::CHelpStruct
m_Hexa	ui/AntTweakBar/src/TwBar.h	/^        bool                m_Hexa;$/;"	m	struct:CTwVarAtom::TVal
m_HierTags	ui/AntTweakBar/src/TwBar.h	/^    std::vector<CHierTag>   m_HierTags;$/;"	m	struct:CTwBar
m_HighlightBoolBtn	ui/AntTweakBar/src/TwBar.h	/^    bool                    m_HighlightBoolBtn;$/;"	m	struct:CTwBar
m_HighlightClickBtn	ui/AntTweakBar/src/TwBar.h	/^    bool                    m_HighlightClickBtn;$/;"	m	struct:CTwBar
m_HighlightClickBtnAuto	ui/AntTweakBar/src/TwBar.h	/^    double                  m_HighlightClickBtnAuto;$/;"	m	struct:CTwBar
m_HighlightDecrBtn	ui/AntTweakBar/src/TwBar.h	/^    bool                    m_HighlightDecrBtn;$/;"	m	struct:CTwBar
m_HighlightDnScroll	ui/AntTweakBar/src/TwBar.h	/^    bool                    m_HighlightDnScroll;$/;"	m	struct:CTwBar
m_HighlightFont	ui/AntTweakBar/src/TwBar.h	/^    bool                    m_HighlightFont;$/;"	m	struct:CTwBar
m_HighlightIncrBtn	ui/AntTweakBar/src/TwBar.h	/^    bool                    m_HighlightIncrBtn;$/;"	m	struct:CTwBar
m_HighlightLabelsHeader	ui/AntTweakBar/src/TwBar.h	/^    bool                    m_HighlightLabelsHeader;$/;"	m	struct:CTwBar
m_HighlightListBtn	ui/AntTweakBar/src/TwBar.h	/^    bool                    m_HighlightListBtn;$/;"	m	struct:CTwBar
m_HighlightMaximize	ui/AntTweakBar/src/TwBar.h	/^    bool                    m_HighlightMaximize;$/;"	m	struct:CTwBar
m_HighlightMinimize	ui/AntTweakBar/src/TwBar.h	/^    bool                    m_HighlightMinimize;$/;"	m	struct:CTwBar
m_HighlightRotoBtn	ui/AntTweakBar/src/TwBar.h	/^    bool                    m_HighlightRotoBtn;$/;"	m	struct:CTwBar
m_HighlightScroll	ui/AntTweakBar/src/TwBar.h	/^    bool                    m_HighlightScroll;$/;"	m	struct:CTwBar
m_HighlightTitle	ui/AntTweakBar/src/TwBar.h	/^    bool                    m_HighlightTitle;$/;"	m	struct:CTwBar
m_HighlightUpScroll	ui/AntTweakBar/src/TwBar.h	/^    bool                    m_HighlightUpScroll;$/;"	m	struct:CTwBar
m_HighlightValWidth	ui/AntTweakBar/src/TwBar.h	/^    bool                    m_HighlightValWidth;$/;"	m	struct:CTwBar
m_HighlightValuesHeader	ui/AntTweakBar/src/TwBar.h	/^    bool                    m_HighlightValuesHeader;$/;"	m	struct:CTwBar
m_Highlighted	ui/AntTweakBar/src/TwMgr.h	/^    bool                 m_Highlighted;$/;"	m	struct:CQuaternionExt
m_HighlightedLine	ui/AntTweakBar/src/TwBar.h	/^    int                     m_HighlightedLine;$/;"	m	struct:CTwBar
m_HighlightedLineLastValid	ui/AntTweakBar/src/TwBar.h	/^    int                     m_HighlightedLineLastValid;$/;"	m	struct:CTwBar
m_HighlightedLinePrev	ui/AntTweakBar/src/TwBar.h	/^    int                     m_HighlightedLinePrev;$/;"	m	struct:CTwBar
m_IconAlign	ui/AntTweakBar/src/TwMgr.h	/^    int                 m_IconAlign;    \/\/ 0: vertical, 1: horizontal$/;"	m	struct:CTwMgr
m_IconMarginX	ui/AntTweakBar/src/TwMgr.h	/^    int                 m_IconMarginX, m_IconMarginY;$/;"	m	struct:CTwMgr
m_IconMarginY	ui/AntTweakBar/src/TwMgr.h	/^    int                 m_IconMarginX, m_IconMarginY;$/;"	m	struct:CTwMgr
m_IconPos	ui/AntTweakBar/src/TwMgr.h	/^    int                 m_IconPos;      \/\/ 0: bottom-left, 1:bottom-right, 2:top-left, 3:top-right$/;"	m	struct:CTwMgr
m_Iconifiable	ui/AntTweakBar/src/TwBar.h	/^    bool                    m_Iconifiable;$/;"	m	struct:CTwBar
m_Incr	ui/AntTweakBar/src/TwBar.h	/^            int             m_Incr[2];$/;"	m	struct:CTwVarAtom::UVal::CShortcutVal
m_IndexMax	ui/AntTweakBar/src/TwBar.h	/^        int                 m_IndexMax;$/;"	m	struct:CTwBar::CCustomRecord
m_IndexMin	ui/AntTweakBar/src/TwBar.h	/^        int                 m_IndexMin;$/;"	m	struct:CTwBar::CCustomRecord
m_InfoBuildText	ui/AntTweakBar/src/TwMgr.h	/^    bool                m_InfoBuildText;$/;"	m	struct:CTwMgr
m_InfoTextObj	ui/AntTweakBar/src/TwMgr.h	/^    void *              m_InfoTextObj;$/;"	m	struct:CTwMgr
m_Int16	ui/AntTweakBar/src/TwBar.h	/^        TVal<signed short>  m_Int16;$/;"	m	union:CTwVarAtom::UVal
m_Int32	ui/AntTweakBar/src/TwBar.h	/^        TVal<signed int>    m_Int32;$/;"	m	union:CTwVarAtom::UVal
m_Int8	ui/AntTweakBar/src/TwBar.h	/^        TVal<signed char>   m_Int8;$/;"	m	union:CTwVarAtom::UVal
m_IsColorF	ui/AntTweakBar/src/TwMgr.h	/^    bool                 m_IsColorF;$/;"	m	struct:CColorExt
m_IsDir	ui/AntTweakBar/src/TwMgr.h	/^    bool                 m_IsDir;           \/\/ Mapped to a dir vector instead of a quat$/;"	m	struct:CQuaternionExt
m_IsExt	ui/AntTweakBar/src/TwMgr.h	/^        bool                        m_IsExt;$/;"	m	struct:CTwMgr::CStruct
m_IsFloat	ui/AntTweakBar/src/TwMgr.h	/^    bool                 m_IsFloat;         \/\/ Quat\/Dir uses floats$/;"	m	struct:CQuaternionExt
m_IsHelpBar	ui/AntTweakBar/src/TwBar.h	/^    bool                    m_IsHelpBar;$/;"	m	struct:CTwBar
m_IsMinimized	ui/AntTweakBar/src/TwBar.h	/^    bool                    m_IsMinimized;$/;"	m	struct:CTwBar
m_IsPopupList	ui/AntTweakBar/src/TwBar.h	/^    bool                    m_IsPopupList;$/;"	m	struct:CTwBar
m_IsRepeatingMousePressed	ui/AntTweakBar/src/TwMgr.h	/^    bool                m_IsRepeatingMousePressed;$/;"	m	struct:CTwMgr
m_IsRoot	ui/AntTweakBar/src/TwBar.h	/^    bool                    m_IsRoot;$/;"	m	struct:CTwVar
m_KeyDecr	ui/AntTweakBar/src/TwBar.h	/^    int                     m_KeyDecr[2];   \/\/ [0]=key_code [1]=modifiers$/;"	m	struct:CTwVarAtom
m_KeyIncr	ui/AntTweakBar/src/TwBar.h	/^    int                     m_KeyIncr[2];   \/\/ [0]=key_code [1]=modifiers$/;"	m	struct:CTwVarAtom
m_KeyPressedBuildText	ui/AntTweakBar/src/TwMgr.h	/^    bool                m_KeyPressedBuildText;$/;"	m	struct:CTwMgr
m_KeyPressedStr	ui/AntTweakBar/src/TwMgr.h	/^    std::string         m_KeyPressedStr;$/;"	m	struct:CTwMgr
m_KeyPressedTextObj	ui/AntTweakBar/src/TwMgr.h	/^    void *              m_KeyPressedTextObj;$/;"	m	struct:CTwMgr
m_KeyPressedTime	ui/AntTweakBar/src/TwMgr.h	/^    float               m_KeyPressedTime;$/;"	m	struct:CTwMgr
m_Label	ui/AntTweakBar/src/TwBar.h	/^    std::string             m_Label;$/;"	m	struct:CTwBar
m_Label	ui/AntTweakBar/src/TwBar.h	/^    std::string             m_Label;$/;"	m	struct:CTwVar
m_Label	ui/AntTweakBar/src/TwMgr.h	/^        std::string     m_Label;$/;"	m	struct:CTwMgr::CStructMember
m_LabelsTextObj	ui/AntTweakBar/src/TwBar.h	/^    void *                  m_LabelsTextObj;$/;"	m	struct:CTwBar
m_LastDrawTime	ui/AntTweakBar/src/TwMgr.h	/^    double              m_LastDrawTime;$/;"	m	struct:CTwMgr
m_LastError	ui/AntTweakBar/src/TwMgr.h	/^    const char *        m_LastError;$/;"	m	struct:CTwMgr
m_LastHelpUpdateTime	ui/AntTweakBar/src/TwMgr.h	/^    float               m_LastHelpUpdateTime;$/;"	m	struct:CTwMgr
m_LastMousePressedButtonID	ui/AntTweakBar/src/TwMgr.h	/^    TwMouseButtonID     m_LastMousePressedButtonID;$/;"	m	struct:CTwMgr
m_LastMousePressedPosition	ui/AntTweakBar/src/TwMgr.h	/^    int                 m_LastMousePressedPosition[2];$/;"	m	struct:CTwMgr
m_LastMousePressedTime	ui/AntTweakBar/src/TwMgr.h	/^    double              m_LastMousePressedTime;$/;"	m	struct:CTwMgr
m_LastMouseWheelPos	ui/AntTweakBar/src/TwMgr.h	/^    int                 m_LastMouseWheelPos;$/;"	m	struct:CTwMgr
m_LastMouseX	ui/AntTweakBar/src/TwMgr.h	/^    int                 m_LastMouseX;$/;"	m	struct:CTwMgr
m_LastMouseY	ui/AntTweakBar/src/TwMgr.h	/^    int                 m_LastMouseY;$/;"	m	struct:CTwMgr
m_LastUpdateTime	ui/AntTweakBar/src/TwBar.h	/^    float                   m_LastUpdateTime;$/;"	m	struct:CTwBar
m_LeftMargin	ui/AntTweakBar/src/TwBar.h	/^    signed short            m_LeftMargin;$/;"	m	struct:CTwVar
m_Level	ui/AntTweakBar/src/TwBar.h	/^        int                 m_Level;$/;"	m	struct:CTwBar::CHierTag
m_LibStr	ui/AntTweakBar/src/TwMgr.h	/^        std::string     m_LibStr;$/;"	m	struct:CTwMgr::CClientStdString
m_LineRectColors	ui/AntTweakBar/src/TwOpenGLCore.h	/^    GLuint              m_LineRectColors;$/;"	m	class:CTwGraphOpenGLCore
m_LineRectFS	ui/AntTweakBar/src/TwOpenGLCore.h	/^    GLuint              m_LineRectFS;$/;"	m	class:CTwGraphOpenGLCore
m_LineRectProgram	ui/AntTweakBar/src/TwOpenGLCore.h	/^    GLuint              m_LineRectProgram;$/;"	m	class:CTwGraphOpenGLCore
m_LineRectVArray	ui/AntTweakBar/src/TwOpenGLCore.h	/^    GLuint              m_LineRectVArray;$/;"	m	class:CTwGraphOpenGLCore
m_LineRectVS	ui/AntTweakBar/src/TwOpenGLCore.h	/^    GLuint              m_LineRectVS;$/;"	m	class:CTwGraphOpenGLCore
m_LineRectVertices	ui/AntTweakBar/src/TwOpenGLCore.h	/^    GLuint              m_LineRectVertices;$/;"	m	class:CTwGraphOpenGLCore
m_LineSep	ui/AntTweakBar/src/TwBar.h	/^    int                     m_LineSep;$/;"	m	struct:CTwBar
m_LocalString	ui/AntTweakBar/src/TwMgr.h	/^        char                 m_LocalString[sizeof(std::string)+2*sizeof(void*)]; \/\/+2*sizeof(void*) because of VC++ std::string extra info in Debug$/;"	m	struct:CTwMgr::CCDStdString
m_Max	ui/AntTweakBar/src/TwBar.h	/^        _T                  m_Max;$/;"	m	struct:CTwVarAtom::TVal
m_MemberIndex	ui/AntTweakBar/src/TwMgr.h	/^        int             m_MemberIndex;$/;"	m	struct:CTwMgr::CMemberProxy
m_MemberProxies	ui/AntTweakBar/src/TwMgr.h	/^    std::list<CMemberProxy> m_MemberProxies;    \/\/ elements should not move$/;"	m	struct:CTwMgr
m_MemberProxy	ui/AntTweakBar/src/TwBar.h	/^            CTwMgr::CMemberProxy *m_MemberProxy;$/;"	m	struct:CTwVarAtom::UVal::CCustomVal
m_Members	ui/AntTweakBar/src/TwMgr.h	/^        std::vector<CStructMember>  m_Members;$/;"	m	struct:CTwMgr::CStruct
m_Min	ui/AntTweakBar/src/TwBar.h	/^        _T                  m_Min;$/;"	m	struct:CTwVarAtom::TVal
m_MinNumber	ui/AntTweakBar/src/TwBar.h	/^    int                     m_MinNumber;    \/\/ accessed by TwDeleteBar$/;"	m	struct:CTwBar
m_MinOccupied	ui/AntTweakBar/src/TwMgr.h	/^    std::vector<bool>   m_MinOccupied;$/;"	m	struct:CTwMgr
m_MinPosX	ui/AntTweakBar/src/TwBar.h	/^    int                     m_MinPosX;$/;"	m	struct:CTwBar
m_MinPosY	ui/AntTweakBar/src/TwBar.h	/^    int                     m_MinPosY;$/;"	m	struct:CTwBar
m_MouseDrag	ui/AntTweakBar/src/TwBar.h	/^    bool                    m_MouseDrag;$/;"	m	struct:CTwBar
m_MouseDragResizeLL	ui/AntTweakBar/src/TwBar.h	/^    bool                    m_MouseDragResizeLL;$/;"	m	struct:CTwBar
m_MouseDragResizeLR	ui/AntTweakBar/src/TwBar.h	/^    bool                    m_MouseDragResizeLR;$/;"	m	struct:CTwBar
m_MouseDragResizeUL	ui/AntTweakBar/src/TwBar.h	/^    bool                    m_MouseDragResizeUL;$/;"	m	struct:CTwBar
m_MouseDragResizeUR	ui/AntTweakBar/src/TwBar.h	/^    bool                    m_MouseDragResizeUR;$/;"	m	struct:CTwBar
m_MouseDragScroll	ui/AntTweakBar/src/TwBar.h	/^    bool                    m_MouseDragScroll;$/;"	m	struct:CTwBar
m_MouseDragTitle	ui/AntTweakBar/src/TwBar.h	/^    bool                    m_MouseDragTitle;$/;"	m	struct:CTwBar
m_MouseDragValWidth	ui/AntTweakBar/src/TwBar.h	/^    bool                    m_MouseDragValWidth;$/;"	m	struct:CTwBar
m_MouseDragVar	ui/AntTweakBar/src/TwBar.h	/^    bool                    m_MouseDragVar;$/;"	m	struct:CTwBar
m_MouseOriginX	ui/AntTweakBar/src/TwBar.h	/^    int                     m_MouseOriginX;$/;"	m	struct:CTwBar
m_MouseOriginY	ui/AntTweakBar/src/TwBar.h	/^    int                     m_MouseOriginY;$/;"	m	struct:CTwBar
m_Movable	ui/AntTweakBar/src/TwBar.h	/^    bool                    m_Movable;$/;"	m	struct:CTwBar
m_Name	ui/AntTweakBar/src/LoadOGLCore.cpp	/^    const char *        m_Name;$/;"	m	struct:COGLCoreFuncRec	file:
m_Name	ui/AntTweakBar/src/TwBar.h	/^    std::string             m_Name;$/;"	m	struct:CTwBar
m_Name	ui/AntTweakBar/src/TwBar.h	/^    std::string             m_Name;$/;"	m	struct:CTwVar
m_Name	ui/AntTweakBar/src/TwMgr.h	/^        std::string                 m_Name;$/;"	m	struct:CTwMgr::CStruct
m_Name	ui/AntTweakBar/src/TwMgr.h	/^        std::string     m_Name;$/;"	m	struct:CTwMgr::CEnum
m_Name	ui/AntTweakBar/src/TwMgr.h	/^        std::string     m_Name;$/;"	m	struct:CTwMgr::CStructMember
m_NbCharRead	ui/AntTweakBar/src/TwFonts.h	/^    int             m_NbCharRead;$/;"	m	struct:CTexFont
m_NbDisplayedLines	ui/AntTweakBar/src/TwBar.h	/^    int                     m_NbDisplayedLines;$/;"	m	struct:CTwBar
m_NbHierLines	ui/AntTweakBar/src/TwBar.h	/^    int                     m_NbHierLines;$/;"	m	struct:CTwBar
m_NbMinimizedBars	ui/AntTweakBar/src/TwMgr.h	/^    int                 m_NbMinimizedBars;$/;"	m	struct:CTwMgr
m_NoSlider	ui/AntTweakBar/src/TwBar.h	/^    bool                    m_NoSlider;$/;"	m	struct:CTwVarAtom
m_OGL	ui/AntTweakBar/src/TwMgr.h	/^    bool                 m_HLS, m_HasAlpha, m_OGL;$/;"	m	struct:CColorExt
m_Offset	ui/AntTweakBar/src/TwMgr.h	/^        size_t          m_Offset;$/;"	m	struct:CTwMgr::CStructMember
m_OffsetX	ui/AntTweakBar/src/TwOpenGLCore.h	/^    int                 m_OffsetX;$/;"	m	class:CTwGraphOpenGLCore
m_OffsetY	ui/AntTweakBar/src/TwOpenGLCore.h	/^    int                 m_OffsetY;$/;"	m	class:CTwGraphOpenGLCore
m_Open	ui/AntTweakBar/src/TwBar.h	/^    bool                    m_Open;$/;"	m	struct:CTwVarGroup
m_Order	ui/AntTweakBar/src/TwMgr.h	/^    std::vector<int>    m_Order;$/;"	m	struct:CTwMgr
m_OrigQuat	ui/AntTweakBar/src/TwMgr.h	/^    double               m_OrigQuat[4];$/;"	m	struct:CQuaternionExt
m_OrigX	ui/AntTweakBar/src/TwMgr.h	/^    float                m_OrigX, m_OrigY;$/;"	m	struct:CQuaternionExt
m_OrigY	ui/AntTweakBar/src/TwMgr.h	/^    float                m_OrigX, m_OrigY;$/;"	m	struct:CQuaternionExt
m_Origin	ui/AntTweakBar/src/TwBar.h	/^        CPoint              m_Origin;$/;"	m	struct:CTwBar::CRotoSlider
m_OverlapContent	ui/AntTweakBar/src/TwMgr.h	/^    bool                m_OverlapContent;$/;"	m	struct:CTwMgr
m_Permute	ui/AntTweakBar/src/TwMgr.h	/^    float                m_Permute[3][3];   \/\/ Permute frame axis$/;"	m	struct:CQuaternionExt
m_PopupBar	ui/AntTweakBar/src/TwMgr.h	/^    TwBar *             m_PopupBar;$/;"	m	struct:CTwMgr
m_PosX	ui/AntTweakBar/src/TwBar.h	/^    int                     m_PosX;$/;"	m	struct:CTwBar
m_PosY	ui/AntTweakBar/src/TwBar.h	/^    int                     m_PosY;$/;"	m	struct:CTwBar
m_PreciseValue	ui/AntTweakBar/src/TwBar.h	/^        double              m_PreciseValue;$/;"	m	struct:CTwBar::CRotoSlider
m_Precision	ui/AntTweakBar/src/TwBar.h	/^        signed char         m_Precision;$/;"	m	struct:CTwVarAtom::TVal
m_PrevActiveTexture	ui/AntTweakBar/src/TwOpenGLCore.h	/^    GLint               m_PrevActiveTexture;$/;"	m	class:CTwGraphOpenGLCore
m_PrevBlend	ui/AntTweakBar/src/TwOpenGLCore.h	/^    GLboolean           m_PrevBlend;$/;"	m	class:CTwGraphOpenGLCore
m_PrevConvertedColor	ui/AntTweakBar/src/TwMgr.h	/^    unsigned int         m_PrevConvertedColor;$/;"	m	struct:CColorExt
m_PrevCullFace	ui/AntTweakBar/src/TwOpenGLCore.h	/^    GLboolean           m_PrevCullFace;$/;"	m	class:CTwGraphOpenGLCore
m_PrevDepthTest	ui/AntTweakBar/src/TwOpenGLCore.h	/^    GLboolean           m_PrevDepthTest;$/;"	m	class:CTwGraphOpenGLCore
m_PrevDstBlend	ui/AntTweakBar/src/TwOpenGLCore.h	/^    GLint               m_PrevDstBlend;$/;"	m	class:CTwGraphOpenGLCore
m_PrevLineSmooth	ui/AntTweakBar/src/TwOpenGLCore.h	/^    GLboolean           m_PrevLineSmooth;$/;"	m	class:CTwGraphOpenGLCore
m_PrevLineWidth	ui/AntTweakBar/src/TwOpenGLCore.h	/^    GLfloat             m_PrevLineWidth;$/;"	m	class:CTwGraphOpenGLCore
m_PrevProgramObject	ui/AntTweakBar/src/TwOpenGLCore.h	/^    GLuint              m_PrevProgramObject;$/;"	m	class:CTwGraphOpenGLCore
m_PrevScissorBox	ui/AntTweakBar/src/TwOpenGLCore.h	/^    GLint               m_PrevScissorBox[4];$/;"	m	class:CTwGraphOpenGLCore
m_PrevScissorTest	ui/AntTweakBar/src/TwOpenGLCore.h	/^    GLboolean           m_PrevScissorTest;$/;"	m	class:CTwGraphOpenGLCore
m_PrevSrcBlend	ui/AntTweakBar/src/TwOpenGLCore.h	/^    GLint               m_PrevSrcBlend;$/;"	m	class:CTwGraphOpenGLCore
m_PrevTexture	ui/AntTweakBar/src/TwOpenGLCore.h	/^    GLint               m_PrevTexture;$/;"	m	class:CTwGraphOpenGLCore
m_PrevVArray	ui/AntTweakBar/src/TwOpenGLCore.h	/^    GLint               m_PrevVArray;$/;"	m	class:CTwGraphOpenGLCore
m_PrevValue	ui/AntTweakBar/src/TwMgr.h	/^        char                m_PrevValue[sizeof(std::string)+2*sizeof(void*)];$/;"	m	struct:CTwMgr::CCDStdStringRecord
m_PrevViewport	ui/AntTweakBar/src/TwOpenGLCore.h	/^    GLint               m_PrevViewport[4];$/;"	m	class:CTwGraphOpenGLCore
m_PrevX	ui/AntTweakBar/src/TwMgr.h	/^    double               m_PrevX, m_PrevY;$/;"	m	struct:CQuaternionExt
m_PrevY	ui/AntTweakBar/src/TwMgr.h	/^    double               m_PrevX, m_PrevY;$/;"	m	struct:CQuaternionExt
m_Previous	ui/AntTweakBar/src/TwBar.h	/^        CPoint              m_Previous;$/;"	m	struct:CTwBar::CRotoSlider
m_Ptr	ui/AntTweakBar/src/TwBar.h	/^    void *                  m_Ptr;$/;"	m	struct:CTwVarAtom
m_ReadOnly	ui/AntTweakBar/src/TwBar.h	/^    bool                    m_ReadOnly;$/;"	m	struct:CTwVarAtom
m_RepeatMousePressedDelay	ui/AntTweakBar/src/TwMgr.h	/^    double              m_RepeatMousePressedDelay;$/;"	m	struct:CTwMgr
m_RepeatMousePressedPeriod	ui/AntTweakBar/src/TwMgr.h	/^    double              m_RepeatMousePressedPeriod;$/;"	m	struct:CTwMgr
m_Resizable	ui/AntTweakBar/src/TwBar.h	/^    bool                    m_Resizable;$/;"	m	struct:CTwBar
m_Rotating	ui/AntTweakBar/src/TwMgr.h	/^    bool                 m_Rotating;$/;"	m	struct:CQuaternionExt
m_Roto	ui/AntTweakBar/src/TwBar.h	/^    CRotoSlider             m_Roto;$/;"	m	struct:CTwBar
m_RotoCursors	ui/AntTweakBar/src/TwMgr.h	/^    CCursor             m_RotoCursors[NB_ROTO_CURSORS];$/;"	m	struct:CTwMgr
m_RotoMinRadius	ui/AntTweakBar/src/TwBar.h	/^    int                     m_RotoMinRadius;$/;"	m	struct:CTwBar
m_RotoNbSubdiv	ui/AntTweakBar/src/TwBar.h	/^    int                     m_RotoNbSubdiv; \/\/ number of steps for one turn$/;"	m	struct:CTwBar
m_ScrollY0	ui/AntTweakBar/src/TwBar.h	/^    int                     m_ScrollY0;$/;"	m	struct:CTwBar
m_ScrollY1	ui/AntTweakBar/src/TwBar.h	/^    int                     m_ScrollY1;$/;"	m	struct:CTwBar
m_ScrollYH	ui/AntTweakBar/src/TwBar.h	/^    int                     m_ScrollYH;$/;"	m	struct:CTwBar
m_ScrollYW	ui/AntTweakBar/src/TwBar.h	/^    int                     m_ScrollYW;$/;"	m	struct:CTwBar
m_SelectionStart	ui/AntTweakBar/src/TwBar.h	/^        int                 m_SelectionStart;$/;"	m	struct:CTwBar::CEditInPlace
m_Sep	ui/AntTweakBar/src/TwBar.h	/^    int                     m_Sep;$/;"	m	struct:CTwBar
m_Separator	ui/AntTweakBar/src/TwBar.h	/^            int             m_Separator;$/;"	m	struct:CTwVarAtom::UVal::CButtonVal
m_SetCallback	ui/AntTweakBar/src/TwBar.h	/^    TwSetVarCallback        m_SetCallback;$/;"	m	struct:CTwVarAtom
m_Shortcut	ui/AntTweakBar/src/TwBar.h	/^        }                   m_Shortcut;$/;"	m	union:CTwVarAtom::UVal	typeref:struct:CTwVarAtom::UVal::CShortcutVal
m_ShortcutLine	ui/AntTweakBar/src/TwBar.h	/^    int                     m_ShortcutLine;$/;"	m	struct:CTwBar
m_ShortcutTextObj	ui/AntTweakBar/src/TwBar.h	/^    void *                  m_ShortcutTextObj;$/;"	m	struct:CTwBar
m_ShowVal	ui/AntTweakBar/src/TwMgr.h	/^    bool                 m_ShowVal;         \/\/ Display values$/;"	m	struct:CQuaternionExt
m_Size	ui/AntTweakBar/src/TwMgr.h	/^        size_t                      m_Size;$/;"	m	struct:CTwMgr::CStruct
m_Size	ui/AntTweakBar/src/TwMgr.h	/^        size_t          m_Size;$/;"	m	struct:CTwMgr::CStructMember
m_Step	ui/AntTweakBar/src/TwBar.h	/^        _T                  m_Step;$/;"	m	struct:CTwVarAtom::TVal
m_String	ui/AntTweakBar/src/TwBar.h	/^        std::string         m_String;$/;"	m	struct:CTwBar::CEditInPlace
m_StructClientData	ui/AntTweakBar/src/TwMgr.h	/^        void *           m_StructClientData;$/;"	m	struct:CTwMgr::CStructProxy
m_StructData	ui/AntTweakBar/src/TwMgr.h	/^        void *           m_StructData;$/;"	m	struct:CTwMgr::CStructProxy
m_StructExtData	ui/AntTweakBar/src/TwMgr.h	/^        void *           m_StructExtData;$/;"	m	struct:CTwMgr::CStructProxy
m_StructExtInitCallback	ui/AntTweakBar/src/TwMgr.h	/^        TwStructExtInitCallback     m_StructExtInitCallback;$/;"	m	struct:CTwMgr::CStruct
m_StructGetCallback	ui/AntTweakBar/src/TwMgr.h	/^        TwGetVarCallback m_StructGetCallback;$/;"	m	struct:CTwMgr::CStructProxy
m_StructProxies	ui/AntTweakBar/src/TwMgr.h	/^    std::list<CStructProxy> m_StructProxies;    \/\/ elements should not move$/;"	m	struct:CTwMgr
m_StructProxy	ui/AntTweakBar/src/TwMgr.h	/^        CStructProxy *  m_StructProxy;$/;"	m	struct:CTwMgr::CMemberProxy
m_StructProxy	ui/AntTweakBar/src/TwMgr.h	/^    CTwMgr::CStructProxy*m_StructProxy;$/;"	m	struct:CColorExt
m_StructProxy	ui/AntTweakBar/src/TwMgr.h	/^    CTwMgr::CStructProxy*m_StructProxy;$/;"	m	struct:CQuaternionExt
m_StructSetCallback	ui/AntTweakBar/src/TwMgr.h	/^        TwSetVarCallback m_StructSetCallback;$/;"	m	struct:CTwMgr::CStructProxy
m_StructType	ui/AntTweakBar/src/TwBar.h	/^            int             m_StructType;$/;"	m	struct:CTwVarAtom::UVal::CHelpStruct
m_StructType	ui/AntTweakBar/src/TwBar.h	/^    TwType                  m_StructType;$/;"	m	struct:CTwVarGroup
m_StructValuePtr	ui/AntTweakBar/src/TwBar.h	/^    void *                  m_StructValuePtr;$/;"	m	struct:CTwVarGroup
m_Structs	ui/AntTweakBar/src/TwMgr.h	/^    std::vector<CStruct> m_Structs;$/;"	m	struct:CTwMgr
m_Subdiv	ui/AntTweakBar/src/TwBar.h	/^        int                 m_Subdiv;$/;"	m	struct:CTwBar::CRotoSlider
m_SummaryCallback	ui/AntTweakBar/src/TwBar.h	/^    TwSummaryCallback       m_SummaryCallback;$/;"	m	struct:CTwVarGroup
m_SummaryCallback	ui/AntTweakBar/src/TwMgr.h	/^        TwSummaryCallback           m_SummaryCallback;$/;"	m	struct:CTwMgr::CStruct
m_SummaryClientData	ui/AntTweakBar/src/TwBar.h	/^    void *                  m_SummaryClientData;$/;"	m	struct:CTwVarGroup
m_SummaryClientData	ui/AntTweakBar/src/TwMgr.h	/^        void *                      m_SummaryClientData;$/;"	m	struct:CTwMgr::CStruct
m_Terminating	ui/AntTweakBar/src/TwMgr.h	/^    bool                m_Terminating;$/;"	m	struct:CTwMgr
m_TexBytes	ui/AntTweakBar/src/TwFonts.h	/^    unsigned char * m_TexBytes;$/;"	m	struct:CTexFont
m_TexHeight	ui/AntTweakBar/src/TwFonts.h	/^    int             m_TexHeight;    \/\/ power of 2$/;"	m	struct:CTexFont
m_TexWidth	ui/AntTweakBar/src/TwFonts.h	/^    int             m_TexWidth;     \/\/ power of 2$/;"	m	struct:CTexFont
m_TextUVs	ui/AntTweakBar/src/TwOpenGLCore.h	/^        std::vector<Vec2>   m_TextUVs;$/;"	m	struct:CTwGraphOpenGLCore::CTextObj
m_TextVerts	ui/AntTweakBar/src/TwOpenGLCore.h	/^        std::vector<Vec2>   m_TextVerts;$/;"	m	struct:CTwGraphOpenGLCore::CTextObj
m_Timer	ui/AntTweakBar/src/TwMgr.h	/^    PerfTimer           m_Timer;$/;"	m	struct:CTwMgr
m_TitleTextObj	ui/AntTweakBar/src/TwBar.h	/^    void *                  m_TitleTextObj;$/;"	m	struct:CTwBar
m_TitleWidth	ui/AntTweakBar/src/TwBar.h	/^    int                     m_TitleWidth;$/;"	m	struct:CTwBar
m_TopMargin	ui/AntTweakBar/src/TwBar.h	/^    signed short            m_TopMargin;$/;"	m	struct:CTwVar
m_TriBufferSize	ui/AntTweakBar/src/TwOpenGLCore.h	/^    size_t              m_TriBufferSize;$/;"	m	class:CTwGraphOpenGLCore
m_TriColors	ui/AntTweakBar/src/TwOpenGLCore.h	/^    GLuint              m_TriColors;$/;"	m	class:CTwGraphOpenGLCore
m_TriFS	ui/AntTweakBar/src/TwOpenGLCore.h	/^    GLuint              m_TriFS;$/;"	m	class:CTwGraphOpenGLCore
m_TriLocationOffset	ui/AntTweakBar/src/TwOpenGLCore.h	/^    GLint               m_TriLocationOffset;$/;"	m	class:CTwGraphOpenGLCore
m_TriLocationWndSize	ui/AntTweakBar/src/TwOpenGLCore.h	/^    GLint               m_TriLocationWndSize;$/;"	m	class:CTwGraphOpenGLCore
m_TriProgram	ui/AntTweakBar/src/TwOpenGLCore.h	/^    GLuint              m_TriProgram;$/;"	m	class:CTwGraphOpenGLCore
m_TriTexFS	ui/AntTweakBar/src/TwOpenGLCore.h	/^    GLuint              m_TriTexFS;$/;"	m	class:CTwGraphOpenGLCore
m_TriTexLocationOffset	ui/AntTweakBar/src/TwOpenGLCore.h	/^    GLint               m_TriTexLocationOffset;$/;"	m	class:CTwGraphOpenGLCore
m_TriTexLocationTexture	ui/AntTweakBar/src/TwOpenGLCore.h	/^    GLint               m_TriTexLocationTexture;$/;"	m	class:CTwGraphOpenGLCore
m_TriTexLocationWndSize	ui/AntTweakBar/src/TwOpenGLCore.h	/^    GLint               m_TriTexLocationWndSize;$/;"	m	class:CTwGraphOpenGLCore
m_TriTexProgram	ui/AntTweakBar/src/TwOpenGLCore.h	/^    GLuint              m_TriTexProgram;$/;"	m	class:CTwGraphOpenGLCore
m_TriTexUniFS	ui/AntTweakBar/src/TwOpenGLCore.h	/^    GLuint              m_TriTexUniFS;$/;"	m	class:CTwGraphOpenGLCore
m_TriTexUniLocationColor	ui/AntTweakBar/src/TwOpenGLCore.h	/^    GLint               m_TriTexUniLocationColor;$/;"	m	class:CTwGraphOpenGLCore
m_TriTexUniLocationOffset	ui/AntTweakBar/src/TwOpenGLCore.h	/^    GLint               m_TriTexUniLocationOffset;$/;"	m	class:CTwGraphOpenGLCore
m_TriTexUniLocationTexture	ui/AntTweakBar/src/TwOpenGLCore.h	/^    GLint               m_TriTexUniLocationTexture;$/;"	m	class:CTwGraphOpenGLCore
m_TriTexUniLocationWndSize	ui/AntTweakBar/src/TwOpenGLCore.h	/^    GLint               m_TriTexUniLocationWndSize;$/;"	m	class:CTwGraphOpenGLCore
m_TriTexUniProgram	ui/AntTweakBar/src/TwOpenGLCore.h	/^    GLuint              m_TriTexUniProgram;$/;"	m	class:CTwGraphOpenGLCore
m_TriTexUniVS	ui/AntTweakBar/src/TwOpenGLCore.h	/^    GLuint              m_TriTexUniVS;$/;"	m	class:CTwGraphOpenGLCore
m_TriTexVS	ui/AntTweakBar/src/TwOpenGLCore.h	/^    GLuint              m_TriTexVS;$/;"	m	class:CTwGraphOpenGLCore
m_TriUVs	ui/AntTweakBar/src/TwOpenGLCore.h	/^    GLuint              m_TriUVs;$/;"	m	class:CTwGraphOpenGLCore
m_TriUniFS	ui/AntTweakBar/src/TwOpenGLCore.h	/^    GLuint              m_TriUniFS;$/;"	m	class:CTwGraphOpenGLCore
m_TriUniLocationColor	ui/AntTweakBar/src/TwOpenGLCore.h	/^    GLint               m_TriUniLocationColor;$/;"	m	class:CTwGraphOpenGLCore
m_TriUniLocationOffset	ui/AntTweakBar/src/TwOpenGLCore.h	/^    GLint               m_TriUniLocationOffset;$/;"	m	class:CTwGraphOpenGLCore
m_TriUniLocationWndSize	ui/AntTweakBar/src/TwOpenGLCore.h	/^    GLint               m_TriUniLocationWndSize;$/;"	m	class:CTwGraphOpenGLCore
m_TriUniProgram	ui/AntTweakBar/src/TwOpenGLCore.h	/^    GLuint              m_TriUniProgram;$/;"	m	class:CTwGraphOpenGLCore
m_TriUniVS	ui/AntTweakBar/src/TwOpenGLCore.h	/^    GLuint              m_TriUniVS;$/;"	m	class:CTwGraphOpenGLCore
m_TriVArray	ui/AntTweakBar/src/TwOpenGLCore.h	/^    GLuint              m_TriVArray;$/;"	m	class:CTwGraphOpenGLCore
m_TriVS	ui/AntTweakBar/src/TwOpenGLCore.h	/^    GLuint              m_TriVS;$/;"	m	class:CTwGraphOpenGLCore
m_TriVertices	ui/AntTweakBar/src/TwOpenGLCore.h	/^    GLuint              m_TriVertices;$/;"	m	class:CTwGraphOpenGLCore
m_TrueString	ui/AntTweakBar/src/TwBar.h	/^            char *          m_TrueString;$/;"	m	struct:CTwVarAtom::UVal::CBoolVal
m_Type	ui/AntTweakBar/src/TwBar.h	/^    ETwType                 m_Type;$/;"	m	struct:CTwVarAtom
m_Type	ui/AntTweakBar/src/TwMgr.h	/^        TwType           m_Type;$/;"	m	struct:CTwMgr::CStructProxy
m_Type	ui/AntTweakBar/src/TwMgr.h	/^        TwType          m_Type;$/;"	m	struct:CTwMgr::CStructMember
m_TypeColor32	ui/AntTweakBar/src/TwMgr.h	/^    TwType              m_TypeColor32;$/;"	m	struct:CTwMgr
m_TypeColor3F	ui/AntTweakBar/src/TwMgr.h	/^    TwType              m_TypeColor3F;$/;"	m	struct:CTwMgr
m_TypeColor4F	ui/AntTweakBar/src/TwMgr.h	/^    TwType              m_TypeColor4F;$/;"	m	struct:CTwMgr
m_TypeDir3D	ui/AntTweakBar/src/TwMgr.h	/^    TwType              m_TypeDir3D;$/;"	m	struct:CTwMgr
m_TypeDir3F	ui/AntTweakBar/src/TwMgr.h	/^    TwType              m_TypeDir3F;$/;"	m	struct:CTwMgr
m_TypeQuat4D	ui/AntTweakBar/src/TwMgr.h	/^    TwType              m_TypeQuat4D;$/;"	m	struct:CTwMgr
m_TypeQuat4F	ui/AntTweakBar/src/TwMgr.h	/^    TwType              m_TypeQuat4F;$/;"	m	struct:CTwMgr
m_UInt16	ui/AntTweakBar/src/TwBar.h	/^        TVal<unsigned short>m_UInt16;$/;"	m	union:CTwVarAtom::UVal
m_UInt32	ui/AntTweakBar/src/TwBar.h	/^        TVal<unsigned int>  m_UInt32;$/;"	m	union:CTwVarAtom::UVal
m_UInt8	ui/AntTweakBar/src/TwBar.h	/^        TVal<unsigned char> m_UInt8;$/;"	m	union:CTwVarAtom::UVal
m_UpToDate	ui/AntTweakBar/src/TwBar.h	/^    bool                    m_UpToDate;$/;"	m	struct:CTwBar
m_UpdatePeriod	ui/AntTweakBar/src/TwBar.h	/^    float                   m_UpdatePeriod;$/;"	m	struct:CTwBar
m_UseOldColorScheme	ui/AntTweakBar/src/TwMgr.h	/^    bool                m_UseOldColorScheme;$/;"	m	struct:CTwMgr
m_Val	ui/AntTweakBar/src/TwBar.h	/^    UVal                    m_Val;$/;"	m	struct:CTwVarAtom
m_Value0	ui/AntTweakBar/src/TwBar.h	/^        double              m_Value0;$/;"	m	struct:CTwBar::CRotoSlider
m_ValueAngle0	ui/AntTweakBar/src/TwBar.h	/^        double              m_ValueAngle0;$/;"	m	struct:CTwBar::CRotoSlider
m_ValuesTextObj	ui/AntTweakBar/src/TwBar.h	/^    void *                  m_ValuesTextObj;$/;"	m	struct:CTwBar
m_ValuesWidth	ui/AntTweakBar/src/TwBar.h	/^    int                     m_ValuesWidth;$/;"	m	struct:CTwBar
m_ValuesWidthRatio	ui/AntTweakBar/src/TwBar.h	/^    double                  m_ValuesWidthRatio;$/;"	m	struct:CTwBar
m_Var	ui/AntTweakBar/src/TwBar.h	/^        CTwVar *            m_Var;$/;"	m	struct:CTwBar::CHierTag
m_Var	ui/AntTweakBar/src/TwBar.h	/^        CTwVarAtom *        m_Var;$/;"	m	struct:CTwBar::CEditInPlace
m_Var	ui/AntTweakBar/src/TwBar.h	/^        CTwVarAtom *        m_Var;$/;"	m	struct:CTwBar::CRotoSlider
m_Var	ui/AntTweakBar/src/TwBar.h	/^        CTwVarGroup *       m_Var;$/;"	m	struct:CTwBar::CCustomRecord
m_Var	ui/AntTweakBar/src/TwMgr.h	/^        struct CTwVar * m_Var;$/;"	m	struct:CTwMgr::CMemberProxy	typeref:struct:CTwMgr::CMemberProxy::CTwVar
m_VarEnumLinkedToPopupList	ui/AntTweakBar/src/TwBar.h	/^    CTwVarAtom *            m_VarEnumLinkedToPopupList;$/;"	m	struct:CTwBar
m_VarHasBeenIncr	ui/AntTweakBar/src/TwBar.h	/^    bool                    m_VarHasBeenIncr;$/;"	m	struct:CTwBar
m_VarParent	ui/AntTweakBar/src/TwMgr.h	/^        struct CTwVarGroup * m_VarParent;$/;"	m	struct:CTwMgr::CMemberProxy	typeref:struct:CTwMgr::CMemberProxy::CTwVarGroup
m_VarRoot	ui/AntTweakBar/src/TwBar.h	/^    CTwVarGroup             m_VarRoot;$/;"	m	struct:CTwBar
m_VarX0	ui/AntTweakBar/src/TwBar.h	/^    int                     m_VarX0;$/;"	m	struct:CTwBar
m_VarX1	ui/AntTweakBar/src/TwBar.h	/^    int                     m_VarX1;$/;"	m	struct:CTwBar
m_VarX2	ui/AntTweakBar/src/TwBar.h	/^    int                     m_VarX2;$/;"	m	struct:CTwBar
m_VarY0	ui/AntTweakBar/src/TwBar.h	/^    int                     m_VarY0;$/;"	m	struct:CTwBar
m_VarY1	ui/AntTweakBar/src/TwBar.h	/^    int                     m_VarY1;$/;"	m	struct:CTwBar
m_VarY2	ui/AntTweakBar/src/TwBar.h	/^    int                     m_VarY2;$/;"	m	struct:CTwBar
m_Vars	ui/AntTweakBar/src/TwBar.h	/^    std::vector<CTwVar *>   m_Vars;$/;"	m	struct:CTwVarGroup
m_Visible	ui/AntTweakBar/src/TwBar.h	/^    bool                    m_Visible;$/;"	m	struct:CTwBar
m_Visible	ui/AntTweakBar/src/TwBar.h	/^    bool                    m_Visible;$/;"	m	struct:CTwVar
m_Width	ui/AntTweakBar/src/TwBar.h	/^        int                 m_Width;$/;"	m	struct:CTwBar::CEditInPlace
m_Width	ui/AntTweakBar/src/TwBar.h	/^    int                     m_Width;$/;"	m	struct:CTwBar
m_WndHeight	ui/AntTweakBar/src/TwMgr.h	/^    int                 m_WndHeight;$/;"	m	struct:CTwMgr
m_WndHeight	ui/AntTweakBar/src/TwOpenGLCore.h	/^    int                 m_WndHeight;$/;"	m	class:CTwGraphOpenGLCore
m_WndID	ui/AntTweakBar/src/TwMgr.h	/^    int                 m_WndID;$/;"	m	struct:CTwMgr
m_WndWidth	ui/AntTweakBar/src/TwMgr.h	/^    int                 m_WndWidth;$/;"	m	struct:CTwMgr
m_WndWidth	ui/AntTweakBar/src/TwOpenGLCore.h	/^    int                 m_WndWidth;$/;"	m	class:CTwGraphOpenGLCore
m_X	ui/AntTweakBar/src/TwBar.h	/^        int                 m_X, m_Y;$/;"	m	struct:CTwBar::CEditInPlace
m_XMax	ui/AntTweakBar/src/TwBar.h	/^        int                 m_XMin, m_XMax;$/;"	m	struct:CTwBar::CCustomRecord
m_XMin	ui/AntTweakBar/src/TwBar.h	/^        int                 m_XMin, m_XMax;$/;"	m	struct:CTwBar::CCustomRecord
m_Y	ui/AntTweakBar/src/TwBar.h	/^        int                 m_X, m_Y;$/;"	m	struct:CTwBar::CEditInPlace
m_Y0	ui/AntTweakBar/src/TwBar.h	/^        int                 m_Y0, m_Y1;     \/\/ Y widget range$/;"	m	struct:CTwBar::CCustomRecord
m_Y1	ui/AntTweakBar/src/TwBar.h	/^        int                 m_Y0, m_Y1;     \/\/ Y widget range$/;"	m	struct:CTwBar::CCustomRecord
m_YMax	ui/AntTweakBar/src/TwBar.h	/^        int                 m_YMin, m_YMax; \/\/ Y visible range$/;"	m	struct:CTwBar::CCustomRecord
m_YMin	ui/AntTweakBar/src/TwBar.h	/^        int                 m_YMin, m_YMax; \/\/ Y visible range$/;"	m	struct:CTwBar::CCustomRecord
main	cpp/main.cpp	/^int main( int argc, char* args[] ){$/;"	f
main	ui/AntTweakBar/examples/TwGLCoreSDL.c	/^int main()$/;"	f
main	ui/AntTweakBar/examples/TwGLCoreSDL.c	260;"	d	file:
mat	cpp/matrix.cpp	/^namespace mat{$/;"	n	file:
mat	matrix.h	/^namespace mat{$/;"	n
maxTension	Rope.h	/^  float maxTension = 0.01;$/;"	m	struct:SoftDude
mod	ui/AntTweakBar/src/MiniSDL12.h	/^    SDLMod mod;$/;"	m	struct:SDL_keysym
mod	ui/AntTweakBar/src/MiniSDL13.h	/^    Uint16 mod;$/;"	m	struct:SDL_keysym
mode	opengl/opengl.h	/^  GLenum mode = GL_LINE_LOOP;$/;"	m	struct:DrawCache
model	cpp/matrix.cpp	/^  glm::mat4 model = glm::mat4(1);$/;"	m	namespace:mat	file:
motion	ui/AntTweakBar/src/MiniSDL12.h	/^    SDL_MouseMotionEvent motion;$/;"	m	union:__anon11
motion	ui/AntTweakBar/src/MiniSDL13.h	/^    SDL_MouseMotionEvent motion;   $/;"	m	union:SDL_Event
mouseButtonDown	screens/GameScreen.h	/^  bool mouseButtonDown = false;$/;"	m	struct:GameScreen
msg	ui/AntTweakBar/src/MiniSDL12.h	/^    SDL_SysWMmsg *msg;$/;"	m	struct:SDL_SysWMEvent
msg	ui/AntTweakBar/src/MiniSDL13.h	/^    SDL_SysWMmsg *msg;$/;"	m	struct:SDL_SysWMEvent
mvmUniform	opengl/programs.h	/^    GLuint mvmUniform;$/;"	m	struct:program::DummyLighten
normalBuf	shapes.h	/^  GLuint normalBuf;$/;"	m	struct:LightenTexturedShape
normalHandle	opengl/programs.h	/^    GLuint normalHandle;$/;"	m	struct:program::DummyLighten
normals	shapes.h	/^  std::vector<Vec> normals;$/;"	m	struct:LightenTexturedShape
nverts	cpp/Floor.cpp	/^static int nverts;$/;"	v	file:
offsetX	screens/GameScreen.h	/^  float offsetX = 0;$/;"	m	struct:GameScreen
offsetY	screens/GameScreen.h	/^  float offsetY = 0;$/;"	m	struct:GameScreen
operator ()	ui/AntTweakBar/src/TwMgr.cpp	/^    bool operator()(const TwType& _Left, const TwType& _Right) const$/;"	f	struct:StructCompare
operator +	ui/AntTweakBar/src/TwBar.h	/^        const CPoint        operator+ (const CPoint& p) const { return CPoint(x+p.x, y+p.y); }$/;"	f	struct:CTwBar::CPoint
operator -	ui/AntTweakBar/src/TwBar.h	/^        const CPoint        operator- (const CPoint& p) const { return CPoint(x-p.x, y-p.y); }$/;"	f	struct:CTwBar::CPoint
operator ==	ui/AntTweakBar/src/TwMgr.h	/^    bool operator==(const CRect& _Rect) { return (Empty() && _Rect.Empty()) || (X==_Rect.X && Y==_Rect.Y && W==_Rect.W && H==_Rect.H); }$/;"	f	struct:CRect
ortho	cpp/matrix.cpp	/^  void ortho(float left,float right,float bottom,float top,float near,float far){$/;"	f	namespace:mat
outline	cpp/shapes.cpp	/^  namespace outline{$/;"	n	namespace:shape	file:
outline	shapes.h	/^  namespace outline{$/;"	n	namespace:shape
palette	ui/AntTweakBar/src/MiniSDL12.h	/^    void  *palette;$/;"	m	struct:SDL_PixelFormat
palette	ui/AntTweakBar/src/MiniSDL13.h	/^    void  *palette;$/;"	m	struct:SDL_PixelFormat
perspective	cpp/matrix.cpp	/^  void perspective(float fov,float aspectRatio,float nearClip,float farClip){$/;"	f	namespace:mat
pixelBounds	cpp/screen.cpp	/^  int pixelBounds[2];$/;"	m	namespace:screen	file:
player	cpp/Player.cpp	/^    Player player = {$/;"	m	namespace:game	file:
pointerAnchor	Player.hpp	/^		glm::vec2 pointerAnchor;$/;"	m	class:game::Player
pointerMode	Player.hpp	/^		bool pointerMode;$/;"	m	class:game::Player
pointerPos	Player.hpp	/^		glm::vec2 pointerPos;$/;"	m	class:game::Player
pos	Cube.hpp	/^        glm::vec3 pos = {0., 0., 0.};$/;"	m	class:game::Cube
pos	Player.hpp	/^		glm::vec3 pos;$/;"	m	class:game::Player
pos	shapes.h	/^  Vec pos = {0,0,0};$/;"	m	struct:SimpleShape
pressure	ui/AntTweakBar/src/MiniSDL13.h	/^    int pressure;          $/;"	m	struct:SDL_MouseMotionEvent
pressure_max	ui/AntTweakBar/src/MiniSDL13.h	/^    int pressure_max;      $/;"	m	struct:SDL_MouseMotionEvent
pressure_min	ui/AntTweakBar/src/MiniSDL13.h	/^    int pressure_min;      $/;"	m	struct:SDL_MouseMotionEvent
prevTick	cpp/loop.cpp	/^  unsigned long prevTick;$/;"	m	namespace:loop	file:
program	bak/programs.cpp	/^namespace program{$/;"	n	file:
program	cpp/opengl/programs.cpp	/^namespace program{$/;"	n	file:
program	opengl/programs.h	/^namespace program{$/;"	n
program	ui/AntTweakBar/examples/TwGLCoreSDL.c	/^GLuint vshader, fshader, program, varray, buffer;$/;"	v
programs	bak/programs.cpp	/^  std::vector<Program*> programs;$/;"	m	namespace:program	file:
programs	cpp/opengl/programs.cpp	/^  std::vector<Program*> programs;$/;"	m	namespace:program	file:
projection	cpp/matrix.cpp	/^  glm::mat4 projection = glm::mat4(1);$/;"	m	namespace:mat	file:
proximity	ui/AntTweakBar/src/MiniSDL13.h	/^    SDL_ProximityEvent proximity;  $/;"	m	union:SDL_Event
quat	ui/AntTweakBar/examples/TwGLCoreSDL.c	/^float angle = 0, quat[4];$/;"	v
quit	ui/AntTweakBar/src/MiniSDL12.h	/^    SDL_QuitEvent quit;$/;"	m	union:__anon11
quit	ui/AntTweakBar/src/MiniSDL13.h	/^    SDL_QuitEvent quit;            $/;"	m	union:SDL_Event
r	opengl/opengl.h	/^  float r=1;$/;"	m	struct:ColorRGB
radiuss	SoftBody.h	/^  std::vector<float> radiuss;$/;"	m	struct:SoftBody
read	read.h	/^namespace read{$/;"	n
readCubes	cpp/CubeMesh.cpp	/^    void CubeMesh::readCubes(const char *filename)$/;"	f	class:game::CubeMesh
render	bak/GameScreen.cpp	/^void GameScreen::render(){$/;"	f	class:GameScreen
render	cpp/screens/GameScreen.cpp	/^void GameScreen::render(){$/;"	f	class:GameScreen
render	tmo/GameScreen.cpp	/^void GameScreen::render(){$/;"	f	class:GameScreen
resistance	Rope.h	/^  float resistance = 0.001;$/;"	m	struct:SoftDude
resistance	opengl/opengl.h	/^  float resistance=0.01;$/;"	m	struct:AngularVelocity
resize	ui/AntTweakBar/src/MiniSDL12.h	/^    SDL_ResizeEvent resize;$/;"	m	union:__anon11
resize	ui/AntTweakBar/src/MiniSDL13.h	/^    SDL_ResizeEvent resize;$/;"	m	union:SDL_Event
rotate	cpp/matrix.cpp	/^  void rotate(float radians,int x,int y,int z){$/;"	f	namespace:mat
rotation	ui/AntTweakBar/src/MiniSDL13.h	/^    int rotation;          $/;"	m	struct:SDL_MouseMotionEvent
runBackward	cpp/Player.cpp	/^    void Player::runBackward()$/;"	f	class:game::Player
runForward	cpp/Player.cpp	/^    void Player::runForward()$/;"	f	class:game::Player
runLeft	cpp/Player.cpp	/^    void Player::runLeft()$/;"	f	class:game::Player
runRight	cpp/Player.cpp	/^    void Player::runRight()$/;"	f	class:game::Player
s_ArrowColLight	ui/AntTweakBar/src/TwMgr.cpp	/^vector<color32> CQuaternionExt::s_ArrowColLight[4];$/;"	m	class:CQuaternionExt	file:
s_ArrowColLight	ui/AntTweakBar/src/TwMgr.h	/^    static std::vector<color32> s_ArrowColLight[4];$/;"	m	struct:CQuaternionExt
s_ArrowNorm	ui/AntTweakBar/src/TwMgr.cpp	/^vector<float>   CQuaternionExt::s_ArrowNorm[4];$/;"	m	class:CQuaternionExt	file:
s_ArrowNorm	ui/AntTweakBar/src/TwMgr.h	/^    static std::vector<float>   s_ArrowNorm[4];$/;"	m	struct:CQuaternionExt
s_ArrowTri	ui/AntTweakBar/src/TwMgr.cpp	/^vector<float>   CQuaternionExt::s_ArrowTri[4];$/;"	m	class:CQuaternionExt	file:
s_ArrowTri	ui/AntTweakBar/src/TwMgr.h	/^    static std::vector<float>   s_ArrowTri[4];$/;"	m	struct:CQuaternionExt
s_ArrowTriProj	ui/AntTweakBar/src/TwMgr.cpp	/^vector<int>     CQuaternionExt::s_ArrowTriProj[4];$/;"	m	class:CQuaternionExt	file:
s_ArrowTriProj	ui/AntTweakBar/src/TwMgr.h	/^    static std::vector<int>     s_ArrowTriProj[4];$/;"	m	struct:CQuaternionExt
s_CustomType	ui/AntTweakBar/src/TwMgr.cpp	/^TwType CQuaternionExt::s_CustomType = TW_TYPE_UNDEF;$/;"	m	class:CQuaternionExt	file:
s_CustomType	ui/AntTweakBar/src/TwMgr.h	/^    static TwType        s_CustomType;$/;"	m	struct:CQuaternionExt
s_Font0	ui/AntTweakBar/src/TwFonts.cpp	/^static const unsigned char s_Font0[] = $/;"	v	file:
s_Font1	ui/AntTweakBar/src/TwFonts.cpp	/^static const unsigned char s_Font1[] = $/;"	v	file:
s_Font1AA	ui/AntTweakBar/src/TwFonts.cpp	/^static const unsigned char s_Font1AA[] = $/;"	v	file:
s_Font2AA	ui/AntTweakBar/src/TwFonts.cpp	/^static const unsigned char s_Font2AA[] = $/;"	v	file:
s_FontFixed1	ui/AntTweakBar/src/TwFonts.cpp	/^static const unsigned char s_FontFixed1[] = {$/;"	v	file:
s_PassProxy	ui/AntTweakBar/src/TwMgr.cpp	/^static int s_PassProxy = 0;$/;"	v	file:
s_PassProxyAsClientData	ui/AntTweakBar/src/TwMgr.cpp	/^void *CTwMgr::CStruct::s_PassProxyAsClientData = &s_PassProxy;  \/\/ special tag$/;"	m	class:CTwMgr::CStruct	file:
s_PassProxyAsClientData	ui/AntTweakBar/src/TwMgr.h	/^        static void *               s_PassProxyAsClientData;$/;"	m	struct:CTwMgr::CStruct
s_PrevErrorHandler	ui/AntTweakBar/src/TwMgr.cpp	/^static XErrorHandler s_PrevErrorHandler = NULL;$/;"	v	file:
s_SeparatorTag	ui/AntTweakBar/src/TwMgr.cpp	/^static int s_SeparatorTag = 0;$/;"	v	file:
s_SphCol	ui/AntTweakBar/src/TwMgr.cpp	/^vector<color32> CQuaternionExt::s_SphCol;$/;"	m	class:CQuaternionExt	file:
s_SphCol	ui/AntTweakBar/src/TwMgr.h	/^    static std::vector<color32> s_SphCol;$/;"	m	struct:CQuaternionExt
s_SphColLight	ui/AntTweakBar/src/TwMgr.cpp	/^vector<color32> CQuaternionExt::s_SphColLight;$/;"	m	class:CQuaternionExt	file:
s_SphColLight	ui/AntTweakBar/src/TwMgr.h	/^    static std::vector<color32> s_SphColLight;$/;"	m	struct:CQuaternionExt
s_SphTri	ui/AntTweakBar/src/TwMgr.cpp	/^vector<float>   CQuaternionExt::s_SphTri;$/;"	m	class:CQuaternionExt	file:
s_SphTri	ui/AntTweakBar/src/TwMgr.h	/^    static std::vector<float>   s_SphTri;$/;"	m	struct:CQuaternionExt
s_SphTriProj	ui/AntTweakBar/src/TwMgr.cpp	/^vector<int>     CQuaternionExt::s_SphTriProj;$/;"	m	class:CQuaternionExt	file:
s_SphTriProj	ui/AntTweakBar/src/TwMgr.h	/^    static std::vector<int>     s_SphTriProj;$/;"	m	struct:CQuaternionExt
s_Verif	ui/AntTweakBar/src/TwMgr.cpp	/^} s_Verif;$/;"	v	typeref:struct:CTwVerif	file:
scale	cpp/matrix.cpp	/^  void scale(float x,float y,float z){$/;"	f	namespace:mat
scancode	ui/AntTweakBar/src/MiniSDL12.h	/^    Uint8 scancode;$/;"	m	struct:SDL_keysym
scancode	ui/AntTweakBar/src/MiniSDL13.h	/^    SDL_scancode scancode;$/;"	m	struct:SDL_keysym
scene	screens/GameScreen.h	/^  std::vector<Shape*> scene;$/;"	m	struct:GameScreen
screen	cpp/screen.cpp	/^namespace screen{$/;"	n	file:
screen	screen.h	/^namespace screen{$/;"	n
screens	screen.h	/^  static std::vector<Screen*> screens;$/;"	m	struct:Screen
setPointerPosition	cpp/Player.cpp	/^    void Player::setPointerPosition(float x, float y)$/;"	f	class:game::Player
setRotation	cpp/Player.cpp	/^    void Player::setRotation(int dir)$/;"	f	class:game::Player
setXRotation	cpp/Player.cpp	/^    void Player::setXRotation(int dir)$/;"	f	class:game::Player
shape	cpp/shapes.cpp	/^namespace shape{$/;"	n	file:
shape	shapes.h	/^namespace shape{$/;"	n
shs	screens/GameScreen.h	/^  Shape* shs;$/;"	m	struct:GameScreen
si	cpp/screen.cpp	/^  int si;$/;"	m	namespace:screen	file:
sina	ui/AntTweakBar/examples/TwGLCoreSDL.c	/^GLint cosa, sina, colorloc;$/;"	v
size	Rope.h	/^  float size = 0.5;$/;"	m	struct:SoftDude
speed	Rope.h	/^  float speed = 0.005;$/;"	m	struct:SoftDude
speed	opengl/opengl.h	/^  float speed;$/;"	m	struct:AngularVelocity
start	ui/AntTweakBar/src/MiniSDL13.h	/^    int start;                                 $/;"	m	struct:SDL_TextEditingEvent
state	ui/AntTweakBar/src/MiniSDL12.h	/^    Uint8 state;$/;"	m	struct:SDL_ActiveEvent
state	ui/AntTweakBar/src/MiniSDL12.h	/^    Uint8 state;$/;"	m	struct:SDL_JoyButtonEvent
state	ui/AntTweakBar/src/MiniSDL12.h	/^    Uint8 state;$/;"	m	struct:SDL_KeyboardEvent
state	ui/AntTweakBar/src/MiniSDL12.h	/^    Uint8 state;$/;"	m	struct:SDL_MouseButtonEvent
state	ui/AntTweakBar/src/MiniSDL12.h	/^    Uint8 state;$/;"	m	struct:SDL_MouseMotionEvent
state	ui/AntTweakBar/src/MiniSDL13.h	/^    Uint8 state;           $/;"	m	struct:SDL_KeyboardEvent
state	ui/AntTweakBar/src/MiniSDL13.h	/^    Uint8 state;           $/;"	m	struct:SDL_MouseButtonEvent
state	ui/AntTweakBar/src/MiniSDL13.h	/^    Uint8 state;           $/;"	m	struct:SDL_MouseMotionEvent
state	ui/AntTweakBar/src/MiniSDL13.h	/^    Uint8 state;$/;"	m	struct:SDL_ActiveEvent
state	ui/AntTweakBar/src/MiniSDL13.h	/^    Uint8 state;$/;"	m	struct:SDL_JoyButtonEvent
state0	ui/AntTweakBar/src/TwMgr.h	/^    unsigned int state0;$/;"	m	struct:CTwFPU
stopRunning	cpp/Player.cpp	/^    void Player::stopRunning()$/;"	f	class:game::Player
stopRunningSideways	cpp/Player.cpp	/^    void Player::stopRunningSideways()$/;"	f	class:game::Player
surface	shapes.h	/^  SimpleSurface* surface;$/;"	m	struct:TexturedShape
sym	ui/AntTweakBar/src/MiniSDL12.h	/^    SDLKey sym;$/;"	m	struct:SDL_keysym
sym	ui/AntTweakBar/src/MiniSDL13.h	/^    SDLKey sym;$/;"	m	struct:SDL_keysym
syswm	ui/AntTweakBar/src/MiniSDL12.h	/^    SDL_SysWMEvent syswm;$/;"	m	union:__anon11
syswm	ui/AntTweakBar/src/MiniSDL13.h	/^    SDL_SysWMEvent syswm;          $/;"	m	union:SDL_Event
tension	SoftBody.h	/^  float tension = 0.1;$/;"	m	struct:SoftBody
texCoordBuf	shapes.h	/^  GLuint texCoordBuf;$/;"	m	struct:TexturedShape
texCoordHandle	opengl/programs.h	/^    GLuint texCoordHandle;$/;"	m	struct:program::DummyTextured
texCoordHandle	opengl/programs.h	/^    GLuint texCoordHandle;$/;"	m	struct:program::TexturedFixedColor
texCoordOffsetHandle	opengl/programs.h	/^    GLuint texCoordOffsetHandle;$/;"	m	struct:program::TexturedFixedColor
texCoords	shapes.h	/^  std::vector<Vec2> texCoords;$/;"	m	struct:TexturedShape
text	ui/AntTweakBar/src/MiniSDL13.h	/^    SDL_TextInputEvent text;       $/;"	m	union:SDL_Event
text	ui/AntTweakBar/src/MiniSDL13.h	/^    char text[SDL_TEXTEDITINGEVENT_TEXT_SIZE]; $/;"	m	struct:SDL_TextEditingEvent
text	ui/AntTweakBar/src/MiniSDL13.h	/^    char text[SDL_TEXTINPUTEVENT_TEXT_SIZE];$/;"	m	struct:SDL_TextInputEvent
texture	shapes.h	/^  GLuint texture;$/;"	m	struct:TexturedShape
textureUniform	opengl/programs.h	/^    GLuint textureUniform;$/;"	m	struct:program::DummyTextured
textureUniform	opengl/programs.h	/^    GLuint textureUniform;$/;"	m	struct:program::TexturedFixedColor
tick	cpp/loop.cpp	/^  unsigned long tick = 0;$/;"	m	namespace:loop	file:
tickCounter	cpp/loop.cpp	/^  unsigned long tickCounter = 0;$/;"	m	namespace:loop	file:
tilt	ui/AntTweakBar/src/MiniSDL13.h	/^    int tilt;              $/;"	m	struct:SDL_MouseMotionEvent
toString	cpp/extra.cpp	/^std::string toString(float in){$/;"	f
togglePointerMode	cpp/Player.cpp	/^    void Player::togglePointerMode()$/;"	f	class:game::Player
translate	cpp/matrix.cpp	/^  void translate(float x,float y,float z){$/;"	f	namespace:mat
type	Cube.hpp	/^        uint8_t type = 0;$/;"	m	class:game::Cube
type	shapes.h	/^  shape::EnumShape type;$/;"	m	struct:SimpleShape
type	ui/AntTweakBar/src/MiniSDL12.h	/^    Uint8 type;$/;"	m	struct:SDL_ActiveEvent
type	ui/AntTweakBar/src/MiniSDL12.h	/^    Uint8 type;$/;"	m	struct:SDL_ExposeEvent
type	ui/AntTweakBar/src/MiniSDL12.h	/^    Uint8 type;$/;"	m	struct:SDL_JoyAxisEvent
type	ui/AntTweakBar/src/MiniSDL12.h	/^    Uint8 type;$/;"	m	struct:SDL_JoyBallEvent
type	ui/AntTweakBar/src/MiniSDL12.h	/^    Uint8 type;$/;"	m	struct:SDL_JoyButtonEvent
type	ui/AntTweakBar/src/MiniSDL12.h	/^    Uint8 type;$/;"	m	struct:SDL_JoyHatEvent
type	ui/AntTweakBar/src/MiniSDL12.h	/^    Uint8 type;$/;"	m	struct:SDL_KeyboardEvent
type	ui/AntTweakBar/src/MiniSDL12.h	/^    Uint8 type;$/;"	m	struct:SDL_MouseButtonEvent
type	ui/AntTweakBar/src/MiniSDL12.h	/^    Uint8 type;$/;"	m	struct:SDL_MouseMotionEvent
type	ui/AntTweakBar/src/MiniSDL12.h	/^    Uint8 type;$/;"	m	struct:SDL_QuitEvent
type	ui/AntTweakBar/src/MiniSDL12.h	/^    Uint8 type;$/;"	m	struct:SDL_ResizeEvent
type	ui/AntTweakBar/src/MiniSDL12.h	/^    Uint8 type;$/;"	m	struct:SDL_SysWMEvent
type	ui/AntTweakBar/src/MiniSDL12.h	/^    Uint8 type;$/;"	m	struct:SDL_UserEvent
type	ui/AntTweakBar/src/MiniSDL12.h	/^    Uint8 type;$/;"	m	union:__anon11
type	ui/AntTweakBar/src/MiniSDL13.h	/^    Uint8 type;                                $/;"	m	struct:SDL_TextEditingEvent
type	ui/AntTweakBar/src/MiniSDL13.h	/^    Uint8 type;                              $/;"	m	struct:SDL_TextInputEvent
type	ui/AntTweakBar/src/MiniSDL13.h	/^    Uint8 type;                    $/;"	m	union:SDL_Event
type	ui/AntTweakBar/src/MiniSDL13.h	/^    Uint8 type;             $/;"	m	struct:SDL_WindowEvent
type	ui/AntTweakBar/src/MiniSDL13.h	/^    Uint8 type;            $/;"	m	struct:SDL_KeyboardEvent
type	ui/AntTweakBar/src/MiniSDL13.h	/^    Uint8 type;            $/;"	m	struct:SDL_MouseButtonEvent
type	ui/AntTweakBar/src/MiniSDL13.h	/^    Uint8 type;            $/;"	m	struct:SDL_MouseMotionEvent
type	ui/AntTweakBar/src/MiniSDL13.h	/^    Uint8 type;            $/;"	m	struct:SDL_MouseWheelEvent
type	ui/AntTweakBar/src/MiniSDL13.h	/^    Uint8 type;$/;"	m	struct:SDL_ActiveEvent
type	ui/AntTweakBar/src/MiniSDL13.h	/^    Uint8 type;$/;"	m	struct:SDL_ExposeEvent
type	ui/AntTweakBar/src/MiniSDL13.h	/^    Uint8 type;$/;"	m	struct:SDL_JoyAxisEvent
type	ui/AntTweakBar/src/MiniSDL13.h	/^    Uint8 type;$/;"	m	struct:SDL_JoyBallEvent
type	ui/AntTweakBar/src/MiniSDL13.h	/^    Uint8 type;$/;"	m	struct:SDL_JoyButtonEvent
type	ui/AntTweakBar/src/MiniSDL13.h	/^    Uint8 type;$/;"	m	struct:SDL_JoyHatEvent
type	ui/AntTweakBar/src/MiniSDL13.h	/^    Uint8 type;$/;"	m	struct:SDL_ProximityEvent
type	ui/AntTweakBar/src/MiniSDL13.h	/^    Uint8 type;$/;"	m	struct:SDL_QuitEvent
type	ui/AntTweakBar/src/MiniSDL13.h	/^    Uint8 type;$/;"	m	struct:SDL_ResizeEvent
type	ui/AntTweakBar/src/MiniSDL13.h	/^    Uint8 type;$/;"	m	struct:SDL_SysWMEvent
type	ui/AntTweakBar/src/MiniSDL13.h	/^    Uint8 type;$/;"	m	struct:SDL_UserEvent
unicode	ui/AntTweakBar/src/MiniSDL12.h	/^    Uint16 unicode;$/;"	m	struct:SDL_keysym
unicode	ui/AntTweakBar/src/MiniSDL13.h	/^    Uint32 unicode;$/;"	m	struct:SDL_keysym
update	bak/GameScreen.cpp	/^void GameScreen::update(float dt){$/;"	f	class:GameScreen
update	cpp/Player.cpp	/^    void Player::update(float dt)$/;"	f	class:game::Player
update	cpp/bak/SoftBody.cpp	/^void SoftBody::update(){$/;"	f	class:SoftBody
update	cpp/screen.cpp	/^void Screen::update(float dt) { };$/;"	f	class:Screen
update	cpp/screens/GameScreen.cpp	/^void GameScreen::update(float dt){$/;"	f	class:GameScreen
update	tmo/GameScreen.cpp	/^void GameScreen::update(){$/;"	f	class:GameScreen
user	ui/AntTweakBar/src/MiniSDL12.h	/^    SDL_UserEvent user;$/;"	m	union:__anon11
user	ui/AntTweakBar/src/MiniSDL13.h	/^    SDL_UserEvent user;            $/;"	m	union:SDL_Event
value	ui/AntTweakBar/src/MiniSDL12.h	/^    Sint16 value;$/;"	m	struct:SDL_JoyAxisEvent
value	ui/AntTweakBar/src/MiniSDL12.h	/^    Uint8 value;$/;"	m	struct:SDL_JoyHatEvent
value	ui/AntTweakBar/src/MiniSDL13.h	/^    Sint16 value;$/;"	m	struct:SDL_JoyAxisEvent
value	ui/AntTweakBar/src/MiniSDL13.h	/^    Uint8 value;$/;"	m	struct:SDL_JoyHatEvent
varray	ui/AntTweakBar/examples/TwGLCoreSDL.c	/^GLuint vshader, fshader, program, varray, buffer;$/;"	v
velocity	Player.hpp	/^		glm::vec3 velocity;$/;"	m	class:game::Player
vertBuf	Rope.h	/^  GLuint vertBuf;$/;"	m	struct:SoftDude
vertBuf	SoftBody.h	/^  GLuint vertBuf;$/;"	m	struct:SoftBody
vertBuf	opengl/opengl.h	/^  GLuint vertBuf = 0;$/;"	m	struct:DrawCache
vertBuf	shapes.h	/^  GLuint vertBuf;$/;"	m	struct:SimpleShape
vertHandle	opengl/programs.h	/^  GLuint vertHandle;$/;"	m	struct:Program
vertShader	opengl/programs.h	/^  GLuint vertShader;$/;"	m	struct:Program
verts	Rope.h	/^  std::vector<vec2> verts;$/;"	m	struct:SoftDude
verts	SoftBody.h	/^  std::vector<Vec> verts;$/;"	m	struct:SoftBody
verts	opengl/opengl.h	/^  std::vector<float> verts;$/;"	m	struct:DrawCache
verts	shapes.h	/^  std::vector<Vec> verts;$/;"	m	struct:SimpleShape
vfmt	ui/AntTweakBar/src/MiniSDL12.h	/^    SDL_PixelFormat *vfmt;$/;"	m	struct:SDL_VideoInfo
vfmt	ui/AntTweakBar/src/MiniSDL13.h	/^    SDL_PixelFormat *vfmt;$/;"	m	struct:SDL_VideoInfo
video_mem	ui/AntTweakBar/src/MiniSDL12.h	/^    Uint32 video_mem;$/;"	m	struct:SDL_VideoInfo
video_mem	ui/AntTweakBar/src/MiniSDL13.h	/^    Uint32 video_mem;$/;"	m	struct:SDL_VideoInfo
view	cpp/matrix.cpp	/^  glm::mat4 view = glm::mat4(1);$/;"	m	namespace:mat	file:
viewMat	Player.hpp	/^		glm::mat4 viewMat;$/;"	m	class:game::Player
vshader	ui/AntTweakBar/examples/TwGLCoreSDL.c	/^GLuint vshader, fshader, program, varray, buffer;$/;"	v
w	opengl/opengl.h	/^  int w;$/;"	m	struct:SimpleSurface
w	ui/AntTweakBar/src/MiniSDL12.h	/^    int w;$/;"	m	struct:SDL_ResizeEvent
w	ui/AntTweakBar/src/MiniSDL13.h	/^    int w;$/;"	m	struct:SDL_ResizeEvent
wheel	ui/AntTweakBar/src/MiniSDL13.h	/^    SDL_MouseWheelEvent wheel;     $/;"	m	union:SDL_Event
which	ui/AntTweakBar/src/MiniSDL12.h	/^    Uint8 which;$/;"	m	struct:SDL_JoyAxisEvent
which	ui/AntTweakBar/src/MiniSDL12.h	/^    Uint8 which;$/;"	m	struct:SDL_JoyBallEvent
which	ui/AntTweakBar/src/MiniSDL12.h	/^    Uint8 which;$/;"	m	struct:SDL_JoyButtonEvent
which	ui/AntTweakBar/src/MiniSDL12.h	/^    Uint8 which;$/;"	m	struct:SDL_JoyHatEvent
which	ui/AntTweakBar/src/MiniSDL12.h	/^    Uint8 which;$/;"	m	struct:SDL_KeyboardEvent
which	ui/AntTweakBar/src/MiniSDL12.h	/^    Uint8 which;$/;"	m	struct:SDL_MouseButtonEvent
which	ui/AntTweakBar/src/MiniSDL12.h	/^    Uint8 which;$/;"	m	struct:SDL_MouseMotionEvent
which	ui/AntTweakBar/src/MiniSDL13.h	/^    Uint8 which;                             $/;"	m	struct:SDL_TextInputEvent
which	ui/AntTweakBar/src/MiniSDL13.h	/^    Uint8 which;           $/;"	m	struct:SDL_KeyboardEvent
which	ui/AntTweakBar/src/MiniSDL13.h	/^    Uint8 which;           $/;"	m	struct:SDL_MouseButtonEvent
which	ui/AntTweakBar/src/MiniSDL13.h	/^    Uint8 which;           $/;"	m	struct:SDL_MouseMotionEvent
which	ui/AntTweakBar/src/MiniSDL13.h	/^    Uint8 which;           $/;"	m	struct:SDL_MouseWheelEvent
which	ui/AntTweakBar/src/MiniSDL13.h	/^    Uint8 which;$/;"	m	struct:SDL_JoyAxisEvent
which	ui/AntTweakBar/src/MiniSDL13.h	/^    Uint8 which;$/;"	m	struct:SDL_JoyBallEvent
which	ui/AntTweakBar/src/MiniSDL13.h	/^    Uint8 which;$/;"	m	struct:SDL_JoyButtonEvent
which	ui/AntTweakBar/src/MiniSDL13.h	/^    Uint8 which;$/;"	m	struct:SDL_JoyHatEvent
which	ui/AntTweakBar/src/MiniSDL13.h	/^    Uint8 which;$/;"	m	struct:SDL_ProximityEvent
window	cpp/screen.cpp	/^  SDL_Window* window;$/;"	m	namespace:screen	file:
window	ui/AntTweakBar/src/MiniSDL13.h	/^    SDL_WindowEvent window;        $/;"	m	union:SDL_Event
windowID	ui/AntTweakBar/src/MiniSDL13.h	/^    SDL_WindowID windowID;                   $/;"	m	struct:SDL_TextInputEvent
windowID	ui/AntTweakBar/src/MiniSDL13.h	/^    SDL_WindowID windowID;  $/;"	m	struct:SDL_WindowEvent
windowID	ui/AntTweakBar/src/MiniSDL13.h	/^    SDL_WindowID windowID; $/;"	m	struct:SDL_KeyboardEvent
windowID	ui/AntTweakBar/src/MiniSDL13.h	/^    SDL_WindowID windowID; $/;"	m	struct:SDL_MouseButtonEvent
windowID	ui/AntTweakBar/src/MiniSDL13.h	/^    SDL_WindowID windowID; $/;"	m	struct:SDL_MouseMotionEvent
windowID	ui/AntTweakBar/src/MiniSDL13.h	/^    SDL_WindowID windowID; $/;"	m	struct:SDL_MouseWheelEvent
windowID	ui/AntTweakBar/src/MiniSDL13.h	/^    SDL_WindowID windowID; $/;"	m	struct:SDL_UserEvent
windowID	ui/AntTweakBar/src/MiniSDL13.h	/^    SDL_WindowID windowID;$/;"	m	struct:SDL_ProximityEvent
wm_available	ui/AntTweakBar/src/MiniSDL12.h	/^    Uint32 wm_available :1;$/;"	m	struct:SDL_VideoInfo
wm_available	ui/AntTweakBar/src/MiniSDL13.h	/^    Uint32 wm_available :1;$/;"	m	struct:SDL_VideoInfo
x	Cube.hpp	/^        int x() const { return pos[0]; }$/;"	f	class:game::Cube
x	Rope.h	/^  float x = 0;$/;"	m	struct:SoftDude
x	opengl/opengl.h	/^  float x;$/;"	m	struct:Vec
x	opengl/opengl.h	/^  float x;$/;"	m	struct:Vec2
x	ui/AntTweakBar/src/MiniSDL12.h	/^    Uint16 x, y;$/;"	m	struct:SDL_MouseButtonEvent
x	ui/AntTweakBar/src/MiniSDL12.h	/^    Uint16 x, y;$/;"	m	struct:SDL_MouseMotionEvent
x	ui/AntTweakBar/src/MiniSDL13.h	/^    int x;                 $/;"	m	struct:SDL_MouseButtonEvent
x	ui/AntTweakBar/src/MiniSDL13.h	/^    int x;                 $/;"	m	struct:SDL_MouseMotionEvent
x	ui/AntTweakBar/src/MiniSDL13.h	/^    int x;                 $/;"	m	struct:SDL_MouseWheelEvent
x	ui/AntTweakBar/src/MiniSDL13.h	/^    int x;$/;"	m	struct:SDL_ProximityEvent
x	ui/AntTweakBar/src/TwBar.h	/^        int                 x, y;$/;"	m	struct:CTwBar::CPoint
x	ui/AntTweakBar/src/TwOpenGLCore.h	/^    struct Vec2         { GLfloat x, y; Vec2(){} Vec2(GLfloat _X, GLfloat _Y):x(_X),y(_Y){} Vec2(int _X, int _Y):x(GLfloat(_X)),y(GLfloat(_Y)){} };$/;"	m	struct:CTwGraphOpenGLCore::Vec2
xAngularVelocity	Player.hpp	/^		float xAngularVelocity;$/;"	m	class:game::Player
xRunning	Player.hpp	/^		bool zRunning, xRunning;$/;"	m	class:game::Player
xVector	Player.hpp	/^		glm::vec3 xVector;$/;"	m	class:game::Player
xangle	Player.hpp	/^		float xangle;$/;"	m	class:game::Player
xrel	ui/AntTweakBar/src/MiniSDL12.h	/^    Sint16 xrel;$/;"	m	struct:SDL_JoyBallEvent
xrel	ui/AntTweakBar/src/MiniSDL12.h	/^    Sint16 xrel;$/;"	m	struct:SDL_MouseMotionEvent
xrel	ui/AntTweakBar/src/MiniSDL13.h	/^    Sint16 xrel;$/;"	m	struct:SDL_JoyBallEvent
xrel	ui/AntTweakBar/src/MiniSDL13.h	/^    int xrel;              $/;"	m	struct:SDL_MouseMotionEvent
xspeed	Player.hpp	/^		float xspeed;$/;"	m	class:game::Player
y	Cube.hpp	/^        int y() const { return pos[1]; }$/;"	f	class:game::Cube
y	opengl/opengl.h	/^  float y;$/;"	m	struct:Vec
y	opengl/opengl.h	/^  float y;$/;"	m	struct:Vec2
y	ui/AntTweakBar/src/MiniSDL12.h	/^    Uint16 x, y;$/;"	m	struct:SDL_MouseButtonEvent
y	ui/AntTweakBar/src/MiniSDL12.h	/^    Uint16 x, y;$/;"	m	struct:SDL_MouseMotionEvent
y	ui/AntTweakBar/src/MiniSDL13.h	/^    int y;                 $/;"	m	struct:SDL_MouseButtonEvent
y	ui/AntTweakBar/src/MiniSDL13.h	/^    int y;                 $/;"	m	struct:SDL_MouseMotionEvent
y	ui/AntTweakBar/src/MiniSDL13.h	/^    int y;                 $/;"	m	struct:SDL_MouseWheelEvent
y	ui/AntTweakBar/src/MiniSDL13.h	/^    int y;$/;"	m	struct:SDL_ProximityEvent
y	ui/AntTweakBar/src/TwBar.h	/^        int                 x, y;$/;"	m	struct:CTwBar::CPoint
y	ui/AntTweakBar/src/TwOpenGLCore.h	/^    struct Vec2         { GLfloat x, y; Vec2(){} Vec2(GLfloat _X, GLfloat _Y):x(_X),y(_Y){} Vec2(int _X, int _Y):x(GLfloat(_X)),y(GLfloat(_Y)){} };$/;"	m	struct:CTwGraphOpenGLCore::Vec2
yaccel	Player.hpp	/^		float yaccel;$/;"	m	class:game::Player
yrel	ui/AntTweakBar/src/MiniSDL12.h	/^    Sint16 yrel;$/;"	m	struct:SDL_JoyBallEvent
yrel	ui/AntTweakBar/src/MiniSDL12.h	/^    Sint16 yrel;$/;"	m	struct:SDL_MouseMotionEvent
yrel	ui/AntTweakBar/src/MiniSDL13.h	/^    Sint16 yrel;$/;"	m	struct:SDL_JoyBallEvent
yrel	ui/AntTweakBar/src/MiniSDL13.h	/^    int yrel;              $/;"	m	struct:SDL_MouseMotionEvent
yspeed	Player.hpp	/^		float yspeed;$/;"	m	class:game::Player
z	Cube.hpp	/^        int z() const { return pos[2]; }$/;"	f	class:game::Cube
z	opengl/opengl.h	/^  float z;$/;"	m	struct:Vec
z	ui/AntTweakBar/src/MiniSDL13.h	/^    int z;                 $/;"	m	struct:SDL_MouseMotionEvent
zRunning	Player.hpp	/^		bool zRunning, xRunning;$/;"	m	class:game::Player
zVector	Player.hpp	/^		glm::vec3 zVector;$/;"	m	class:game::Player
zspeed	Player.hpp	/^		float zspeed;$/;"	m	class:game::Player
~CEditInPlace	ui/AntTweakBar/src/TwBar.cpp	/^CTwBar::CEditInPlace::~CEditInPlace()$/;"	f	class:CTwBar::CEditInPlace
~CMemberProxy	ui/AntTweakBar/src/TwMgr.cpp	/^CTwMgr::CMemberProxy::~CMemberProxy() $/;"	f	class:CTwMgr::CMemberProxy
~CStructProxy	ui/AntTweakBar/src/TwMgr.cpp	/^CTwMgr::CStructProxy::~CStructProxy() $/;"	f	class:CTwMgr::CStructProxy
~CTexFont	ui/AntTweakBar/src/TwFonts.cpp	/^CTexFont::~CTexFont()$/;"	f	class:CTexFont
~CTwBar	ui/AntTweakBar/src/TwBar.cpp	/^CTwBar::~CTwBar()$/;"	f	class:CTwBar
~CTwFPU	ui/AntTweakBar/src/TwMgr.h	/^    ~CTwFPU()$/;"	f	struct:CTwFPU
~CTwMgr	ui/AntTweakBar/src/TwMgr.cpp	/^CTwMgr::~CTwMgr()$/;"	f	class:CTwMgr
~CTwVar	ui/AntTweakBar/src/TwBar.h	/^    virtual                 ~CTwVar() {}$/;"	f	struct:CTwVar
~CTwVarAtom	ui/AntTweakBar/src/TwBar.cpp	/^CTwVarAtom::~CTwVarAtom()$/;"	f	class:CTwVarAtom
~CTwVarGroup	ui/AntTweakBar/src/TwBar.cpp	/^CTwVarGroup::~CTwVarGroup()$/;"	f	class:CTwVarGroup
~CTwVerif	ui/AntTweakBar/src/TwMgr.cpp	/^    ~CTwVerif() $/;"	f	struct:CTwVerif
~ITwGraph	ui/AntTweakBar/src/TwGraph.h	/^    virtual             ~ITwGraph() {}  \/\/ required by gcc$/;"	f	class:ITwGraph
